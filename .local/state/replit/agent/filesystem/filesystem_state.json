{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# EccoServ - Well Service Management System\n\n## Overview\n\nEccoServ is a comprehensive well service management system that connects clients who own wells with service providers who maintain them. The application facilitates scheduling, tracking, and managing maintenance visits for residential, industrial, and agricultural wells. The system supports three user types: clients (well owners), providers (maintenance technicians), and administrators who oversee the entire operation.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent design\n- **Styling**: Tailwind CSS with CSS variables for theming support (light/dark modes)\n- **Routing**: Wouter for client-side routing with role-based route protection\n- **State Management**: TanStack Query for server state management and React Context for authentication\n- **Form Handling**: React Hook Form with Zod schema validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with role-based endpoints\n- **File Uploads**: Multer middleware for handling image and document uploads (visit photos and documents)\n- **Error Handling**: Centralized error handling with status codes and JSON responses\n- **Development**: Hot reload with Vite integration in development mode\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Drizzle ORM ready for production deployment\n- **Schema Management**: Drizzle Kit for migrations and schema changes\n- **Connection**: DATABASE_URL environment variable configured for easy .env integration\n- **Storage Strategy**: In-memory storage with interface for seamless database migration (DatabaseStorage class available in server/storage.ts)\n- **Migration Ready**: `npm run db:push` command available for schema deployment\n- **Document Storage**: Support for PDF, DOC, DOCX file uploads in visits with validation\n\n### Authentication and Authorization\n- **Strategy**: Simple email/password authentication with user type differentiation\n- **Session Management**: Client-side storage using localStorage for user persistence\n- **Authorization**: Role-based access control with three user types (client, provider, admin)\n- **Route Protection**: Frontend route guards that redirect unauthorized users\n- **Provider Registration**: Only administrators can register new service providers (clients can self-register)\n\n### Data Models\n- **Users**: Base user entity with email (lowercase only), password, name, and user type\n- **Clients**: Extended user profile with address and phone for well owners\n- **Wells**: Client-owned assets with location, type, and status tracking\n- **Providers**: Service technicians with specialties and contact information\n- **Visits**: Service appointments linking providers to wells with observations, photos, documents, and status\n- **Scheduled Visits**: Future appointments with automatic scheduling from completed visits\n- **Material Usage**: Tracking of materials consumed during visits with quantities\n- **Water Parameters**: Water quality measurements with status indicators\n\n### Application Pages\n- **Landing Page** (`/`): Modern homepage with user type selection and feature overview\n- **Registration Page** (`/register`): Multi-step registration for clients and providers with conditional fields\n- **Login Page** (`/login`): Authentication with role-based dashboard redirection\n- **Client Dashboard**: Well management, visit history, scheduled visits viewing, and document/photo access\n- **Provider Dashboard**: Visit creation with materials/water tracking, scheduling, comprehensive reporting, and document/photo uploads\n- **Admin Dashboard**: Complete system oversight with:\n  - Real-time statistics (clients, providers, wells, visits, scheduled visits)\n  - All visits from all providers and clients with filtering\n  - All scheduled visits across the system\n  - All clients with well and visit statistics\n  - All wells with status tracking\n  - Complete material consumption reporting with visualizations\n  - Provider management with deletion and password reset capabilities\n  - Provider registration functionality\n\n### External Dependencies\n- **Database**: Neon Database (PostgreSQL serverless)\n- **UI Components**: Radix UI primitives for accessible component foundation\n- **Validation**: Zod for runtime type checking and form validation\n- **Date Handling**: date-fns for date formatting and manipulation\n- **Styling**: Tailwind CSS with class-variance-authority for component variants\n- **Development Tools**: Replit integration for development environment support","size_bytes":4812},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage-simple\";\nimport { loginSchema, insertVisitSchema, createInvoiceSchema, insertMaterialUsageSchema, insertWaterQualityParameterSchema, AVAILABLE_MATERIALS, WATER_PARAMETERS, WATER_STATUS_OPTIONS } from \"@shared/schema\";\nimport { ZodError } from \"zod\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport { randomUUID } from \"crypto\";\nimport express from \"express\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.diskStorage({\n    destination: 'uploads/',\n    filename: (req, file, cb) => {\n      // Preservar nome original com timestamp para evitar conflitos\n      const timestamp = Date.now();\n      const originalName = file.originalname;\n      const safeName = originalName.replace(/[^a-zA-Z0-9.\\-_]/g, '_');\n      cb(null, `${timestamp}_${safeName}`);\n    }\n  }),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    // Allow images and documents\n    if (file.mimetype.startsWith('image/') || \n        file.mimetype === 'application/pdf' || \n        file.mimetype.includes('document') ||\n        file.mimetype.includes('word')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only images and documents are allowed'));\n    }\n  }\n});\n\n// Create fields for multiple types of uploads\nconst uploadFields = upload.fields([\n  { name: 'photos', maxCount: 10 },\n  { name: 'documents', maxCount: 5 }\n]);\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Serve uploaded files\n  app.use('/uploads', express.static('uploads'));\n\n  // Registration\n  app.post('/api/register', async (req, res) => {\n    try {\n      const { name, email, password, userType } = req.body;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: 'Usuário já existe com este email' });\n      }\n\n      // Create user\n      const user = await storage.createUser({\n        name,\n        email,\n        password, // In production, hash the password\n        userType\n      });\n\n      res.json({ id: user.id, name: user.name, email: user.email, userType: user.userType });\n    } catch (error) {\n      console.error('Registration error:', error);\n      res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n  });\n\n  // Authentication\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password, userType } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user || user.password !== password || user.userType !== userType) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const userWithProfile = await storage.getUserWithProfile(user.id);\n      res.json({ user: userWithProfile });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get current user profile\n  app.get(\"/api/auth/profile/:userId\", async (req, res) => {\n    try {\n      const userWithProfile = await storage.getUserWithProfile(req.params.userId);\n      if (!userWithProfile) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ user: userWithProfile });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get current authenticated user (from localStorage)\n  app.get(\"/api/auth/user\", async (req, res) => {\n    try {\n      // In a real implementation, this would use session/token auth\n      // For now, we expect the client to send user data or we return null\n      res.json(null);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create client profile\n  app.post(\"/api/clients\", async (req, res) => {\n    try {\n      const { name, cpf, email, address, phone, password } = req.body;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: 'Usuário já existe com este email' });\n      }\n\n      // Create user first\n      const user = await storage.createUser({\n        name,\n        email,\n        password: password || \"123456\", // Default password\n        userType: \"client\"\n      });\n\n      // Then create client profile\n      const client = await storage.createClient({\n        userId: user.id,\n        address,\n        phone,\n        cpf\n      });\n\n      res.status(201).json({ user, client });\n    } catch (error) {\n      console.error('Create client error:', error);\n      res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n  });\n\n  // Create provider profile\n  app.post(\"/api/providers\", async (req, res) => {\n    try {\n      const { userId, specialties, phone } = req.body;\n      \n      const provider = await storage.createProvider({\n        userId,\n        specialties,\n        phone\n      });\n\n      res.status(201).json(provider);\n    } catch (error) {\n      console.error('Create provider error:', error);\n      res.status(500).json({ message: 'Erro interno do servidor' });\n    }\n  });\n\n  // Client routes\n  app.get(\"/api/clients/:clientId/wells\", async (req, res) => {\n    try {\n      const wells = await storage.getWellsByClientId(req.params.clientId);\n      res.json({ wells });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/clients/:clientId/visits\", async (req, res) => {\n    try {\n      const visits = await storage.getVisitsByClientId(req.params.clientId);\n      res.json({ visits });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/clients/:clientId/scheduled-visits\", async (req, res) => {\n    try {\n      const scheduledVisits = await storage.getScheduledVisitsByClientId(req.params.clientId);\n      res.json({ scheduledVisits });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Provider routes\n  app.get(\"/api/providers/:providerId/visits\", async (req, res) => {\n    try {\n      const provider = await storage.getProvider(req.params.providerId);\n      if (!provider) {\n        return res.status(404).json({ message: \"Provider not found\" });\n      }\n\n      const visits = await storage.getVisitsByProviderId(req.params.providerId);\n      const allVisitsWithDetails = await storage.getVisitsWithDetails();\n      const providerVisitsWithDetails = allVisitsWithDetails.filter(\n        visit => visit.providerId === req.params.providerId\n      );\n\n      res.json({ visits: providerVisitsWithDetails });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/providers/:providerId/visits-with-materials\", async (req, res) => {\n    try {\n      const provider = await storage.getProvider(req.params.providerId);\n      if (!provider) {\n        return res.status(404).json({ message: \"Provider not found\" });\n      }\n\n      const visits = await storage.getVisitsByProviderId(req.params.providerId);\n      const visitsWithMaterials = [];\n      \n      for (const visit of visits) {\n        const visitWithMaterials = await storage.getVisitWithMaterials(visit.id);\n        if (visitWithMaterials) {\n          visitsWithMaterials.push(visitWithMaterials);\n        }\n      }\n\n      res.json({ visits: visitsWithMaterials });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/visits\", uploadFields, async (req, res) => {\n    try {\n      console.log('Received visit data:', req.body);\n      \n      const visitData = {\n        wellId: req.body.wellId,\n        providerId: req.body.providerId,\n        visitDate: new Date(req.body.visitDate),\n        serviceType: req.body.serviceType,\n        visitType: req.body.visitType,\n        nextVisitDate: req.body.nextVisitDate ? new Date(req.body.nextVisitDate) : null,\n        observations: req.body.observations || '',\n        status: req.body.status || 'completed',\n        photos: req.files && (req.files as any).photos ? (req.files as any).photos.map((file: Express.Multer.File) => file.filename) : [],\n        documents: req.files && (req.files as any).documents ? (req.files as any).documents.map((file: Express.Multer.File) => file.filename) : []\n      };\n      \n      console.log('Processed visit data:', visitData);\n      \n      const parsedData = insertVisitSchema.parse(visitData);\n\n      const visit = await storage.createVisit(parsedData);\n\n      // Handle materials if provided\n      if (req.body.materials) {\n        try {\n          const materials = JSON.parse(req.body.materials);\n          for (const material of materials) {\n            await storage.createMaterialUsage({\n              visitId: visit.id,\n              materialType: material.type,\n              quantityGrams: material.quantity,\n              notes: null\n            });\n          }\n        } catch (materialError) {\n          console.error(\"Error saving materials:\", materialError);\n        }\n      }\n\n      // Handle water quality parameters if provided\n      if (req.body.waterParameters) {\n        try {\n          const waterParameters = JSON.parse(req.body.waterParameters);\n          for (const param of waterParameters) {\n            await storage.createWaterQualityParameter({\n              visitId: visit.id,\n              parameter: param.parameter,\n              value: param.value,\n              unit: param.unit,\n              status: param.status,\n              notes: param.notes || null\n            });\n          }\n        } catch (parameterError) {\n          console.error(\"Error saving water parameters:\", parameterError);\n        }\n      }\n\n      // If it's a periodic visit and nextVisitDate is provided, create a scheduled visit\n      if (visitData.visitType === 'periodic' && visitData.nextVisitDate) {\n        await storage.createScheduledVisit({\n          wellId: visitData.wellId,\n          providerId: visitData.providerId,\n          scheduledDate: visitData.nextVisitDate,\n          serviceType: visitData.serviceType,\n          status: 'scheduled',\n          notes: `Agendamento automático gerado pela visita ${visit.id}`,\n          createdFromVisitId: visit.id\n        });\n        console.log('Agendamento automático criado para:', visitData.nextVisitDate);\n      }\n\n      res.status(201).json({ visit });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Scheduled visits routes\n  app.get(\"/api/scheduled-visits\", async (req, res) => {\n    try {\n      const scheduledVisits = await storage.getScheduledVisitsWithDetails();\n      res.json({ scheduledVisits });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/providers/:providerId/scheduled-visits\", async (req, res) => {\n    try {\n      const allScheduledVisits = await storage.getScheduledVisitsWithDetails();\n      const providerScheduledVisits = allScheduledVisits.filter(\n        visit => visit.providerId === req.params.providerId\n      );\n      res.json({ scheduledVisits: providerScheduledVisits });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/clients/:clientId/scheduled-visits\", async (req, res) => {\n    try {\n      const scheduledVisits = await storage.getScheduledVisitsByClientId(req.params.clientId);\n      res.json({ scheduledVisits });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/scheduled-visits/:id/status\", async (req, res) => {\n    try {\n      const { status } = req.body;\n      await storage.updateScheduledVisitStatus(req.params.id, status);\n      res.json({ message: \"Status atualizado com sucesso\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/stats\", async (req, res) => {\n    try {\n      const clients = await storage.getAllClients();\n      const providers = await storage.getAllProviders();\n      const wells = await storage.getWellsWithClient();\n      const visits = await storage.getVisitsWithDetails();\n      const scheduledVisits = await storage.getScheduledVisitsWithDetails();\n\n      const currentMonth = new Date().getMonth();\n      const currentYear = new Date().getFullYear();\n      const monthlyVisits = visits.filter(visit => {\n        const visitDate = new Date(visit.visitDate);\n        return visitDate.getMonth() === currentMonth && visitDate.getFullYear() === currentYear;\n      });\n\n      res.json({\n        totalClients: clients.length,\n        totalProviders: providers.length,\n        totalWells: wells.length,\n        totalVisits: visits.length,\n        monthlyVisits: monthlyVisits.length,\n        scheduledVisits: scheduledVisits.length\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/clients\", async (req, res) => {\n    try {\n      const clients = await storage.getAllClients();\n      res.json({ clients });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/providers\", async (req, res) => {\n    try {\n      const providers = await storage.getAllProviders();\n      res.json({ providers });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Delete provider\n  app.delete(\"/api/admin/providers/:providerId\", async (req, res) => {\n    try {\n      const { providerId } = req.params;\n      \n      // Get provider to find associated user\n      const provider = await storage.getProvider(providerId);\n      if (!provider) {\n        return res.status(404).json({ message: \"Prestador não encontrado\" });\n      }\n\n      // Delete provider profile first\n      await storage.deleteProvider(providerId);\n      \n      // Delete associated user\n      await storage.deleteUser(provider.userId);\n\n      res.json({ message: \"Prestador excluído com sucesso\" });\n    } catch (error) {\n      console.error('Delete provider error:', error);\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Reset client password\n  app.post(\"/api/admin/clients/:clientId/reset-password\", async (req, res) => {\n    try {\n      const { clientId } = req.params;\n      \n      // Get client to find associated user\n      const client = await storage.getClient(clientId);\n      if (!client) {\n        return res.status(404).json({ message: \"Cliente não encontrado\" });\n      }\n\n      // Reset user password to \"12345\"\n      await storage.updateUserPassword(client.userId, \"12345\");\n\n      res.json({ message: \"Senha do cliente resetada para '12345'\" });\n    } catch (error) {\n      console.error('Reset client password error:', error);\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n\n  // Reset provider password\n  app.put(\"/api/admin/providers/:providerId/reset-password\", async (req, res) => {\n    try {\n      const { providerId } = req.params;\n      \n      // Get provider to find associated user\n      const provider = await storage.getProvider(providerId);\n      if (!provider) {\n        return res.status(404).json({ message: \"Prestador não encontrado\" });\n      }\n\n      // Reset password to 123456\n      await storage.updateUserPassword(provider.userId, \"123456\");\n\n      res.json({ message: \"Senha resetada para 123456\" });\n    } catch (error) {\n      console.error('Reset password error:', error);\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n\n  app.get(\"/api/admin/wells\", async (req, res) => {\n    try {\n      const wells = await storage.getWellsWithClient();\n      res.json({ wells });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/visits\", async (req, res) => {\n    try {\n      const visits = await storage.getVisitsWithDetails();\n      res.json({ visits });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/scheduled-visits\", async (req, res) => {\n    try {\n      const scheduledVisits = await storage.getScheduledVisitsWithDetails();\n      res.json({ scheduledVisits });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/materials/all-consumption\", async (req, res) => {\n    try {\n      // Get all visits with details to access material usage\n      const visits = await storage.getVisitsWithDetails();\n      const materialTotals: Record<string, { totalGrams: number, visitCount: number, dates: string[] }> = {};\n      \n      // Process each visit to sum material usage\n      for (const visit of visits) {\n        try {\n          const materials = await storage.getMaterialUsageByVisitId(visit.id);\n          const visitDate = new Date(visit.visitDate).toISOString().split('T')[0];\n          \n          for (const material of materials) {\n            const key = material.materialType;\n            if (!materialTotals[key]) {\n              materialTotals[key] = { totalGrams: 0, visitCount: 0, dates: [] };\n            }\n            materialTotals[key].totalGrams += Number(material.quantityGrams) || 0;\n            materialTotals[key].visitCount += 1;\n            if (!materialTotals[key].dates.includes(visitDate)) {\n              materialTotals[key].dates.push(visitDate);\n            }\n          }\n        } catch (materialError) {\n          console.error(`Error getting materials for visit ${visit.id}:`, materialError);\n        }\n      }\n\n      const consumption = Object.entries(materialTotals).map(([materialType, data]) => ({\n        materialType,\n        totalGrams: data.totalGrams,\n        totalKilograms: Number((data.totalGrams / 1000).toFixed(3)),\n        visitCount: data.visitCount,\n        averagePerVisit: Number((data.totalGrams / data.visitCount).toFixed(1)),\n        usageDates: data.dates.sort()\n      })).sort((a, b) => b.totalKilograms - a.totalKilograms);\n\n      console.log('Material consumption calculated:', consumption);\n      res.json({ consumption });\n    } catch (error) {\n      console.error('Error calculating material consumption:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get all clients and wells for dropdowns\n  app.get(\"/api/clients\", async (req, res) => {\n    try {\n      const clients = await storage.getAllClients();\n      res.json({ clients });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/wells\", async (req, res) => {\n    try {\n      const wells = await storage.getWellsWithClient();\n      res.json({ wells });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get wells for specific client\n  app.get(\"/api/clients/:clientId/wells\", async (req, res) => {\n    try {\n      const { clientId } = req.params;\n      const wells = await storage.getWellsByClientId(clientId);\n      res.json({ wells });\n    } catch (error) {\n      console.error('Get client wells error:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create new well\n  app.post(\"/api/wells\", async (req, res) => {\n    try {\n      const wellData = req.body;\n      const well = await storage.createWell(wellData);\n      res.status(201).json(well);\n    } catch (error) {\n      console.error('Create well error:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Invoice routes\n  app.post(\"/api/invoices\", async (req, res) => {\n    try {\n      const invoiceData = createInvoiceSchema.parse(req.body);\n      \n      // Get visit details to populate client and provider\n      const visit = await storage.getVisit(invoiceData.visitId);\n      if (!visit) {\n        return res.status(404).json({ message: \"Visit not found\" });\n      }\n\n      const well = await storage.getWell(visit.wellId);\n      if (!well) {\n        return res.status(404).json({ message: \"Well not found\" });\n      }\n\n      // Calculate total amount\n      const serviceValue = parseFloat(invoiceData.serviceValue);\n      const materialCosts = parseFloat(invoiceData.materialCosts || '0.00');\n      const totalAmount = (serviceValue + materialCosts).toFixed(2);\n\n      const invoice = await storage.createInvoice({\n        visitId: invoiceData.visitId,\n        clientId: well.clientId,\n        providerId: visit.providerId,\n        invoiceNumber: `FAT-${Date.now()}`,\n        description: invoiceData.description,\n        serviceValue: invoiceData.serviceValue,\n        materialCosts: invoiceData.materialCosts || '0.00',\n        totalAmount,\n        isFree: invoiceData.isFree || serviceValue === 0,\n        status: 'pending',\n        dueDate: new Date(invoiceData.dueDate),\n        paymentMethod: invoiceData.paymentMethod || null,\n        notes: invoiceData.notes || null,\n        paymentUrl: null,\n        paidDate: null\n      });\n\n      res.status(201).json({ invoice });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/invoices\", async (req, res) => {\n    try {\n      const invoices = await storage.getInvoicesWithDetails();\n      res.json({ invoices });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/clients/:clientId/invoices\", async (req, res) => {\n    try {\n      const invoices = await storage.getInvoicesByClientId(req.params.clientId);\n      res.json({ invoices });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/providers/:providerId/invoices\", async (req, res) => {\n    try {\n      const invoices = await storage.getInvoicesByProviderId(req.params.providerId);\n      res.json({ invoices });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/invoices/:id/send\", async (req, res) => {\n    try {\n      await storage.markInvoiceAsSent(req.params.id);\n      const invoice = await storage.getInvoice(req.params.id);\n      res.json({ invoice, message: \"Invoice sent successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/invoices/:id/paid\", async (req, res) => {\n    try {\n      const { paymentMethod } = req.body;\n      if (!paymentMethod) {\n        return res.status(400).json({ message: \"Payment method is required\" });\n      }\n      \n      await storage.markInvoiceAsPaid(req.params.id, paymentMethod);\n      const invoice = await storage.getInvoice(req.params.id);\n      res.json({ invoice, message: \"Invoice marked as paid\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/invoices/:id/status\", async (req, res) => {\n    try {\n      const { status } = req.body;\n      if (!status) {\n        return res.status(400).json({ message: \"Status is required\" });\n      }\n      \n      await storage.updateInvoiceStatus(req.params.id, status);\n      const invoice = await storage.getInvoice(req.params.id);\n      res.json({ invoice, message: \"Invoice status updated\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Material usage routes\n  app.get(\"/api/materials\", async (req, res) => {\n    try {\n      res.json({ materials: AVAILABLE_MATERIALS });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/water-parameters\", async (req, res) => {\n    try {\n      res.json({ \n        parameters: WATER_PARAMETERS,\n        statusOptions: WATER_STATUS_OPTIONS\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/visits/:visitId/materials\", async (req, res) => {\n    try {\n      const { visitId } = req.params;\n      const { materials } = req.body;\n\n      if (!materials || !Array.isArray(materials)) {\n        return res.status(400).json({ message: \"Materials array is required\" });\n      }\n\n      const createdMaterials = [];\n      for (const material of materials) {\n        if (material.selected && material.quantity > 0) {\n          const materialUsage = await storage.createMaterialUsage({\n            visitId,\n            materialType: material.type,\n            quantityGrams: material.quantity.toString(),\n            notes: material.notes || null\n          });\n          createdMaterials.push(materialUsage);\n        }\n      }\n\n      res.status(201).json({ materials: createdMaterials });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/visits/:visitId/materials\", async (req, res) => {\n    try {\n      const materials = await storage.getMaterialUsageByVisitId(req.params.visitId);\n      res.json({ materials });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/materials/consumption\", async (req, res) => {\n    try {\n      const { period } = req.query;\n      let startDate: Date;\n      let endDate = new Date();\n\n      if (period === 'week') {\n        startDate = new Date();\n        startDate.setDate(startDate.getDate() - 7);\n      } else if (period === 'month') {\n        startDate = new Date();\n        startDate.setMonth(startDate.getMonth() - 1);\n      } else {\n        return res.status(400).json({ message: \"Period must be 'week' or 'month'\" });\n      }\n\n      const consumption = await storage.getMaterialConsumptionByPeriod(startDate, endDate);\n      \n      // Convert to kg and format response\n      const formattedConsumption = consumption.map(item => ({\n        materialType: item.materialType,\n        totalGrams: item.totalGrams,\n        totalKilograms: Number((item.totalGrams / 1000).toFixed(3))\n      }));\n\n      res.json({ \n        period,\n        startDate: startDate.toISOString(),\n        endDate: endDate.toISOString(),\n        consumption: formattedConsumption \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":27240},"server/storage-simple.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Client, \n  type InsertClient, \n  type Well, \n  type InsertWell, \n  type Provider, \n  type InsertProvider, \n  type Visit, \n  type InsertVisit, \n  type Invoice, \n  type InsertInvoice, \n  type MaterialUsage,\n  type InsertMaterialUsage,\n  type WaterQualityParameter,\n  type InsertWaterQualityParameter,\n  type UserWithProfile, \n  type WellWithClient, \n  type VisitWithDetails, \n  type InvoiceWithDetails,\n  type VisitWithMaterials,\n  type ScheduledVisit,\n  type InsertScheduledVisit,\n  type ScheduledVisitWithDetails\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getUserWithProfile(id: string): Promise<UserWithProfile | undefined>;\n  deleteUser(id: string): Promise<void>;\n  updateUserPassword(id: string, password: string): Promise<void>;\n\n  // Client operations\n  getClient(id: string): Promise<Client | undefined>;\n  getClientByUserId(userId: string): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  getAllClients(): Promise<Array<Client & { user: User }>>;\n\n  // Well operations\n  getWell(id: string): Promise<Well | undefined>;\n  createWell(well: InsertWell): Promise<Well>;\n  getWellsByClientId(clientId: string): Promise<Well[]>;\n  getWellsWithClient(): Promise<WellWithClient[]>;\n  updateWellStatus(id: string, status: string): Promise<void>;\n\n  // Provider operations\n  getProvider(id: string): Promise<Provider | undefined>;\n  getProviderByUserId(userId: string): Promise<Provider | undefined>;\n  createProvider(provider: InsertProvider): Promise<Provider>;\n  getAllProviders(): Promise<Array<Provider & { user: User }>>;\n  deleteProvider(id: string): Promise<void>;\n\n  // Visit operations\n  getVisit(id: string): Promise<Visit | undefined>;\n  createVisit(visit: InsertVisit): Promise<Visit>;\n  getVisitsByWellId(wellId: string): Promise<Visit[]>;\n  getVisitsByProviderId(providerId: string): Promise<Visit[]>;\n  getVisitsWithDetails(): Promise<VisitWithDetails[]>;\n  getVisitsByClientId(clientId: string): Promise<VisitWithDetails[]>;\n  updateVisitStatus(id: string, status: string): Promise<void>;\n\n  // Invoice operations\n  getInvoice(id: string): Promise<Invoice | undefined>;\n  createInvoice(invoice: InsertInvoice): Promise<Invoice>;\n  getInvoicesByClientId(clientId: string): Promise<InvoiceWithDetails[]>;\n  getInvoicesByProviderId(providerId: string): Promise<InvoiceWithDetails[]>;\n  getInvoicesWithDetails(): Promise<InvoiceWithDetails[]>;\n  updateInvoiceStatus(id: string, status: string): Promise<void>;\n  markInvoiceAsSent(id: string): Promise<void>;\n  markInvoiceAsPaid(id: string, paymentMethod: string): Promise<void>;\n\n  // Material usage operations\n  getMaterialUsage(id: string): Promise<MaterialUsage | undefined>;\n  createMaterialUsage(materialUsage: InsertMaterialUsage): Promise<MaterialUsage>;\n  getMaterialUsageByVisitId(visitId: string): Promise<MaterialUsage[]>;\n  getVisitWithMaterials(visitId: string): Promise<VisitWithMaterials | undefined>;\n  getMaterialConsumptionByPeriod(startDate: Date, endDate: Date): Promise<{ materialType: string; totalGrams: number }[]>;\n\n  // Scheduled visit operations\n  getScheduledVisit(id: string): Promise<ScheduledVisit | undefined>;\n  createScheduledVisit(scheduledVisit: InsertScheduledVisit): Promise<ScheduledVisit>;\n  getScheduledVisitsByProviderId(providerId: string): Promise<ScheduledVisit[]>;\n  getScheduledVisitsByClientId(clientId: string): Promise<ScheduledVisitWithDetails[]>;\n  getScheduledVisitsWithDetails(): Promise<ScheduledVisitWithDetails[]>;\n  updateScheduledVisitStatus(id: string, status: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private clients: Map<string, Client> = new Map();\n  private wells: Map<string, Well> = new Map();\n  private providers: Map<string, Provider> = new Map();\n  private visits: Map<string, Visit> = new Map();\n  private invoices: Map<string, Invoice> = new Map();\n  private materialUsage: Map<string, MaterialUsage> = new Map();\n  private waterQualityParameters: Map<string, WaterQualityParameter> = new Map();\n  private scheduledVisits: Map<string, ScheduledVisit> = new Map();\n  \n  // Counters for generating sequential IDs\n  private visitCounter: number = 1;\n  private invoiceCounter: number = 1;\n\n  constructor() {\n    this.initializeSampleData();\n  }\n\n  private generateVisitId(): string {\n    const year = new Date().getFullYear();\n    const id = String(this.visitCounter).padStart(4, '0');\n    this.visitCounter++;\n    return `${year}/${id}`;\n  }\n\n  private generateInvoiceId(): string {\n    const year = new Date().getFullYear();\n    const id = String(this.invoiceCounter).padStart(4, '0');\n    this.invoiceCounter++;\n    return `${year}/${id}`;\n  }\n\n  private initializeSampleData() {\n    // Sample users\n    const clientUser: User = {\n      id: \"client-user-1\",\n      name: \"João Silva\",\n      email: \"joao@cliente.com\",\n      password: \"cliente123\",\n      userType: \"client\",\n      createdAt: \"2024-01-15T10:00:00Z\"\n    };\n\n    const providerUser: User = {\n      id: \"provider-user-1\", \n      name: \"Carlos Santos\",\n      email: \"carlos@tecnico.com\",\n      password: \"tecnico123\",\n      userType: \"provider\",\n      createdAt: \"2024-01-10T08:00:00Z\"\n    };\n\n    const adminUser: User = {\n      id: \"admin-user-1\",\n      name: \"Admin Sistema\",\n      email: \"admin@eccoserv.com\", \n      password: \"admin123\",\n      userType: \"admin\",\n      createdAt: \"2024-01-01T00:00:00Z\"\n    };\n\n    this.users.set(clientUser.id, clientUser);\n    this.users.set(providerUser.id, providerUser);\n    this.users.set(adminUser.id, adminUser);\n\n    // Sample client profile\n    const clientProfile: Client = {\n      id: \"client-profile-1\",\n      userId: \"client-user-1\",\n      cpf: \"123.456.789-00\",\n      address: \"Rua das Flores, 123, São Paulo - SP\",\n      phone: \"(11) 99999-9999\",\n      createdAt: new Date(\"2024-01-01T00:00:00Z\")\n    };\n    this.clients.set(clientProfile.id, clientProfile);\n\n    // Sample provider profile  \n    const providerProfile: Provider = {\n      id: \"provider-profile-1\",\n      userId: \"provider-user-1\",\n      specialties: [\"Manutenção preventiva\", \"Limpeza de poços\"],\n      phone: \"(11) 88888-8888\"\n    };\n    this.providers.set(providerProfile.id, providerProfile);\n\n    // Sample well\n    const well: Well = {\n      id: \"well-1\",\n      clientId: \"client-profile-1\",\n      name: \"Poço Principal\",\n      location: \"Quintal da residência\",\n      wellType: \"residential\",\n      depth: 50,\n      status: \"active\",\n      lastMaintenanceDate: \"2024-01-01T00:00:00Z\"\n    };\n    this.wells.set(well.id, well);\n\n    // Sample visit\n    const visit: Visit = {\n      id: \"2024/0001\",\n      wellId: \"well-1\",\n      providerId: \"provider-profile-1\",\n      visitDate: \"2024-01-20T14:00:00Z\",\n      serviceType: \"manutencao-preventiva\",\n      visitType: \"periodic\",\n      nextVisitDate: \"2024-04-20T14:00:00Z\",\n      observations: \"Manutenção preventiva realizada. Sistema funcionando perfeitamente.\",\n      status: \"completed\",\n      photos: [],\n      documents: [],\n      invoiceUrl: null,\n      createdAt: \"2024-01-20T14:00:00Z\"\n    };\n    this.visits.set(visit.id, visit);\n\n    // Sample invoice\n    const invoice: Invoice = {\n      id: \"2024/0001\",\n      clientId: \"client-profile-1\", \n      providerId: \"provider-profile-1\",\n      visitId: \"2024/0001\",\n      invoiceNumber: \"FAT-001-2024\",\n      description: \"Manutenção preventiva - Poço Principal\",\n      totalAmount: \"250.00\",\n      status: \"paid\",\n      issueDate: \"2024-01-20T00:00:00Z\",\n      dueDate: \"2024-02-20T00:00:00Z\",\n      paidDate: \"2024-01-25T00:00:00Z\",\n      paymentMethod: \"pix\"\n    };\n    this.invoices.set(invoice.id, invoice);\n\n    // Sample material usage data\n    const sampleMaterials = [\n      {\n        id: \"material-1\",\n        visitId: \"2024/0001\",\n        materialType: \"Hipoclorito de sódio\",\n        quantityGrams: \"500\",\n        notes: \"Aplicado para desinfecção\",\n        createdAt: \"2024-08-04T14:30:00Z\"\n      },\n      {\n        id: \"material-2\", \n        visitId: \"2024/0001\",\n        materialType: \"Sulfato de Alumínio\",\n        quantityGrams: \"300\",\n        notes: \"Usado para clarificação\",\n        createdAt: \"2024-08-04T14:30:00Z\"\n      },\n      {\n        id: \"material-3\",\n        visitId: \"2024/0001\", \n        materialType: \"Cal hidratada (hidróxido de cálcio)\",\n        quantityGrams: \"200\",\n        notes: \"Correção de pH\",\n        createdAt: \"2024-08-04T14:30:00Z\"\n      }\n    ];\n\n    sampleMaterials.forEach(material => {\n      this.materialUsage.set(material.id, material as MaterialUsage);\n    });\n\n    // Sample water quality parameters\n    const sampleWaterParams = [\n      {\n        id: \"water-1\",\n        visitId: \"2024/0001\",\n        parameter: \"Cloro (livre ou total)\",\n        value: \"0.5\",\n        unit: \"mg/L\",\n        status: \"good\",\n        notes: \"Dentro dos padrões\",\n        createdAt: \"2024-08-04T14:30:00Z\"\n      },\n      {\n        id: \"water-2\",\n        visitId: \"2024/0001\", \n        parameter: \"pH\",\n        value: \"7.2\",\n        unit: \"unidades pH\",\n        status: \"excellent\",\n        notes: \"Ideal para consumo\",\n        createdAt: \"2024-08-04T14:30:00Z\"\n      }\n    ];\n\n    sampleWaterParams.forEach(param => {\n      this.waterQualityParameters.set(param.id, param as WaterQualityParameter);\n    });\n\n    // Initialize counters based on existing data\n    this.visitCounter = Math.max(...Array.from(this.visits.keys()).map(id => {\n      const match = id.match(/\\/(\\d+)$/);\n      return match ? parseInt(match[1]) : 0;\n    }), 0) + 1;\n    \n    this.invoiceCounter = Math.max(...Array.from(this.invoices.keys()).map(id => {\n      const match = id.match(/\\/(\\d+)$/);\n      return match ? parseInt(match[1]) : 0;\n    }), 0) + 1;\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const user: User = {\n      ...userData,\n      id: userData.id || randomUUID(),\n      createdAt: userData.createdAt || new Date().toISOString()\n    };\n    this.users.set(user.id, user);\n    return user;\n  }\n\n  async getUserWithProfile(id: string): Promise<UserWithProfile | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n\n    const result: UserWithProfile = { ...user };\n    \n    if (user.userType === 'client') {\n      const client = Array.from(this.clients.values()).find(c => c.userId === id);\n      if (client) {\n        result.client = client;\n      }\n    } else if (user.userType === 'provider') {\n      const provider = Array.from(this.providers.values()).find(p => p.userId === id);\n      if (provider) {\n        result.provider = provider;\n      }\n    }\n\n    return result;\n  }\n\n  // Client operations\n  async getClient(id: string): Promise<Client | undefined> {\n    return this.clients.get(id);\n  }\n\n  async getClientByUserId(userId: string): Promise<Client | undefined> {\n    return Array.from(this.clients.values()).find(client => client.userId === userId);\n  }\n\n  async createClient(clientData: InsertClient): Promise<Client> {\n    const client: Client = {\n      ...clientData,\n      id: clientData.id || randomUUID()\n    };\n    this.clients.set(client.id, client);\n    return client;\n  }\n\n  async getAllClients(): Promise<Array<Client & { user: User }>> {\n    return Array.from(this.clients.values()).map(client => ({\n      ...client,\n      user: this.users.get(client.userId)!\n    })).filter(item => item.user);\n  }\n\n  // Well operations\n  async getWell(id: string): Promise<Well | undefined> {\n    return this.wells.get(id);\n  }\n\n  async createWell(wellData: InsertWell): Promise<Well> {\n    const well: Well = {\n      ...wellData,\n      id: wellData.id || randomUUID()\n    };\n    this.wells.set(well.id, well);\n    return well;\n  }\n\n  async getWellsByClientId(clientId: string): Promise<Well[]> {\n    return Array.from(this.wells.values()).filter(well => well.clientId === clientId);\n  }\n\n  async getWellsWithClient(): Promise<WellWithClient[]> {\n    return Array.from(this.wells.values()).map(well => {\n      const client = this.clients.get(well.clientId);\n      const user = client ? this.users.get(client.userId) : undefined;\n      return {\n        ...well,\n        client: client && user ? { ...client, user } : null\n      };\n    }).filter(item => item.client) as WellWithClient[];\n  }\n\n  async updateWellStatus(id: string, status: string): Promise<void> {\n    const well = this.wells.get(id);\n    if (well) {\n      this.wells.set(id, { ...well, status });\n    }\n  }\n\n  // Provider operations\n  async getProvider(id: string): Promise<Provider | undefined> {\n    return this.providers.get(id);\n  }\n\n  async getProviderByUserId(userId: string): Promise<Provider | undefined> {\n    return Array.from(this.providers.values()).find(provider => provider.userId === userId);\n  }\n\n  async createProvider(providerData: InsertProvider): Promise<Provider> {\n    const provider: Provider = {\n      ...providerData,\n      id: providerData.id || randomUUID()\n    };\n    this.providers.set(provider.id, provider);\n    return provider;\n  }\n\n  async getAllProviders(): Promise<Array<Provider & { user: User }>> {\n    return Array.from(this.providers.values()).map(provider => ({\n      ...provider,\n      user: this.users.get(provider.userId)!\n    })).filter(item => item.user);\n  }\n\n  async deleteProvider(id: string): Promise<void> {\n    this.providers.delete(id);\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    this.users.delete(id);\n  }\n\n  async updateUserPassword(id: string, password: string): Promise<void> {\n    const user = this.users.get(id);\n    if (user) {\n      this.users.set(id, { ...user, password });\n    }\n  }\n\n  // Visit operations  \n  async getVisit(id: string): Promise<Visit | undefined> {\n    return this.visits.get(id);\n  }\n\n  async createVisit(visitData: InsertVisit): Promise<Visit> {\n    const visit: Visit = {\n      ...visitData,\n      id: visitData.id || this.generateVisitId()\n    };\n    this.visits.set(visit.id, visit);\n    return visit;\n  }\n\n  async getVisitsByWellId(wellId: string): Promise<Visit[]> {\n    return Array.from(this.visits.values()).filter(visit => visit.wellId === wellId);\n  }\n\n  async getVisitsByProviderId(providerId: string): Promise<Visit[]> {\n    return Array.from(this.visits.values()).filter(visit => visit.providerId === providerId);\n  }\n\n  async getVisitsWithDetails(): Promise<VisitWithDetails[]> {\n    return Array.from(this.visits.values()).map(visit => {\n      const well = this.wells.get(visit.wellId);\n      const provider = this.providers.get(visit.providerId);\n      \n      let wellWithClient = null;\n      if (well) {\n        const client = this.clients.get(well.clientId);\n        const clientUser = client ? this.users.get(client.userId) : undefined;\n        if (client && clientUser) {\n          wellWithClient = { ...well, client: { ...client, user: clientUser } };\n        }\n      }\n\n      let providerWithUser = null;\n      if (provider) {\n        const providerUser = this.users.get(provider.userId);\n        if (providerUser) {\n          providerWithUser = { ...provider, user: providerUser };\n        }\n      }\n\n      return {\n        ...visit,\n        well: wellWithClient,\n        provider: providerWithUser\n      };\n    }).filter(item => item.well && item.provider) as VisitWithDetails[];\n  }\n\n  async getVisitsByClientId(clientId: string): Promise<VisitWithDetails[]> {\n    const clientWells = Array.from(this.wells.values()).filter(well => well.clientId === clientId);\n    const wellIds = clientWells.map(well => well.id);\n    \n    return Array.from(this.visits.values())\n      .filter(visit => wellIds.includes(visit.wellId))\n      .map(visit => {\n        const well = this.wells.get(visit.wellId);\n        const provider = this.providers.get(visit.providerId);\n        \n        let wellWithClient = null;\n        if (well) {\n          const client = this.clients.get(well.clientId);\n          const clientUser = client ? this.users.get(client.userId) : undefined;\n          if (client && clientUser) {\n            wellWithClient = { ...well, client: { ...client, user: clientUser } };\n          }\n        }\n\n        let providerWithUser = null;\n        if (provider) {\n          const providerUser = this.users.get(provider.userId);\n          if (providerUser) {\n            providerWithUser = { ...provider, user: providerUser };\n          }\n        }\n\n        return {\n          ...visit,\n          well: wellWithClient,\n          provider: providerWithUser\n        };\n      }).filter(item => item.well && item.provider) as VisitWithDetails[];\n  }\n\n  async updateVisitStatus(id: string, status: string): Promise<void> {\n    const visit = this.visits.get(id);\n    if (visit) {\n      this.visits.set(id, { ...visit, status });\n    }\n  }\n\n  // Invoice operations\n  async getInvoice(id: string): Promise<Invoice | undefined> {\n    return this.invoices.get(id);\n  }\n\n  async createInvoice(invoiceData: InsertInvoice): Promise<Invoice> {\n    const invoice: Invoice = {\n      ...invoiceData,\n      id: invoiceData.id || this.generateInvoiceId()\n    };\n    this.invoices.set(invoice.id, invoice);\n    return invoice;\n  }\n\n  async getInvoicesByClientId(clientId: string): Promise<InvoiceWithDetails[]> {\n    return Array.from(this.invoices.values())\n      .filter(invoice => invoice.clientId === clientId)\n      .map(invoice => this.buildInvoiceWithDetails(invoice))\n      .filter(item => item) as InvoiceWithDetails[];\n  }\n\n  async getInvoicesByProviderId(providerId: string): Promise<InvoiceWithDetails[]> {\n    return Array.from(this.invoices.values())\n      .filter(invoice => invoice.providerId === providerId)\n      .map(invoice => this.buildInvoiceWithDetails(invoice))\n      .filter(item => item) as InvoiceWithDetails[];\n  }\n\n  async getInvoicesWithDetails(): Promise<InvoiceWithDetails[]> {\n    return Array.from(this.invoices.values())\n      .map(invoice => this.buildInvoiceWithDetails(invoice))\n      .filter(item => item) as InvoiceWithDetails[];\n  }\n\n  private buildInvoiceWithDetails(invoice: Invoice): InvoiceWithDetails | null {\n    const client = this.clients.get(invoice.clientId);\n    const provider = this.providers.get(invoice.providerId);\n    const visit = invoice.visitId ? this.visits.get(invoice.visitId) : null;\n    \n    const clientUser = client ? this.users.get(client.userId) : undefined;\n    const providerUser = provider ? this.users.get(provider.userId) : undefined;\n    \n    if (!client || !provider || !clientUser || !providerUser) {\n      return null;\n    }\n\n    let visitWithWell = null;\n    if (visit) {\n      const well = this.wells.get(visit.wellId);\n      if (well) {\n        visitWithWell = { ...visit, well };\n      }\n    }\n\n    return {\n      ...invoice,\n      client: { ...client, user: clientUser },\n      provider: { ...provider, user: providerUser },\n      visit: visitWithWell\n    };\n  }\n\n  async updateInvoiceStatus(id: string, status: string): Promise<void> {\n    const invoice = this.invoices.get(id);\n    if (invoice) {\n      this.invoices.set(id, { ...invoice, status });\n    }\n  }\n\n  async markInvoiceAsSent(id: string): Promise<void> {\n    const invoice = this.invoices.get(id);\n    if (invoice) {\n      this.invoices.set(id, { ...invoice, status: 'sent' });\n    }\n  }\n\n  async markInvoiceAsPaid(id: string, paymentMethod: string): Promise<void> {\n    const invoice = this.invoices.get(id);\n    if (invoice) {\n      this.invoices.set(id, { \n        ...invoice, \n        status: 'paid', \n        paidDate: new Date().toISOString(),\n        paymentMethod \n      });\n    }\n  }\n\n  // Material usage operations\n  async getMaterialUsage(id: string): Promise<MaterialUsage | undefined> {\n    return this.materialUsage.get(id);\n  }\n\n  async createMaterialUsage(materialUsage: InsertMaterialUsage): Promise<MaterialUsage> {\n    const id = randomUUID();\n    const newMaterialUsage: MaterialUsage = {\n      ...materialUsage,\n      id,\n      createdAt: new Date().toISOString(),\n    };\n    this.materialUsage.set(id, newMaterialUsage);\n    return newMaterialUsage;\n  }\n\n  async getMaterialUsageByVisitId(visitId: string): Promise<MaterialUsage[]> {\n    return Array.from(this.materialUsage.values())\n      .filter(material => material.visitId === visitId);\n  }\n\n  async getVisitWithMaterials(visitId: string): Promise<VisitWithMaterials | undefined> {\n    const visit = this.visits.get(visitId);\n    if (!visit) return undefined;\n\n    const well = this.wells.get(visit.wellId);\n    if (!well) return undefined;\n\n    const client = this.clients.get(well.clientId);\n    const provider = this.providers.get(visit.providerId);\n    \n    const clientUser = client ? this.users.get(client.userId) : undefined;\n    const providerUser = provider ? this.users.get(provider.userId) : undefined;\n    \n    if (!client || !provider || !clientUser || !providerUser) {\n      return undefined;\n    }\n\n    const materials = await this.getMaterialUsageByVisitId(visitId);\n    const waterParameters = await this.getWaterQualityParametersByVisitId(visitId);\n\n    return {\n      ...visit,\n      well: { ...well, client: { ...client, user: clientUser } },\n      provider: { ...provider, user: providerUser },\n      materials,\n      waterParameters\n    };\n  }\n\n  async getMaterialConsumptionByPeriod(startDate: Date, endDate: Date): Promise<{ materialType: string; totalGrams: number }[]> {\n    const consumption = new Map<string, number>();\n    \n    for (const material of this.materialUsage.values()) {\n      const materialDate = new Date(material.createdAt);\n      if (materialDate >= startDate && materialDate <= endDate) {\n        const current = consumption.get(material.materialType) || 0;\n        consumption.set(material.materialType, current + Number(material.quantityGrams));\n      }\n    }\n    \n    return Array.from(consumption.entries()).map(([materialType, totalGrams]) => ({\n      materialType,\n      totalGrams\n    }));\n  }\n\n  // Water quality parameter operations\n  async createWaterQualityParameter(parameterData: InsertWaterQualityParameter): Promise<WaterQualityParameter> {\n    const parameter: WaterQualityParameter = {\n      ...parameterData,\n      id: randomUUID(),\n      createdAt: new Date().toISOString()\n    };\n    this.waterQualityParameters.set(parameter.id, parameter);\n    return parameter;\n  }\n\n  async getWaterQualityParametersByVisitId(visitId: string): Promise<WaterQualityParameter[]> {\n    return Array.from(this.waterQualityParameters.values()).filter(p => p.visitId === visitId);\n  }\n\n  // Scheduled visit operations\n  async getScheduledVisit(id: string): Promise<ScheduledVisit | undefined> {\n    return this.scheduledVisits.get(id);\n  }\n\n  async createScheduledVisit(scheduledVisitData: InsertScheduledVisit): Promise<ScheduledVisit> {\n    const scheduledVisit: ScheduledVisit = {\n      ...scheduledVisitData,\n      id: scheduledVisitData.id || randomUUID(),\n      createdAt: new Date().toISOString()\n    };\n    this.scheduledVisits.set(scheduledVisit.id, scheduledVisit);\n    return scheduledVisit;\n  }\n\n  async getScheduledVisitsByProviderId(providerId: string): Promise<ScheduledVisit[]> {\n    return Array.from(this.scheduledVisits.values()).filter(visit => visit.providerId === providerId);\n  }\n\n  async getScheduledVisitsByClientId(clientId: string): Promise<ScheduledVisitWithDetails[]> {\n    const clientWells = Array.from(this.wells.values()).filter(well => well.clientId === clientId);\n    const wellIds = clientWells.map(well => well.id);\n    \n    return Array.from(this.scheduledVisits.values())\n      .filter(visit => wellIds.includes(visit.wellId))\n      .map(visit => {\n        const well = this.wells.get(visit.wellId);\n        const provider = this.providers.get(visit.providerId);\n        \n        let wellWithClient = null;\n        if (well) {\n          const client = this.clients.get(well.clientId);\n          const clientUser = client ? this.users.get(client.userId) : undefined;\n          if (client && clientUser) {\n            wellWithClient = { ...well, client: { ...client, user: clientUser } };\n          }\n        }\n\n        let providerWithUser = null;\n        if (provider) {\n          const providerUser = this.users.get(provider.userId);\n          if (providerUser) {\n            providerWithUser = { ...provider, user: providerUser };\n          }\n        }\n\n        return {\n          ...visit,\n          well: wellWithClient,\n          provider: providerWithUser\n        };\n      }).filter(item => item.well && item.provider) as ScheduledVisitWithDetails[];\n  }\n\n  async getScheduledVisitsWithDetails(): Promise<ScheduledVisitWithDetails[]> {\n    return Array.from(this.scheduledVisits.values()).map(visit => {\n      const well = this.wells.get(visit.wellId);\n      const provider = this.providers.get(visit.providerId);\n      \n      let wellWithClient = null;\n      if (well) {\n        const client = this.clients.get(well.clientId);\n        const clientUser = client ? this.users.get(client.userId) : undefined;\n        if (client && clientUser) {\n          wellWithClient = { ...well, client: { ...client, user: clientUser } };\n        }\n      }\n\n      let providerWithUser = null;\n      if (provider) {\n        const providerUser = this.users.get(provider.userId);\n        if (providerUser) {\n          providerWithUser = { ...provider, user: providerUser };\n        }\n      }\n\n      return {\n        ...visit,\n        well: wellWithClient,\n        provider: providerWithUser\n      };\n    }).filter(item => item.well && item.provider) as ScheduledVisitWithDetails[];\n  }\n\n  async updateScheduledVisitStatus(id: string, status: string): Promise<void> {\n    const visit = this.scheduledVisits.get(id);\n    if (visit) {\n      this.scheduledVisits.set(id, { ...visit, status });\n    }\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":26192},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Client, \n  type InsertClient, \n  type Well, \n  type InsertWell, \n  type Provider, \n  type InsertProvider, \n  type Visit, \n  type InsertVisit, \n  type Invoice, \n  type InsertInvoice, \n  type UserWithProfile, \n  type WellWithClient, \n  type VisitWithDetails, \n  type InvoiceWithDetails,\n  users,\n  clients,\n  wells,\n  providers,\n  visits,\n  invoices\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getUserWithProfile(id: string): Promise<UserWithProfile | undefined>;\n\n  // Client operations\n  getClient(id: string): Promise<Client | undefined>;\n  getClientByUserId(userId: string): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  getAllClients(): Promise<Array<Client & { user: User }>>;\n\n  // Well operations\n  getWell(id: string): Promise<Well | undefined>;\n  createWell(well: InsertWell): Promise<Well>;\n  getWellsByClientId(clientId: string): Promise<Well[]>;\n  getWellsWithClient(): Promise<WellWithClient[]>;\n  updateWellStatus(id: string, status: string): Promise<void>;\n\n  // Provider operations\n  getProvider(id: string): Promise<Provider | undefined>;\n  getProviderByUserId(userId: string): Promise<Provider | undefined>;\n  createProvider(provider: InsertProvider): Promise<Provider>;\n  getAllProviders(): Promise<Array<Provider & { user: User }>>;\n\n  // Visit operations\n  getVisit(id: string): Promise<Visit | undefined>;\n  createVisit(visit: InsertVisit): Promise<Visit>;\n  getVisitsByWellId(wellId: string): Promise<Visit[]>;\n  getVisitsByProviderId(providerId: string): Promise<Visit[]>;\n  getVisitsWithDetails(): Promise<VisitWithDetails[]>;\n  getVisitsByClientId(clientId: string): Promise<VisitWithDetails[]>;\n  updateVisitStatus(id: string, status: string): Promise<void>;\n\n  // Invoice operations\n  getInvoice(id: string): Promise<Invoice | undefined>;\n  createInvoice(invoice: InsertInvoice): Promise<Invoice>;\n  getInvoicesByClientId(clientId: string): Promise<InvoiceWithDetails[]>;\n  getInvoicesByProviderId(providerId: string): Promise<InvoiceWithDetails[]>;\n  getInvoicesWithDetails(): Promise<InvoiceWithDetails[]>;\n  updateInvoiceStatus(id: string, status: string): Promise<void>;\n  markInvoiceAsSent(id: string): Promise<void>;\n  markInvoiceAsPaid(id: string, paymentMethod: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async getUserWithProfile(id: string): Promise<UserWithProfile | undefined> {\n    const user = await this.getUser(id);\n    if (!user) return undefined;\n\n    let profile = null;\n    if (user.userType === 'client') {\n      profile = await this.getClientByUserId(id);\n    } else if (user.userType === 'provider') {\n      profile = await this.getProviderByUserId(id);\n    }\n\n    return { ...user, profile } as UserWithProfile;\n  }\n\n  // Client operations\n  async getClient(id: string): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(eq(clients.id, id));\n    return client;\n  }\n\n  async getClientByUserId(userId: string): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(eq(clients.userId, userId));\n    return client;\n  }\n\n  async createClient(clientData: InsertClient): Promise<Client> {\n    const [client] = await db.insert(clients).values(clientData).returning();\n    return client;\n  }\n\n  async getAllClients(): Promise<Array<Client & { user: User }>> {\n    const result = await db.select({\n      id: clients.id,\n      userId: clients.userId,\n      address: clients.address,\n      phone: clients.phone,\n      user: {\n        id: users.id,\n        name: users.name,\n        email: users.email,\n        userType: users.userType,\n        createdAt: users.createdAt\n      }\n    })\n    .from(clients)\n    .leftJoin(users, eq(clients.userId, users.id));\n\n    return result.map(row => ({\n      ...row,\n      user: row.user!\n    })) as Array<Client & { user: User }>;\n  }\n\n  // Well operations\n  async getWell(id: string): Promise<Well | undefined> {\n    const [well] = await db.select().from(wells).where(eq(wells.id, id));\n    return well;\n  }\n\n  async createWell(wellData: InsertWell): Promise<Well> {\n    const [well] = await db.insert(wells).values(wellData).returning();\n    return well;\n  }\n\n  async getWellsByClientId(clientId: string): Promise<Well[]> {\n    return await db.select().from(wells).where(eq(wells.clientId, clientId));\n  }\n\n  async getWellsWithClient(): Promise<WellWithClient[]> {\n    const result = await db.select({\n      id: wells.id,\n      clientId: wells.clientId,\n      name: wells.name,\n      location: wells.location,\n      wellType: wells.wellType,\n      depth: wells.depth,\n      status: wells.status,\n      lastMaintenanceDate: wells.lastMaintenanceDate,\n      client: {\n        id: clients.id,\n        userId: clients.userId,\n        address: clients.address,\n        phone: clients.phone,\n        user: {\n          id: users.id,\n          name: users.name,\n          email: users.email,\n          userType: users.userType,\n          createdAt: users.createdAt\n        }\n      }\n    })\n    .from(wells)\n    .leftJoin(clients, eq(wells.clientId, clients.id))\n    .leftJoin(users, eq(clients.userId, users.id));\n\n    return result.map(row => ({\n      ...row,\n      client: {\n        ...row.client!,\n        user: row.client!.user!\n      }\n    })) as WellWithClient[];\n  }\n\n  async updateWellStatus(id: string, status: string): Promise<void> {\n    await db.update(wells).set({ status }).where(eq(wells.id, id));\n  }\n\n  // Provider operations\n  async getProvider(id: string): Promise<Provider | undefined> {\n    const [provider] = await db.select().from(providers).where(eq(providers.id, id));\n    return provider;\n  }\n\n  async getProviderByUserId(userId: string): Promise<Provider | undefined> {\n    const [provider] = await db.select().from(providers).where(eq(providers.userId, userId));\n    return provider;\n  }\n\n  async createProvider(providerData: InsertProvider): Promise<Provider> {\n    const [provider] = await db.insert(providers).values(providerData).returning();\n    return provider;\n  }\n\n  async getAllProviders(): Promise<Array<Provider & { user: User }>> {\n    const result = await db.select({\n      id: providers.id,\n      userId: providers.userId,\n      specialties: providers.specialties,\n      phone: providers.phone,\n      user: {\n        id: users.id,\n        name: users.name,\n        email: users.email,\n        userType: users.userType,\n        createdAt: users.createdAt\n      }\n    })\n    .from(providers)\n    .leftJoin(users, eq(providers.userId, users.id));\n\n    return result.map(row => ({\n      ...row,\n      user: row.user!\n    })) as Array<Provider & { user: User }>;\n  }\n\n  // Visit operations\n  async getVisit(id: string): Promise<Visit | undefined> {\n    const [visit] = await db.select().from(visits).where(eq(visits.id, id));\n    return visit;\n  }\n\n  async createVisit(visitData: InsertVisit): Promise<Visit> {\n    const [visit] = await db.insert(visits).values(visitData).returning();\n    return visit;\n  }\n\n  async getVisitsByWellId(wellId: string): Promise<Visit[]> {\n    return await db.select().from(visits).where(eq(visits.wellId, wellId)).orderBy(desc(visits.visitDate));\n  }\n\n  async getVisitsByProviderId(providerId: string): Promise<Visit[]> {\n    return await db.select().from(visits).where(eq(visits.providerId, providerId)).orderBy(desc(visits.visitDate));\n  }\n\n  async getVisitsWithDetails(): Promise<VisitWithDetails[]> {\n    const result = await db.select({\n      id: visits.id,\n      wellId: visits.wellId,\n      providerId: visits.providerId,\n      visitDate: visits.visitDate,\n      observations: visits.observations,\n      status: visits.status,\n      photoUrl: visits.photoUrl,\n      well: {\n        id: wells.id,\n        clientId: wells.clientId,\n        name: wells.name,\n        location: wells.location,\n        wellType: wells.wellType,\n        depth: wells.depth,\n        status: wells.status,\n        lastMaintenanceDate: wells.lastMaintenanceDate,\n        client: {\n          id: clients.id,\n          userId: clients.userId,\n          address: clients.address,\n          phone: clients.phone,\n          user: {\n            id: users.id,\n            name: users.name,\n            email: users.email,\n            userType: users.userType,\n            createdAt: users.createdAt\n          }\n        }\n      },\n      provider: {\n        id: providers.id,\n        userId: providers.userId,\n        specialties: providers.specialties,\n        phone: providers.phone,\n        user: {\n          id: users.id,\n          name: users.name,\n          email: users.email,\n          userType: users.userType,\n          createdAt: users.createdAt\n        }\n      }\n    })\n    .from(visits)\n    .leftJoin(wells, eq(visits.wellId, wells.id))\n    .leftJoin(clients, eq(wells.clientId, clients.id))\n    .leftJoin(users, eq(clients.userId, users.id))\n    .leftJoin(providers, eq(visits.providerId, providers.id))\n    .leftJoin(users, eq(providers.userId, users.id))\n    .orderBy(desc(visits.visitDate));\n\n    return result as VisitWithDetails[];\n  }\n\n  async getVisitsByClientId(clientId: string): Promise<VisitWithDetails[]> {\n    const result = await db.select({\n      id: visits.id,\n      wellId: visits.wellId,\n      providerId: visits.providerId,\n      visitDate: visits.visitDate,\n      observations: visits.observations,\n      status: visits.status,\n      photoUrl: visits.photoUrl,\n      well: {\n        id: wells.id,\n        clientId: wells.clientId,\n        name: wells.name,\n        location: wells.location,\n        wellType: wells.wellType,\n        depth: wells.depth,\n        status: wells.status,\n        lastMaintenanceDate: wells.lastMaintenanceDate,\n        client: {\n          id: clients.id,\n          userId: clients.userId,\n          address: clients.address,\n          phone: clients.phone,\n          user: {\n            id: users.id,\n            name: users.name,\n            email: users.email,\n            userType: users.userType,\n            createdAt: users.createdAt\n          }\n        }\n      },\n      provider: {\n        id: providers.id,\n        userId: providers.userId,\n        specialties: providers.specialties,\n        phone: providers.phone,\n        user: {\n          id: users.id,\n          name: users.name,\n          email: users.email,\n          userType: users.userType,\n          createdAt: users.createdAt\n        }\n      }\n    })\n    .from(visits)\n    .leftJoin(wells, eq(visits.wellId, wells.id))\n    .leftJoin(clients, eq(wells.clientId, clients.id))\n    .leftJoin(users, eq(clients.userId, users.id))\n    .leftJoin(providers, eq(visits.providerId, providers.id))\n    .leftJoin(users, eq(providers.userId, users.id))\n    .where(eq(wells.clientId, clientId))\n    .orderBy(desc(visits.visitDate));\n\n    return result as VisitWithDetails[];\n  }\n\n  async updateVisitStatus(id: string, status: string): Promise<void> {\n    await db.update(visits).set({ status }).where(eq(visits.id, id));\n  }\n\n  // Invoice operations\n  async getInvoice(id: string): Promise<Invoice | undefined> {\n    const [invoice] = await db.select().from(invoices).where(eq(invoices.id, id));\n    return invoice;\n  }\n\n  async createInvoice(invoiceData: InsertInvoice): Promise<Invoice> {\n    const [invoice] = await db.insert(invoices).values(invoiceData).returning();\n    return invoice;\n  }\n\n  async getInvoicesByClientId(clientId: string): Promise<InvoiceWithDetails[]> {\n    const result = await db.select({\n      id: invoices.id,\n      clientId: invoices.clientId,\n      providerId: invoices.providerId,\n      visitId: invoices.visitId,\n      invoiceNumber: invoices.invoiceNumber,\n      description: invoices.description,\n      totalAmount: invoices.totalAmount,\n      status: invoices.status,\n      issueDate: invoices.issueDate,\n      dueDate: invoices.dueDate,\n      paidDate: invoices.paidDate,\n      paymentMethod: invoices.paymentMethod,\n      client: {\n        id: clients.id,\n        userId: clients.userId,\n        address: clients.address,\n        phone: clients.phone,\n        user: {\n          id: users.id,\n          name: users.name,\n          email: users.email,\n          userType: users.userType,\n          createdAt: users.createdAt\n        }\n      },\n      provider: {\n        id: providers.id,\n        userId: providers.userId,\n        specialties: providers.specialties,\n        phone: providers.phone,\n        user: {\n          id: users.id,\n          name: users.name,\n          email: users.email,\n          userType: users.userType,\n          createdAt: users.createdAt\n        }\n      },\n      visit: {\n        id: visits.id,\n        wellId: visits.wellId,\n        providerId: visits.providerId,\n        visitDate: visits.visitDate,\n        observations: visits.observations,\n        status: visits.status,\n        photoUrl: visits.photoUrl,\n        well: {\n          id: wells.id,\n          clientId: wells.clientId,\n          name: wells.name,\n          location: wells.location,\n          wellType: wells.wellType,\n          depth: wells.depth,\n          status: wells.status,\n          lastMaintenanceDate: wells.lastMaintenanceDate\n        }\n      }\n    })\n    .from(invoices)\n    .leftJoin(clients, eq(invoices.clientId, clients.id))\n    .leftJoin(users, eq(clients.userId, users.id))\n    .leftJoin(providers, eq(invoices.providerId, providers.id))\n    .leftJoin(users, eq(providers.userId, users.id))\n    .leftJoin(visits, eq(invoices.visitId, visits.id))\n    .leftJoin(wells, eq(visits.wellId, wells.id))\n    .where(eq(invoices.clientId, clientId))\n    .orderBy(desc(invoices.issueDate));\n\n    return result as InvoiceWithDetails[];\n  }\n\n  async getInvoicesByProviderId(providerId: string): Promise<InvoiceWithDetails[]> {\n    const result = await db.select({\n      id: invoices.id,\n      clientId: invoices.clientId,\n      providerId: invoices.providerId,\n      visitId: invoices.visitId,\n      invoiceNumber: invoices.invoiceNumber,\n      description: invoices.description,\n      totalAmount: invoices.totalAmount,\n      status: invoices.status,\n      issueDate: invoices.issueDate,\n      dueDate: invoices.dueDate,\n      paidDate: invoices.paidDate,\n      paymentMethod: invoices.paymentMethod,\n      client: {\n        id: clients.id,\n        userId: clients.userId,\n        address: clients.address,\n        phone: clients.phone,\n        user: {\n          id: users.id,\n          name: users.name,\n          email: users.email,\n          userType: users.userType,\n          createdAt: users.createdAt\n        }\n      },\n      provider: {\n        id: providers.id,\n        userId: providers.userId,\n        specialties: providers.specialties,\n        phone: providers.phone,\n        user: {\n          id: users.id,\n          name: users.name,\n          email: users.email,\n          userType: users.userType,\n          createdAt: users.createdAt\n        }\n      },\n      visit: {\n        id: visits.id,\n        wellId: visits.wellId,\n        providerId: visits.providerId,\n        visitDate: visits.visitDate,\n        observations: visits.observations,\n        status: visits.status,\n        photoUrl: visits.photoUrl,\n        well: {\n          id: wells.id,\n          clientId: wells.clientId,\n          name: wells.name,\n          location: wells.location,\n          wellType: wells.wellType,\n          depth: wells.depth,\n          status: wells.status,\n          lastMaintenanceDate: wells.lastMaintenanceDate\n        }\n      }\n    })\n    .from(invoices)\n    .leftJoin(clients, eq(invoices.clientId, clients.id))\n    .leftJoin(users, eq(clients.userId, users.id))\n    .leftJoin(providers, eq(invoices.providerId, providers.id))\n    .leftJoin(users, eq(providers.userId, users.id))\n    .leftJoin(visits, eq(invoices.visitId, visits.id))\n    .leftJoin(wells, eq(visits.wellId, wells.id))\n    .where(eq(invoices.providerId, providerId))\n    .orderBy(desc(invoices.issueDate));\n\n    return result as InvoiceWithDetails[];\n  }\n\n  async getInvoicesWithDetails(): Promise<InvoiceWithDetails[]> {\n    const result = await db.select({\n      id: invoices.id,\n      clientId: invoices.clientId,\n      providerId: invoices.providerId,\n      visitId: invoices.visitId,\n      invoiceNumber: invoices.invoiceNumber,\n      description: invoices.description,\n      totalAmount: invoices.totalAmount,\n      status: invoices.status,\n      issueDate: invoices.issueDate,\n      dueDate: invoices.dueDate,\n      paidDate: invoices.paidDate,\n      paymentMethod: invoices.paymentMethod,\n      client: {\n        id: clients.id,\n        userId: clients.userId,\n        address: clients.address,\n        phone: clients.phone,\n        user: {\n          id: users.id,\n          name: users.name,\n          email: users.email,\n          userType: users.userType,\n          createdAt: users.createdAt\n        }\n      },\n      provider: {\n        id: providers.id,\n        userId: providers.userId,\n        specialties: providers.specialties,\n        phone: providers.phone,\n        user: {\n          id: users.id,\n          name: users.name,\n          email: users.email,\n          userType: users.userType,\n          createdAt: users.createdAt\n        }\n      },\n      visit: {\n        id: visits.id,\n        wellId: visits.wellId,\n        providerId: visits.providerId,\n        visitDate: visits.visitDate,\n        observations: visits.observations,\n        status: visits.status,\n        photoUrl: visits.photoUrl,\n        well: {\n          id: wells.id,\n          clientId: wells.clientId,\n          name: wells.name,\n          location: wells.location,\n          wellType: wells.wellType,\n          depth: wells.depth,\n          status: wells.status,\n          lastMaintenanceDate: wells.lastMaintenanceDate\n        }\n      }\n    })\n    .from(invoices)\n    .leftJoin(clients, eq(invoices.clientId, clients.id))\n    .leftJoin(users, eq(clients.userId, users.id))\n    .leftJoin(providers, eq(invoices.providerId, providers.id))\n    .leftJoin(users, eq(providers.userId, users.id))\n    .leftJoin(visits, eq(invoices.visitId, visits.id))\n    .leftJoin(wells, eq(visits.wellId, wells.id))\n    .orderBy(desc(invoices.issueDate));\n\n    return result as InvoiceWithDetails[];\n  }\n\n  async updateInvoiceStatus(id: string, status: string): Promise<void> {\n    await db.update(invoices).set({ status }).where(eq(invoices.id, id));\n  }\n\n  async markInvoiceAsSent(id: string): Promise<void> {\n    await db.update(invoices).set({ status: 'sent' }).where(eq(invoices.id, id));\n  }\n\n  async markInvoiceAsPaid(id: string, paymentMethod: string): Promise<void> {\n    await db.update(invoices).set({ \n      status: 'paid', \n      paidDate: new Date().toISOString(),\n      paymentMethod \n    }).where(eq(invoices.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":19469},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  userType: text(\"user_type\").notNull(), // 'client', 'provider', 'admin'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  cpf: text(\"cpf\"),\n  address: text(\"address\"),\n  phone: text(\"phone\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const wells = pgTable(\"wells\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").references(() => clients.id).notNull(),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // 'artesiano', 'semi-artesiano', 'freatico', 'tubular'\n  location: text(\"location\"),\n  depth: decimal(\"depth\", { precision: 10, scale: 2 }),\n  diameter: decimal(\"diameter\", { precision: 10, scale: 2 }),\n  installationDate: timestamp(\"installation_date\"),\n  description: text(\"description\"),\n  status: text(\"status\").notNull().default('active'), // 'active', 'maintenance', 'attention', 'inactive'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const providers = pgTable(\"providers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  specialties: text(\"specialties\").array(),\n  phone: text(\"phone\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const visits = pgTable(\"visits\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  wellId: varchar(\"well_id\").references(() => wells.id).notNull(),\n  providerId: varchar(\"provider_id\").references(() => providers.id).notNull(),\n  visitDate: timestamp(\"visit_date\").notNull(),\n  serviceType: text(\"service_type\").notNull(),\n  visitType: text(\"visit_type\").notNull(), // 'unique' ou 'periodic'\n  nextVisitDate: timestamp(\"next_visit_date\"),\n  observations: text(\"observations\").notNull(),\n  status: text(\"status\").notNull().default('pending'), // 'pending', 'completed', 'in_progress', 'cancelled'\n  photos: text(\"photos\").array().default([]),\n  documents: text(\"documents\").array().default([]),\n  invoiceUrl: text(\"invoice_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Nova tabela para agendamentos de visitas futuras\nexport const scheduledVisits = pgTable(\"scheduled_visits\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  wellId: varchar(\"well_id\").references(() => wells.id).notNull(),\n  providerId: varchar(\"provider_id\").references(() => providers.id).notNull(),\n  scheduledDate: timestamp(\"scheduled_date\").notNull(),\n  serviceType: text(\"service_type\").notNull(),\n  status: text(\"status\").notNull().default('scheduled'), // 'scheduled', 'confirmed', 'completed', 'cancelled'\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  createdFromVisitId: varchar(\"created_from_visit_id\").references(() => visits.id),\n});\n\nexport const invoices = pgTable(\"invoices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  visitId: varchar(\"visit_id\").references(() => visits.id).notNull(),\n  clientId: varchar(\"client_id\").references(() => clients.id).notNull(),\n  providerId: varchar(\"provider_id\").references(() => providers.id).notNull(),\n  invoiceNumber: text(\"invoice_number\").notNull().unique(),\n  description: text(\"description\").notNull(),\n  serviceValue: text(\"service_value\").notNull(), // '0.00' for free services\n  materialCosts: text(\"material_costs\").default('0.00'),\n  totalAmount: text(\"total_amount\").notNull(),\n  isFree: boolean(\"is_free\").default(false),\n  status: text(\"status\").notNull().default('pending'), // 'pending', 'sent', 'paid', 'overdue', 'cancelled'\n  dueDate: timestamp(\"due_date\").notNull(),\n  paidDate: timestamp(\"paid_date\"),\n  paymentMethod: text(\"payment_method\"), // 'boleto', 'pix', 'card', 'cash'\n  paymentUrl: text(\"payment_url\"), // External payment link\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  sentAt: timestamp(\"sent_at\"),\n});\n\nexport const materialUsage = pgTable(\"material_usage\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  visitId: varchar(\"visit_id\").references(() => visits.id).notNull(),\n  materialType: text(\"material_type\").notNull(),\n  quantityGrams: decimal(\"quantity_grams\", { precision: 10, scale: 2 }).notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const waterQualityParameters = pgTable(\"water_quality_parameters\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  visitId: varchar(\"visit_id\").references(() => visits.id).notNull(),\n  parameter: text(\"parameter\").notNull(),\n  value: decimal(\"value\", { precision: 10, scale: 3 }).notNull(),\n  unit: text(\"unit\").notNull(), // mg/L, pH units, etc.\n  status: text(\"status\").notNull(), // 'excellent', 'good', 'fair', 'poor', 'critical'\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWellSchema = createInsertSchema(wells).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProviderSchema = createInsertSchema(providers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVisitSchema = createInsertSchema(visits).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertScheduledVisitSchema = createInsertSchema(scheduledVisits).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({\n  id: true,\n  createdAt: true,\n  sentAt: true,\n});\n\nexport const insertMaterialUsageSchema = createInsertSchema(materialUsage).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWaterQualityParameterSchema = createInsertSchema(waterQualityParameters).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Login schema\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n  userType: z.enum(['client', 'provider', 'admin']),\n});\n\n// Invoice creation schema with validation\nexport const createInvoiceSchema = z.object({\n  visitId: z.string(),\n  description: z.string().min(1),\n  serviceValue: z.string().regex(/^\\d+\\.\\d{2}$/),\n  materialCosts: z.string().regex(/^\\d+\\.\\d{2}$/).optional().default('0.00'),\n  isFree: z.boolean().default(false),\n  dueDate: z.string().or(z.date()),\n  paymentMethod: z.enum(['boleto', 'pix', 'card', 'cash']).optional(),\n  notes: z.string().optional(),\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type Client = typeof clients.$inferSelect;\nexport type InsertWell = z.infer<typeof insertWellSchema>;\nexport type Well = typeof wells.$inferSelect;\nexport type InsertProvider = z.infer<typeof insertProviderSchema>;\nexport type Provider = typeof providers.$inferSelect;\nexport type InsertVisit = z.infer<typeof insertVisitSchema>;\nexport type Visit = typeof visits.$inferSelect;\nexport type InsertScheduledVisit = z.infer<typeof insertScheduledVisitSchema>;\nexport type ScheduledVisit = typeof scheduledVisits.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertMaterialUsage = z.infer<typeof insertMaterialUsageSchema>;\nexport type MaterialUsage = typeof materialUsage.$inferSelect;\nexport type InsertWaterQualityParameter = z.infer<typeof insertWaterQualityParameterSchema>;\nexport type WaterQualityParameter = typeof waterQualityParameters.$inferSelect;\nexport type LoginRequest = z.infer<typeof loginSchema>;\nexport type CreateInvoiceRequest = z.infer<typeof createInvoiceSchema>;\n\n// Extended types for API responses\nexport type UserWithProfile = User & {\n  client?: Client;\n  provider?: Provider;\n};\n\nexport type WellWithClient = Well & {\n  client: Client & { user: User };\n};\n\nexport type VisitWithDetails = Visit & {\n  well: WellWithClient;\n  provider: Provider & { user: User };\n};\n\nexport type ScheduledVisitWithDetails = ScheduledVisit & {\n  well: WellWithClient;\n  provider: Provider & { user: User };\n};\n\nexport type InvoiceWithDetails = Invoice & {\n  visit: VisitWithDetails;\n  client: Client & { user: User };\n  provider: Provider & { user: User };\n};\n\nexport type VisitWithMaterials = VisitWithDetails & {\n  materials: MaterialUsage[];\n  waterParameters?: WaterQualityParameter[];\n};\n\n// Constants for available materials\nexport const AVAILABLE_MATERIALS = [\n  'Hipoclorito de sódio',\n  'Sulfato de Alumínio',\n  'Cloreto Férrico',\n  'Policloreto de Alumínio (PAC)',\n  'Cal hidratada (hidróxido de cálcio)',\n  'Soda cáustica (hidróxido de sódio)',\n  'Ácido sulfúrico',\n  'Ácido clorídrico',\n  'Carbonato de sódio (barrilha leve)',\n  'Carvão ativado',\n  'Permanganato de potássio',\n  'Cloro gás',\n  'Ozônio',\n  'Sulfato de cobre',\n  'Peróxido de hidrogênio',\n] as const;\n\nexport type AvailableMaterial = typeof AVAILABLE_MATERIALS[number];\n\n// Water quality parameters (same as materials but for status/testing)\nexport const WATER_PARAMETERS = [\n  'Cloro (livre ou total)',\n  'pH',\n  'Dureza total (Ca, Mg)',\n  'Cloretos (Cl⁻)',\n  'Sulfatos (SO₄²⁻)',\n  'Fósforo total',\n  'Ferro (Fe)',\n  'Manganês (Mn)',\n  'Nitrogênio total (amônia, nitrato, nitrito)',\n] as const;\n\nexport type WaterParameter = typeof WATER_PARAMETERS[number];\n\n// Status options for water quality\nexport const WATER_STATUS_OPTIONS = [\n  'excellent',\n  'good', \n  'fair',\n  'poor',\n  'critical'\n] as const;\n\nexport type WaterStatus = typeof WATER_STATUS_OPTIONS[number];\n\n// Material usage form schema\nexport const materialUsageFormSchema = z.object({\n  materials: z.array(z.object({\n    type: z.string(),\n    selected: z.boolean(),\n    quantity: z.number().min(0).optional(),\n    notes: z.string().optional(),\n  })),\n});\n\nexport type MaterialUsageForm = z.infer<typeof materialUsageFormSchema>;\n","size_bytes":10575},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/hooks/use-auth\";\nimport Home from \"@/pages/index\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport ClientDashboard from \"@/pages/client-dashboard-simple\";\nimport ProviderDashboard from \"@/pages/provider-dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ProtectedRoute({ component: Component, allowedRoles }: { component: React.ComponentType; allowedRoles: string[] }) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Login />;\n  }\n\n  if (!allowedRoles.includes(user.userType)) {\n    return <NotFound />;\n  }\n\n  return <Component />;\n}\n\nfunction AppRoutes() {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\">\n        {!user ? <Home /> : (\n          <>\n            {user.userType === \"client\" && <ClientDashboard />}\n            {user.userType === \"provider\" && <ProviderDashboard />}\n            {user.userType === \"admin\" && <AdminDashboard />}\n          </>\n        )}\n      </Route>\n      \n      <Route path=\"/login\">\n        <Login />\n      </Route>\n      \n      <Route path=\"/register\">\n        <Register />\n      </Route>\n      \n      <Route path=\"/client\">\n        <ProtectedRoute component={ClientDashboard} allowedRoles={[\"client\"]} />\n      </Route>\n      \n      <Route path=\"/provider\">\n        <ProtectedRoute component={ProviderDashboard} allowedRoles={[\"provider\"]} />\n      </Route>\n      \n      <Route path=\"/admin\">\n        <ProtectedRoute component={AdminDashboard} allowedRoles={[\"admin\"]} />\n      </Route>\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <AppRoutes />\n          <Toaster />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2672},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(214, 84%, 56%);\n  --primary-foreground: hsl(210, 100%, 98%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --success: hsl(142, 76%, 36%);\n  --success-foreground: hsl(60, 9.1%, 97.8%);\n  --warning: hsl(38, 92%, 50%);\n  --warning-foreground: hsl(60, 9.1%, 97.8%);\n  --error: hsl(0, 84.2%, 60.2%);\n  --error-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(214, 84%, 56%);\n  --primary-foreground: hsl(210, 100%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --success: hsl(142, 76%, 36%);\n  --success-foreground: hsl(0, 0%, 98%);\n  --warning: hsl(38, 92%, 50%);\n  --warning-foreground: hsl(0, 0%, 98%);\n  --error: hsl(0, 62.8%, 30.6%);\n  --error-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .bg-success {\n    background-color: hsl(var(--success));\n  }\n  .text-success {\n    color: hsl(var(--success));\n  }\n  .bg-warning {\n    background-color: hsl(var(--warning));\n  }\n  .text-warning {\n    color: hsl(var(--warning));\n  }\n  .bg-error {\n    background-color: hsl(var(--error));\n  }\n  .text-error {\n    color: hsl(var(--error));\n  }\n  .bg-success\\/10 {\n    background-color: hsl(var(--success) / 0.1);\n  }\n  .bg-warning\\/10 {\n    background-color: hsl(var(--warning) / 0.1);\n  }\n  .bg-error\\/10 {\n    background-color: hsl(var(--error) / 0.1);\n  }\n  .bg-primary\\/10 {\n    background-color: hsl(var(--primary) / 0.1);\n  }\n}\n","size_bytes":2788},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/countdown-timer.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Clock } from \"lucide-react\";\n\ninterface CountdownTimerProps {\n  targetDate: string;\n  className?: string;\n}\n\ninterface TimeLeft {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\nexport function CountdownTimer({ targetDate, className }: CountdownTimerProps) {\n  const [timeLeft, setTimeLeft] = useState<TimeLeft>({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n\n  useEffect(() => {\n    const calculateTimeLeft = (): TimeLeft => {\n      const difference = new Date(targetDate).getTime() - new Date().getTime();\n      \n      if (difference > 0) {\n        return {\n          days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n          hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n          minutes: Math.floor((difference / 1000 / 60) % 60),\n          seconds: Math.floor((difference / 1000) % 60),\n        };\n      }\n      \n      return { days: 0, hours: 0, minutes: 0, seconds: 0 };\n    };\n\n    setTimeLeft(calculateTimeLeft());\n\n    const timer = setInterval(() => {\n      setTimeLeft(calculateTimeLeft());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [targetDate]);\n\n  const isExpired = timeLeft.days === 0 && timeLeft.hours === 0 && timeLeft.minutes === 0 && timeLeft.seconds === 0;\n\n  if (isExpired) {\n    return (\n      <div className={`flex items-center text-red-600 ${className}`}>\n        <Clock className=\"h-4 w-4 mr-1\" />\n        <span className=\"text-sm font-medium\">Vencido</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`flex items-center text-blue-600 ${className}`}>\n      <Clock className=\"h-4 w-4 mr-1\" />\n      <span className=\"text-sm font-medium\">\n        {timeLeft.days > 0 && `${timeLeft.days}d `}\n        {timeLeft.hours > 0 && `${timeLeft.hours}h `}\n        {timeLeft.minutes > 0 && `${timeLeft.minutes}m `}\n        {timeLeft.days === 0 && timeLeft.hours === 0 && `${timeLeft.seconds}s`}\n      </span>\n    </div>\n  );\n}","size_bytes":1967},"client/src/components/image-viewer.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogTrigger, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { VisuallyHidden } from \"@radix-ui/react-visually-hidden\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, ChevronLeft, ChevronRight, ZoomIn, ZoomOut } from \"lucide-react\";\n\ninterface ImageViewerProps {\n  images: string[];\n  trigger?: React.ReactNode;\n  className?: string;\n}\n\nexport function ImageViewer({ images, trigger, className }: ImageViewerProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [zoom, setZoom] = useState(1);\n\n  if (!images || images.length === 0) {\n    return null;\n  }\n\n  const nextImage = () => {\n    setCurrentIndex((prev) => (prev + 1) % images.length);\n    setZoom(1);\n  };\n\n  const prevImage = () => {\n    setCurrentIndex((prev) => (prev - 1 + images.length) % images.length);\n    setZoom(1);\n  };\n\n  const zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.25, 3));\n  };\n\n  const zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.25, 0.5));\n  };\n\n  const defaultTrigger = (\n    <Button variant=\"outline\" size=\"sm\" className={className}>\n      Ver {images.length} foto{images.length > 1 ? 's' : ''}\n    </Button>\n  );\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        {trigger || defaultTrigger}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl w-full h-[90vh] p-0\">\n        <VisuallyHidden>\n          <DialogTitle>Visualizador de Imagens</DialogTitle>\n          <DialogDescription>\n            Visualize as fotos da visita técnica\n          </DialogDescription>\n        </VisuallyHidden>\n        <div className=\"relative h-full bg-black rounded-lg overflow-hidden\">\n          {/* Header */}\n          <div className=\"absolute top-0 left-0 right-0 z-10 bg-black/50 p-4 flex justify-between items-center\">\n            <div className=\"text-white text-sm\">\n              Foto {currentIndex + 1} de {images.length}\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={zoomOut}\n                className=\"text-white hover:bg-white/20\"\n              >\n                <ZoomOut className=\"h-4 w-4\" />\n              </Button>\n              <span className=\"text-white text-sm\">{Math.round(zoom * 100)}%</span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={zoomIn}\n                className=\"text-white hover:bg-white/20\"\n              >\n                <ZoomIn className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsOpen(false)}\n                className=\"text-white hover:bg-white/20\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Image */}\n          <div className=\"h-full flex items-center justify-center p-4\">\n            <img\n              src={`/uploads/${images[currentIndex]}`}\n              alt={`Foto ${currentIndex + 1}`}\n              className=\"max-w-full max-h-full object-contain transition-transform duration-200\"\n              style={{ transform: `scale(${zoom})` }}\n            />\n          </div>\n\n          {/* Navigation */}\n          {images.length > 1 && (\n            <>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={prevImage}\n                className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-white hover:bg-white/20\"\n              >\n                <ChevronLeft className=\"h-6 w-6\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={nextImage}\n                className=\"absolute right-4 top-1/2 transform -translate-y-1/2 text-white hover:bg-white/20\"\n              >\n                <ChevronRight className=\"h-6 w-6\" />\n              </Button>\n            </>\n          )}\n\n          {/* Thumbnails */}\n          {images.length > 1 && (\n            <div className=\"absolute bottom-0 left-0 right-0 p-4 bg-black/50\">\n              <div className=\"flex justify-center space-x-2 overflow-x-auto\">\n                {images.map((image, index) => (\n                  <button\n                    key={index}\n                    onClick={() => {\n                      setCurrentIndex(index);\n                      setZoom(1);\n                    }}\n                    className={`flex-shrink-0 w-16 h-16 rounded border-2 overflow-hidden ${\n                      index === currentIndex ? 'border-white' : 'border-transparent'\n                    }`}\n                  >\n                    <img\n                      src={`/uploads/${image}`}\n                      alt={`Miniatura ${index + 1}`}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5234},"client/src/components/invoice-form.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FileText, DollarSign, Calendar, CreditCard } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type CreateInvoiceRequest, type VisitWithDetails } from \"@shared/schema\";\n\ninterface InvoiceFormProps {\n  visit: VisitWithDetails;\n  onSuccess?: () => void;\n  onCancel?: () => void;\n}\n\nexport function InvoiceForm({ visit, onSuccess, onCancel }: InvoiceFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [formData, setFormData] = useState<CreateInvoiceRequest>({\n    visitId: visit.id,\n    description: `${getServiceTypeLabel(visit.serviceType)} - ${visit.well.name}`,\n    serviceValue: \"0.00\",\n    materialCosts: \"0.00\",\n    isFree: false,\n    dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 days from now\n    paymentMethod: undefined,\n    notes: \"\"\n  });\n\n  const createInvoiceMutation = useMutation({\n    mutationFn: async (data: CreateInvoiceRequest) => {\n      return apiRequest('POST', '/api/invoices', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Fatura criada!\",\n        description: \"A fatura foi criada com sucesso.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/providers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/clients'] });\n      onSuccess?.();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro ao criar fatura\",\n        description: error instanceof Error ? error.message : \"Tente novamente\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createInvoiceMutation.mutate(formData);\n  };\n\n  const handleServiceValueChange = (value: string) => {\n    const numValue = parseFloat(value) || 0;\n    setFormData({\n      ...formData,\n      serviceValue: numValue.toFixed(2),\n      isFree: numValue === 0\n    });\n  };\n\n  const handleMaterialCostsChange = (value: string) => {\n    const numValue = parseFloat(value) || 0;\n    setFormData({\n      ...formData,\n      materialCosts: numValue.toFixed(2)\n    });\n  };\n\n  const handleFreeServiceChange = (checked: boolean) => {\n    setFormData({\n      ...formData,\n      isFree: checked,\n      serviceValue: checked ? \"0.00\" : formData.serviceValue,\n      materialCosts: checked ? \"0.00\" : formData.materialCosts\n    });\n  };\n\n  function getServiceTypeLabel(serviceType: string) {\n    const labels = {\n      'manutencao-preventiva': 'Manutenção Preventiva',\n      'manutencao-corretiva': 'Manutenção Corretiva',\n      'limpeza': 'Limpeza',\n      'instalacao': 'Instalação',\n      'reparo': 'Reparo',\n      'inspecao': 'Inspeção',\n    };\n    return labels[serviceType as keyof typeof labels] || serviceType;\n  }\n\n  const totalAmount = formData.isFree ? 0 : (parseFloat(formData.serviceValue) + parseFloat(formData.materialCosts));\n\n  return (\n    <Card className=\"w-full max-w-2xl\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <FileText className=\"h-5 w-5\" />\n          <span>Criar Fatura</span>\n        </CardTitle>\n        <div className=\"text-sm text-gray-600\">\n          <p><strong>Cliente:</strong> {visit.well.client.user.name}</p>\n          <p><strong>Poço:</strong> {visit.well.name}</p>\n          <p><strong>Data da Visita:</strong> {new Date(visit.visitDate).toLocaleDateString('pt-BR')}</p>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"description\">Descrição do Serviço *</Label>\n            <Textarea\n              id=\"description\"\n              rows={3}\n              value={formData.description}\n              onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n              required\n              className=\"mt-2\"\n            />\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"isFree\"\n              checked={formData.isFree}\n              onCheckedChange={handleFreeServiceChange}\n            />\n            <Label htmlFor=\"isFree\" className=\"text-sm font-medium\">\n              Serviço Gratuito\n            </Label>\n          </div>\n\n          {!formData.isFree && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"serviceValue\">Valor do Serviço (R$) *</Label>\n                <div className=\"relative mt-2\">\n                  <DollarSign className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                  <Input\n                    id=\"serviceValue\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={formData.serviceValue}\n                    onChange={(e) => handleServiceValueChange(e.target.value)}\n                    className=\"pl-10\"\n                    required={!formData.isFree}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"materialCosts\">Custo de Materiais (R$)</Label>\n                <div className=\"relative mt-2\">\n                  <DollarSign className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                  <Input\n                    id=\"materialCosts\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={formData.materialCosts}\n                    onChange={(e) => handleMaterialCostsChange(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"dueDate\">Data de Vencimento *</Label>\n              <div className=\"relative mt-2\">\n                <Calendar className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  id=\"dueDate\"\n                  type=\"date\"\n                  value={formData.dueDate}\n                  onChange={(e) => setFormData({ ...formData, dueDate: e.target.value })}\n                  className=\"pl-10\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"paymentMethod\">Forma de Pagamento</Label>\n              <Select\n                value={formData.paymentMethod}\n                onValueChange={(value: \"boleto\" | \"pix\" | \"card\" | \"cash\") =>\n                  setFormData({ ...formData, paymentMethod: value })\n                }\n              >\n                <SelectTrigger className=\"mt-2\">\n                  <SelectValue placeholder=\"Selecione...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"boleto\">Boleto Bancário</SelectItem>\n                  <SelectItem value=\"pix\">PIX</SelectItem>\n                  <SelectItem value=\"card\">Cartão</SelectItem>\n                  <SelectItem value=\"cash\">Dinheiro</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"notes\">Observações</Label>\n            <Textarea\n              id=\"notes\"\n              rows={3}\n              value={formData.notes}\n              onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n              placeholder=\"Informações adicionais sobre a fatura...\"\n              className=\"mt-2\"\n            />\n          </div>\n\n          {!formData.isFree && (\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <div className=\"flex justify-between items-center text-lg font-semibold\">\n                <span>Total da Fatura:</span>\n                <span className=\"text-primary\">R$ {totalAmount.toFixed(2).replace('.', ',')}</span>\n              </div>\n            </div>\n          )}\n\n          {formData.isFree && (\n            <div className=\"bg-success/10 p-4 rounded-lg\">\n              <div className=\"flex items-center justify-center text-success font-semibold\">\n                <span>Serviço Gratuito</span>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex space-x-4 pt-4\">\n            <Button\n              type=\"submit\"\n              className=\"flex-1\"\n              disabled={createInvoiceMutation.isPending}\n            >\n              {createInvoiceMutation.isPending ? \"Criando...\" : \"Criar Fatura\"}\n            </Button>\n            {onCancel && (\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onCancel}\n                className=\"px-8\"\n              >\n                Cancelar\n              </Button>\n            )}\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9611},"client/src/components/invoice-list.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  FileText, \n  Send, \n  CheckCircle, \n  Copy, \n  ExternalLink, \n  DollarSign, \n  Filter,\n  Eye,\n  Calendar\n} from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type InvoiceWithDetails } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\ninterface InvoiceListProps {\n  invoices: InvoiceWithDetails[];\n  showActions?: boolean;\n  userType?: 'admin' | 'provider' | 'client';\n}\n\nexport function InvoiceList({ invoices, showActions = true, userType = 'admin' }: InvoiceListProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const sendInvoiceMutation = useMutation({\n    mutationFn: async (invoiceId: string) => {\n      return apiRequest('PATCH', `/api/invoices/${invoiceId}/send`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Fatura enviada!\",\n        description: \"A fatura foi enviada ao cliente com sucesso.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro ao enviar fatura\",\n        description: \"Não foi possível enviar a fatura. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const markAsPaidMutation = useMutation({\n    mutationFn: async ({ invoiceId, paymentMethod }: { invoiceId: string; paymentMethod: string }) => {\n      return apiRequest('PATCH', `/api/invoices/${invoiceId}/paid`, { paymentMethod });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Pagamento confirmado!\",\n        description: \"A fatura foi marcada como paga.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro ao confirmar pagamento\",\n        description: \"Não foi possível confirmar o pagamento. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      pending: { label: \"Pendente\", className: \"bg-gray-100 text-gray-700\" },\n      sent: { label: \"Enviada\", className: \"bg-primary/10 text-primary\" },\n      paid: { label: \"Paga\", className: \"bg-success/10 text-success\" },\n      overdue: { label: \"Vencida\", className: \"bg-error/10 text-error\" },\n      cancelled: { label: \"Cancelada\", className: \"bg-gray-300 text-gray-600\" },\n    };\n    \n    const variant = variants[status as keyof typeof variants] || variants.pending;\n    return <Badge className={variant.className}>{variant.label}</Badge>;\n  };\n\n  const handleCopyPaymentLink = (paymentUrl: string | null) => {\n    const url = paymentUrl || 'https://exemplo.com/pagamento/123456';\n    navigator.clipboard.writeText(url);\n    toast({\n      title: \"Link copiado!\",\n      description: \"Link de pagamento copiado para a área de transferência\",\n    });\n  };\n\n  const handleOpenPaymentLink = (paymentUrl: string | null) => {\n    const url = paymentUrl || 'https://exemplo.com/pagamento/123456';\n    window.open(url, '_blank');\n  };\n\n  const filteredInvoices = invoices.filter(invoice => {\n    const matchesStatus = statusFilter === 'all' || invoice.status === statusFilter;\n    const matchesSearch = searchTerm === '' || \n      invoice.invoiceNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      invoice.visit.well.client.user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      invoice.description.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    return matchesStatus && matchesSearch;\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Filter className=\"h-5 w-5\" />\n            <span>Filtros</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Status da fatura\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os status</SelectItem>\n                  <SelectItem value=\"pending\">Pendente</SelectItem>\n                  <SelectItem value=\"sent\">Enviada</SelectItem>\n                  <SelectItem value=\"paid\">Paga</SelectItem>\n                  <SelectItem value=\"overdue\">Vencida</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelada</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Input\n                placeholder=\"Buscar por número, cliente ou descrição...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Invoice List */}\n      <div className=\"grid gap-4\">\n        {filteredInvoices.map((invoice) => (\n          <Card key={invoice.id} className=\"overflow-hidden\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex justify-between items-start mb-4\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-2\">\n                    <FileText className=\"h-5 w-5 text-primary\" />\n                    <span className=\"font-semibold text-lg\">{invoice.invoiceNumber}</span>\n                    {getStatusBadge(invoice.status)}\n                    {invoice.isFree && (\n                      <Badge className=\"bg-success/10 text-success\">Gratuito</Badge>\n                    )}\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600\">\n                    <div>\n                      <p><strong>Cliente:</strong> {invoice.visit.well.client.user.name}</p>\n                      <p><strong>Poço:</strong> {invoice.visit.well.name}</p>\n                      <p><strong>Prestador:</strong> {invoice.visit.provider.user.name}</p>\n                    </div>\n                    <div>\n                      <p><strong>Criada em:</strong> {format(new Date(invoice.createdAt!), 'dd/MM/yyyy')}</p>\n                      <p><strong>Vencimento:</strong> {format(new Date(invoice.dueDate), 'dd/MM/yyyy')}</p>\n                      {invoice.paidDate && (\n                        <p><strong>Paga em:</strong> {format(new Date(invoice.paidDate), 'dd/MM/yyyy')}</p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"text-right\">\n                  {!invoice.isFree ? (\n                    <div className=\"text-2xl font-bold text-primary\">\n                      R$ {parseFloat(invoice.totalAmount).toFixed(2).replace('.', ',')}\n                    </div>\n                  ) : (\n                    <div className=\"text-xl font-bold text-success\">\n                      Gratuito\n                    </div>\n                  )}\n                  <div className=\"text-sm text-gray-500 mt-1\">\n                    {invoice.paymentMethod && `via ${invoice.paymentMethod.toUpperCase()}`}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mb-4\">\n                <p className=\"text-sm text-gray-700\">\n                  <strong>Descrição:</strong> {invoice.description}\n                </p>\n                {invoice.notes && (\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    <strong>Observações:</strong> {invoice.notes}\n                  </p>\n                )}\n              </div>\n\n              {showActions && (\n                <div className=\"flex flex-wrap gap-2 pt-4 border-t\">\n                  {userType === 'admin' && (\n                    <>\n                      {invoice.status === 'pending' && (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => sendInvoiceMutation.mutate(invoice.id)}\n                          disabled={sendInvoiceMutation.isPending}\n                        >\n                          <Send className=\"h-4 w-4 mr-1\" />\n                          Enviar\n                        </Button>\n                      )}\n                      \n                      {(invoice.status === 'sent' || invoice.status === 'overdue') && !invoice.isFree && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => markAsPaidMutation.mutate({ \n                            invoiceId: invoice.id, \n                            paymentMethod: invoice.paymentMethod || 'boleto' \n                          })}\n                          disabled={markAsPaidMutation.isPending}\n                        >\n                          <CheckCircle className=\"h-4 w-4 mr-1\" />\n                          Marcar como Paga\n                        </Button>\n                      )}\n                    </>\n                  )}\n\n                  {userType === 'provider' && invoice.status === 'pending' && (\n                    <Button\n                      size=\"sm\"\n                      onClick={() => sendInvoiceMutation.mutate(invoice.id)}\n                      disabled={sendInvoiceMutation.isPending}\n                    >\n                      <Send className=\"h-4 w-4 mr-1\" />\n                      Enviar ao Cliente\n                    </Button>\n                  )}\n\n                  {(invoice.status === 'sent' || invoice.status === 'paid') && !invoice.isFree && (\n                    <>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => handleCopyPaymentLink(invoice.paymentUrl)}\n                        title=\"Copiar link de pagamento\"\n                      >\n                        <Copy className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => handleOpenPaymentLink(invoice.paymentUrl)}\n                        title=\"Abrir link de pagamento\"\n                      >\n                        <ExternalLink className=\"h-4 w-4\" />\n                      </Button>\n                    </>\n                  )}\n\n                  {userType === 'client' && (\n                    <div className=\"flex space-x-2\">\n                      {!invoice.isFree && (invoice.status === 'sent' || invoice.status === 'overdue') && (\n                        <>\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleOpenPaymentLink(invoice.paymentUrl)}\n                          >\n                            <DollarSign className=\"h-4 w-4 mr-1\" />\n                            Pagar Agora\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleCopyPaymentLink(invoice.paymentUrl)}\n                          >\n                            <Copy className=\"h-4 w-4 mr-1\" />\n                            Copiar Link\n                          </Button>\n                        </>\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n\n        {filteredInvoices.length === 0 && (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">Nenhuma fatura encontrada.</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":12479},"client/src/components/material-consumption-report.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from \"recharts\";\nimport { Calendar, TrendingUp, Weight, FlaskConical } from \"lucide-react\";\n\ninterface ConsumptionData {\n  materialType: string;\n  totalGrams: number;\n  totalKilograms: number;\n}\n\ninterface ConsumptionResponse {\n  period: string;\n  startDate: string;\n  endDate: string;\n  consumption: ConsumptionData[];\n}\n\nconst COLORS = [\n  '#3B82F6', // blue-500\n  '#10B981', // emerald-500\n  '#F59E0B', // amber-500\n  '#EF4444', // red-500\n  '#8B5CF6', // violet-500\n  '#06B6D4', // cyan-500\n  '#84CC16', // lime-500\n  '#F97316', // orange-500\n  '#EC4899', // pink-500\n];\n\nexport function MaterialConsumptionReport() {\n  const [selectedPeriod, setSelectedPeriod] = useState<'week' | 'month'>('week');\n\n  const { data: weeklyData, isLoading: weeklyLoading } = useQuery<ConsumptionResponse>({\n    queryKey: ['/api/admin/materials/consumption', { period: 'week' }],\n  });\n\n  const { data: monthlyData, isLoading: monthlyLoading } = useQuery<ConsumptionResponse>({\n    queryKey: ['/api/admin/materials/consumption', { period: 'month' }],\n  });\n\n  const currentData = selectedPeriod === 'week' ? weeklyData : monthlyData;\n  const isLoading = selectedPeriod === 'week' ? weeklyLoading : monthlyLoading;\n\n  const formatPeriodText = (period: string, startDate: string, endDate: string) => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    \n    if (period === 'week') {\n      return `Últimos 7 dias (${start.toLocaleDateString()} - ${end.toLocaleDateString()})`;\n    } else {\n      return `Último mês (${start.toLocaleDateString()} - ${end.toLocaleDateString()})`;\n    }\n  };\n\n  const getTotalConsumption = (data: ConsumptionData[]) => {\n    return data.reduce((total, item) => total + item.totalGrams, 0);\n  };\n\n  const getTopMaterial = (data: ConsumptionData[]) => {\n    if (data.length === 0) return null;\n    return data.reduce((max, item) => item.totalGrams > max.totalGrams ? item : max);\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center\">Carregando relatório...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const chartData = currentData?.consumption?.map(item => ({\n    name: item.materialType.length > 20 ? item.materialType.substring(0, 20) + '...' : item.materialType,\n    fullName: item.materialType,\n    gramas: item.totalGrams,\n    kg: item.totalKilograms,\n  })) || [];\n\n  const pieData = currentData?.consumption?.map((item, index) => ({\n    name: item.materialType,\n    value: item.totalGrams,\n    color: COLORS[index % COLORS.length],\n  })) || [];\n\n  const totalConsumption = currentData?.consumption ? getTotalConsumption(currentData.consumption) : 0;\n  const topMaterial = currentData?.consumption ? getTopMaterial(currentData.consumption) : null;\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <FlaskConical className=\"h-5 w-5\" />\n            <span>Relatório de Consumo de Materiais</span>\n          </CardTitle>\n          <CardDescription>\n            Acompanhe o uso de materiais químicos pelos prestadores de serviço.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex space-x-2 mb-6\">\n            <Button\n              variant={selectedPeriod === 'week' ? 'default' : 'outline'}\n              onClick={() => setSelectedPeriod('week')}\n              className=\"flex items-center space-x-2\"\n            >\n              <Calendar className=\"h-4 w-4\" />\n              <span>Semanal</span>\n            </Button>\n            <Button\n              variant={selectedPeriod === 'month' ? 'default' : 'outline'}\n              onClick={() => setSelectedPeriod('month')}\n              className=\"flex items-center space-x-2\"\n            >\n              <Calendar className=\"h-4 w-4\" />\n              <span>Mensal</span>\n            </Button>\n          </div>\n\n          {currentData && (\n            <>\n              <div className=\"mb-6\">\n                <p className=\"text-sm text-gray-600 mb-4\">\n                  {formatPeriodText(currentData.period, currentData.startDate, currentData.endDate)}\n                </p>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"bg-blue-50 rounded-lg p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Weight className=\"h-5 w-5 text-blue-600\" />\n                      <span className=\"text-sm font-medium text-blue-900\">Total Consumido</span>\n                    </div>\n                    <p className=\"text-2xl font-bold text-blue-900 mt-2\">\n                      {totalConsumption.toFixed(0)}g\n                    </p>\n                    <p className=\"text-sm text-blue-700\">\n                      {(totalConsumption / 1000).toFixed(2)}kg\n                    </p>\n                  </div>\n\n                  <div className=\"bg-green-50 rounded-lg p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <TrendingUp className=\"h-5 w-5 text-green-600\" />\n                      <span className=\"text-sm font-medium text-green-900\">Material Mais Usado</span>\n                    </div>\n                    <p className=\"text-lg font-bold text-green-900 mt-2\">\n                      {topMaterial ? topMaterial.materialType.split('(')[0].trim() : 'N/A'}\n                    </p>\n                    <p className=\"text-sm text-green-700\">\n                      {topMaterial ? `${topMaterial.totalGrams.toFixed(0)}g` : '0g'}\n                    </p>\n                  </div>\n\n                  <div className=\"bg-amber-50 rounded-lg p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Flask className=\"h-5 w-5 text-amber-600\" />\n                      <span className=\"text-sm font-medium text-amber-900\">Tipos Utilizados</span>\n                    </div>\n                    <p className=\"text-2xl font-bold text-amber-900 mt-2\">\n                      {currentData.consumption.length}\n                    </p>\n                    <p className=\"text-sm text-amber-700\">materiais diferentes</p>\n                  </div>\n                </div>\n              </div>\n\n              {currentData.consumption.length > 0 ? (\n                <Tabs defaultValue=\"bar\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-3\">\n                    <TabsTrigger value=\"bar\">Gráfico de Barras</TabsTrigger>\n                    <TabsTrigger value=\"pie\">Gráfico Pizza</TabsTrigger>\n                    <TabsTrigger value=\"table\">Tabela Detalhada</TabsTrigger>\n                  </TabsList>\n                  \n                  <TabsContent value=\"bar\" className=\"space-y-4\">\n                    <div className=\"h-80\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <BarChart data={chartData}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis \n                            dataKey=\"name\" \n                            angle={-45}\n                            textAnchor=\"end\"\n                            height={80}\n                            fontSize={12}\n                          />\n                          <YAxis />\n                          <Tooltip \n                            formatter={(value, name) => [\n                              name === 'gramas' ? `${value}g` : `${value}kg`,\n                              name === 'gramas' ? 'Gramas' : 'Quilogramas'\n                            ]}\n                            labelFormatter={(label) => {\n                              const item = chartData.find(d => d.name === label);\n                              return item?.fullName || label;\n                            }}\n                          />\n                          <Bar dataKey=\"gramas\" fill=\"#3B82F6\" />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </TabsContent>\n                  \n                  <TabsContent value=\"pie\" className=\"space-y-4\">\n                    <div className=\"h-80\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <PieChart>\n                          <Pie\n                            data={pieData}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            labelLine={false}\n                            label={({ name, percent }) => `${name.split('(')[0].trim()} ${(percent * 100).toFixed(0)}%`}\n                            outerRadius={80}\n                            fill=\"#8884d8\"\n                            dataKey=\"value\"\n                          >\n                            {pieData.map((entry, index) => (\n                              <Cell key={`cell-${index}`} fill={entry.color} />\n                            ))}\n                          </Pie>\n                          <Tooltip formatter={(value) => [`${value}g`, 'Consumo']} />\n                        </PieChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </TabsContent>\n                  \n                  <TabsContent value=\"table\" className=\"space-y-4\">\n                    <div className=\"rounded-md border\">\n                      <table className=\"w-full text-sm\">\n                        <thead>\n                          <tr className=\"border-b bg-gray-50\">\n                            <th className=\"text-left p-4 font-medium\">Material</th>\n                            <th className=\"text-right p-4 font-medium\">Gramas</th>\n                            <th className=\"text-right p-4 font-medium\">Quilogramas</th>\n                            <th className=\"text-right p-4 font-medium\">% do Total</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {currentData.consumption\n                            .sort((a, b) => b.totalGrams - a.totalGrams)\n                            .map((item, index) => (\n                            <tr key={index} className=\"border-b\">\n                              <td className=\"p-4\">{item.materialType}</td>\n                              <td className=\"text-right p-4 font-mono\">\n                                {item.totalGrams.toFixed(1)}g\n                              </td>\n                              <td className=\"text-right p-4 font-mono\">\n                                <Badge variant=\"secondary\">\n                                  {item.totalKilograms.toFixed(3)}kg\n                                </Badge>\n                              </td>\n                              <td className=\"text-right p-4\">\n                                {((item.totalGrams / totalConsumption) * 100).toFixed(1)}%\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Flask className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                    Nenhum consumo registrado\n                  </h3>\n                  <p className=\"text-gray-500\">\n                    Não há uso de materiais registrado para o período selecionado.\n                  </p>\n                </div>\n              )}\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12181},"client/src/components/material-usage-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { AVAILABLE_MATERIALS, type AvailableMaterial } from \"@shared/schema\";\nimport { FlaskConical, Weight } from \"lucide-react\";\n\nconst materialFormSchema = z.object({\n  materials: z.array(z.object({\n    type: z.string(),\n    selected: z.boolean(),\n    quantity: z.number().min(0),\n    notes: z.string().optional(),\n  })),\n});\n\ntype MaterialFormData = z.infer<typeof materialFormSchema>;\n\ninterface MaterialUsageFormProps {\n  visitId: string;\n  onSuccess?: () => void;\n}\n\nexport function MaterialUsageForm({ visitId, onSuccess }: MaterialUsageFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: existingMaterials, isLoading } = useQuery({\n    queryKey: ['/api/visits', visitId, 'materials'],\n  });\n\n  const form = useForm<MaterialFormData>({\n    resolver: zodResolver(materialFormSchema),\n    defaultValues: {\n      materials: AVAILABLE_MATERIALS.map(material => ({\n        type: material,\n        selected: false,\n        quantity: 0,\n        notes: \"\",\n      })),\n    },\n  });\n\n  const saveMaterialsMutation = useMutation({\n    mutationFn: async (data: MaterialFormData) => {\n      await apiRequest(`/api/visits/${visitId}/materials`, {\n        method: 'POST',\n        body: JSON.stringify({ materials: data.materials }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Materiais salvos com sucesso!\",\n        description: \"O uso dos materiais foi registrado para esta visita.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/visits'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/materials/consumption'] });\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao salvar materiais\",\n        description: error.message || \"Ocorreu um erro ao registrar o uso dos materiais.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: MaterialFormData) => {\n    const selectedMaterials = data.materials.filter(m => m.selected);\n    if (selectedMaterials.length === 0) {\n      toast({\n        title: \"Nenhum material selecionado\",\n        description: \"Selecione pelo menos um material ou defina quantidade zero para todos.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    saveMaterialsMutation.mutate(data);\n  };\n\n  const watchedMaterials = form.watch(\"materials\");\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center\">Carregando...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const hasExistingMaterials = existingMaterials?.materials && existingMaterials.materials.length > 0;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <FlaskConical className=\"h-5 w-5\" />\n          <span>Materiais Utilizados</span>\n        </CardTitle>\n        <CardDescription>\n          Marque os materiais utilizados nesta visita e informe a quantidade em gramas.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        {hasExistingMaterials ? (\n          <div className=\"space-y-4\">\n            <h3 className=\"font-medium text-gray-900\">Materiais já registrados:</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {existingMaterials.materials.map((material: any, index: number) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <span className=\"font-medium\">{material.materialType}</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n                      <Weight className=\"h-3 w-3\" />\n                      <span>{Number(material.quantityGrams).toFixed(0)}g</span>\n                    </Badge>\n                    <Badge variant=\"outline\">\n                      {(Number(material.quantityGrams) / 1000).toFixed(2)}kg\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ) : (\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 gap-4\">\n                {AVAILABLE_MATERIALS.map((material, index) => (\n                  <FormField\n                    key={material}\n                    control={form.control}\n                    name={`materials.${index}`}\n                    render={({ field }) => (\n                      <div className=\"flex items-center space-x-4 p-4 border border-gray-200 rounded-lg\">\n                        <FormItem className=\"flex items-center space-x-2\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value.selected}\n                              onCheckedChange={(checked) => {\n                                field.onChange({\n                                  ...field.value,\n                                  selected: !!checked,\n                                  quantity: checked ? field.value.quantity || 1 : 0,\n                                });\n                              }}\n                            />\n                          </FormControl>\n                          <FormLabel className=\"text-sm font-medium cursor-pointer\">\n                            {material}\n                          </FormLabel>\n                        </FormItem>\n\n                        {field.value.selected && (\n                          <div className=\"flex items-center space-x-2 flex-1\">\n                            <FormItem className=\"flex-1\">\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  placeholder=\"Gramas\"\n                                  min=\"0\"\n                                  step=\"0.1\"\n                                  value={field.value.quantity || \"\"}\n                                  onChange={(e) => {\n                                    const quantity = parseFloat(e.target.value) || 0;\n                                    field.onChange({\n                                      ...field.value,\n                                      quantity,\n                                    });\n                                  }}\n                                  className=\"w-24\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                            \n                            {field.value.quantity > 0 && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {(field.value.quantity / 1000).toFixed(2)}kg\n                              </Badge>\n                            )}\n\n                            <FormItem className=\"flex-1\">\n                              <FormControl>\n                                <Textarea\n                                  placeholder=\"Observações (opcional)\"\n                                  value={field.value.notes || \"\"}\n                                  onChange={(e) => {\n                                    field.onChange({\n                                      ...field.value,\n                                      notes: e.target.value,\n                                    });\n                                  }}\n                                  className=\"min-h-[60px]\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  />\n                ))}\n              </div>\n\n              <div className=\"flex justify-between items-center pt-4 border-t\">\n                <div className=\"text-sm text-gray-600\">\n                  {watchedMaterials.filter(m => m.selected).length} material(is) selecionado(s)\n                </div>\n                <Button \n                  type=\"submit\" \n                  disabled={saveMaterialsMutation.isPending}\n                  className=\"w-32\"\n                >\n                  {saveMaterialsMutation.isPending ? \"Salvando...\" : \"Salvar Materiais\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9265},"client/src/components/navbar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Droplet, LogOut, User, ShieldQuestion } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport function Navbar() {\n  const { user, logout } = useAuth();\n\n  const getUserIcon = () => {\n    if (user?.userType === 'admin') {\n      return <ShieldQuestion className=\"h-4 w-4\" />;\n    }\n    return <User className=\"h-4 w-4\" />;\n  };\n\n  return (\n    <nav className=\"bg-white shadow-sm border-b border-gray-200\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0 flex items-center\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Droplet className=\"text-white h-4 w-4\" />\n              </div>\n              <span className=\"ml-2 text-xl font-bold text-gray-900\">EccoServ</span>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <span className=\"text-sm text-gray-700\">{user?.name}</span>\n            <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center\">\n              {getUserIcon()}\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={logout}\n              className=\"text-gray-500 hover:text-gray-700\"\n            >\n              <LogOut className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1582},"client/src/components/stats-card.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  variant?: 'primary' | 'success' | 'warning' | 'error';\n}\n\nexport function StatsCard({ title, value, icon: Icon, variant = 'primary' }: StatsCardProps) {\n  const getVariantClasses = () => {\n    switch (variant) {\n      case 'success':\n        return 'bg-success/10 text-success';\n      case 'warning':\n        return 'bg-warning/10 text-warning';\n      case 'error':\n        return 'bg-error/10 text-error';\n      default:\n        return 'bg-primary/10 text-primary';\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-sm p-6 border border-gray-200\">\n      <div className=\"flex items-center\">\n        <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${getVariantClasses()}`}>\n          <Icon className=\"h-6 w-6\" />\n        </div>\n        <div className=\"ml-4\">\n          <p className=\"text-sm font-medium text-gray-600\">{title}</p>\n          <p className=\"text-2xl font-bold text-gray-900\">{value}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1124},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useState, useEffect } from \"react\";\nimport { type UserWithProfile, type LoginRequest } from \"@shared/schema\";\nimport { authService } from \"@/lib/auth\";\n\ninterface AuthContextType {\n  user: UserWithProfile | null;\n  login: (credentials: LoginRequest) => Promise<UserWithProfile>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<UserWithProfile | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const currentUser = authService.getCurrentUser();\n    setUser(currentUser);\n    setIsLoading(false);\n  }, []);\n\n  const login = async (credentials: LoginRequest) => {\n    setIsLoading(true);\n    try {\n      const user = await authService.login(credentials);\n      setUser(user);\n      return user;\n    } catch (error) {\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":1455},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { type UserWithProfile, type LoginRequest } from \"@shared/schema\";\n\nexport class AuthService {\n  private static instance: AuthService;\n  private currentUser: UserWithProfile | null = null;\n\n  static getInstance(): AuthService {\n    if (!AuthService.instance) {\n      AuthService.instance = new AuthService();\n    }\n    return AuthService.instance;\n  }\n\n  async login(credentials: LoginRequest): Promise<UserWithProfile> {\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(credentials),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Login failed');\n    }\n\n    const { user } = await response.json();\n    this.currentUser = user;\n    \n    // Store in localStorage for persistence\n    localStorage.setItem('eccoserv_user', JSON.stringify(user));\n    \n    return user;\n  }\n\n  logout(): void {\n    this.currentUser = null;\n    localStorage.removeItem('eccoserv_user');\n  }\n\n  getCurrentUser(): UserWithProfile | null {\n    if (!this.currentUser) {\n      const stored = localStorage.getItem('eccoserv_user');\n      if (stored) {\n        try {\n          this.currentUser = JSON.parse(stored);\n        } catch (error) {\n          localStorage.removeItem('eccoserv_user');\n        }\n      }\n    }\n    return this.currentUser;\n  }\n\n  isAuthenticated(): boolean {\n    return this.getCurrentUser() !== null;\n  }\n\n  hasRole(role: string): boolean {\n    const user = this.getCurrentUser();\n    return user?.userType === role;\n  }\n}\n\nexport const authService = AuthService.getInstance();\n","size_bytes":1673},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Navbar } from \"@/components/navbar\";\nimport { StatsCard } from \"@/components/stats-card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { ImageViewer } from \"@/components/image-viewer\";\nimport { DocumentViewer } from \"@/components/document-viewer\";\nimport { Users, Droplet, Bolt, CalendarCheck, Check, UserPlus, Clock, FileText, BarChart3, CheckCircle, FlaskConical, Search, MapPin, Camera, TrendingUp, Wrench, Activity, Trash2, Key, Calendar } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type VisitWithDetails, type WellWithClient } from \"@shared/schema\";\nimport { format } from \"date-fns\";\nimport { MaterialConsumptionReport } from \"@/components/material-consumption-report\";\n\nconst providerRegisterSchema = z.object({\n  name: z.string().min(2, \"Nome deve ter pelo menos 2 caracteres\"),\n  email: z.string().email(\"Email inválido\"),\n  password: z.string().min(6, \"Senha deve ter pelo menos 6 caracteres\"),\n  phone: z.string().min(1, \"Telefone é obrigatório\"),\n  specialties: z.string().min(1, \"Especialidades são obrigatórias\"),\n});\n\nconst clientRegisterSchema = z.object({\n  name: z.string().min(2, \"Nome deve ter pelo menos 2 caracteres\"),\n  email: z.string().email(\"Email inválido\"),\n  cpf: z.string().min(11, \"CPF é obrigatório\"),\n  address: z.string().min(5, \"Endereço é obrigatório\"),\n  phone: z.string().min(1, \"Telefone é obrigatório\"),\n});\n\nconst wellRegisterSchema = z.object({\n  clientId: z.string().min(1, \"Cliente é obrigatório\"),\n  name: z.string().min(2, \"Nome do poço é obrigatório\"),\n  type: z.string().min(1, \"Tipo do poço é obrigatório\"),\n  location: z.string().min(5, \"Localização é obrigatória\"),\n  depth: z.string().min(1, \"Profundidade é obrigatória\"),\n  diameter: z.string().min(1, \"Diâmetro é obrigatório\"),\n  installationDate: z.string().min(1, \"Data de instalação é obrigatória\"),\n  description: z.string().optional(),\n});\n\ntype ProviderRegisterForm = z.infer<typeof providerRegisterSchema>;\ntype ClientRegisterForm = z.infer<typeof clientRegisterSchema>;\ntype WellRegisterForm = z.infer<typeof wellRegisterSchema>;\n\ninterface AdminStats {\n  totalClients: number;\n  totalProviders: number;\n  totalWells: number;\n  totalVisits: number;\n  monthlyVisits: number;\n  scheduledVisits?: number;\n}\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [visitFilters, setVisitFilters] = useState({\n    searchQuery: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    status: \"all\",\n    wellId: \"\",\n  });\n\n  // Client search state for well registration\n  const [clientSearch, setClientSearch] = useState(\"\");\n  const [showClientSearch, setShowClientSearch] = useState(false);\n\n  const providerForm = useForm<ProviderRegisterForm>({\n    resolver: zodResolver(providerRegisterSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      phone: \"\",\n      specialties: \"\",\n    },\n  });\n\n  const clientForm = useForm<ClientRegisterForm>({\n    resolver: zodResolver(clientRegisterSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      cpf: \"\",\n      address: \"\",\n      phone: \"\",\n    },\n  });\n\n  const wellForm = useForm<WellRegisterForm>({\n    resolver: zodResolver(wellRegisterSchema),\n    defaultValues: {\n      clientId: \"\",\n      name: \"\",\n      type: \"\",\n      location: \"\",\n      depth: \"\",\n      diameter: \"\",\n      installationDate: \"\",\n      description: \"\",\n    },\n  });\n\n  const { data: stats, refetch: refetchStats } = useQuery<AdminStats>({\n    queryKey: ['/api/admin/stats'],\n    refetchInterval: 5000, // Refetch every 5 seconds\n  });\n\n  const { data: visits, refetch: refetchVisits } = useQuery<{ visits: VisitWithDetails[] }>({\n    queryKey: ['/api/admin/visits'],\n    refetchInterval: 5000, // Refetch every 5 seconds\n  });\n\n  const { data: wells, refetch: refetchWells } = useQuery<{ wells: WellWithClient[] }>({\n    queryKey: ['/api/admin/wells'],\n    refetchInterval: 10000, // Refetch every 10 seconds\n  });\n\n  const { data: providers, refetch: refetchProviders } = useQuery<{ providers: any[] }>({\n    queryKey: ['/api/admin/providers'],\n    refetchInterval: 10000, // Refetch every 10 seconds\n  });\n\n  const { data: scheduledVisits, refetch: refetchScheduledVisits } = useQuery<{ scheduledVisits: any[] }>({\n    queryKey: ['/api/admin/scheduled-visits'],\n    refetchInterval: 5000, // Refetch every 5 seconds\n  });\n\n  const { data: materialConsumption, refetch: refetchMaterialConsumption } = useQuery<{ consumption: any[] }>({\n    queryKey: ['/api/admin/materials/all-consumption'],\n    refetchInterval: 10000, // Refetch every 10 seconds\n  });\n\n  const { data: clients, refetch: refetchClients } = useQuery<{ clients: any[] }>({\n    queryKey: ['/api/admin/clients'],\n    refetchInterval: 10000, // Refetch every 10 seconds\n  });\n\n  // Filter clients based on search term (name or CPF)\n  const filteredClients = clients?.clients?.filter((client) => {\n    if (!clientSearch) return true;\n    const searchTerm = clientSearch.toLowerCase();\n    return (\n      client.user.name.toLowerCase().includes(searchTerm) ||\n      client.cpf.toLowerCase().includes(searchTerm)\n    );\n  }) || [];\n\n  const registerProviderMutation = useMutation({\n    mutationFn: async (data: ProviderRegisterForm) => {\n      const userData = {\n        name: data.name,\n        email: data.email,\n        password: data.password,\n        userType: \"provider\",\n      };\n\n      // Register user\n      const userResponse = await apiRequest('POST', '/api/register', userData);\n      const user = await userResponse.json();\n\n      // Create provider profile\n      await apiRequest('POST', '/api/providers', {\n        userId: user.id,\n        specialties: data.specialties.split(',').map(s => s.trim()),\n        phone: data.phone,\n      });\n\n      return userResponse;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Prestador cadastrado com sucesso!\",\n        description: \"O prestador foi adicionado ao sistema.\",\n      });\n      providerForm.reset();\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/providers'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro no cadastro\",\n        description: error.message || \"Ocorreu um erro ao cadastrar o prestador.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteProviderMutation = useMutation({\n    mutationFn: async (providerId: string) => {\n      await apiRequest('DELETE', `/api/admin/providers/${providerId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Prestador excluído com sucesso!\",\n        description: \"O prestador foi removido do sistema.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/providers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/visits'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/wells'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao excluir prestador\",\n        description: error.message || \"Ocorreu um erro ao excluir o prestador.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetPasswordMutation = useMutation({\n    mutationFn: async (providerId: string) => {\n      await apiRequest('PUT', `/api/admin/providers/${providerId}/reset-password`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Senha resetada com sucesso!\",\n        description: \"A senha foi alterada para 123456.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao resetar senha\",\n        description: error.message || \"Ocorreu um erro ao resetar a senha.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmitProvider = (data: ProviderRegisterForm) => {\n    registerProviderMutation.mutate(data);\n  };\n\n  const handleDeleteProvider = (providerId: string, providerName: string) => {\n    if (window.confirm(`Tem certeza que deseja excluir o prestador \"${providerName}\"? Esta ação não pode ser desfeita.`)) {\n      deleteProviderMutation.mutate(providerId);\n    }\n  };\n\n  const handleResetPassword = (providerId: string, providerName: string) => {\n    if (window.confirm(`Tem certeza que deseja resetar a senha do prestador \"${providerName}\" para 123456?`)) {\n      resetPasswordMutation.mutate(providerId);\n    }\n  };\n\n  // Reset client password mutation\n  const resetClientPasswordMutation = useMutation({\n    mutationFn: async (clientId: string) => {\n      await apiRequest('POST', `/api/admin/clients/${clientId}/reset-password`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Senha resetada!\",\n        description: \"A senha do cliente foi alterada para '12345'.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao resetar senha\",\n        description: error.message || \"Não foi possível resetar a senha do cliente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetClientPassword = (clientId: string, clientName: string) => {\n    if (confirm(`Tem certeza que deseja resetar a senha de ${clientName} para '12345'?`)) {\n      resetClientPasswordMutation.mutate(clientId);\n    }\n  };\n\n  // Client registration mutation\n  const registerClientMutation = useMutation({\n    mutationFn: async (data: ClientRegisterForm) => {\n      const response = await fetch('/api/clients', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...data,\n          password: \"123456\", // Senha padrão\n        }),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erro ao cadastrar cliente');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Cliente cadastrado com sucesso!\",\n        description: \"Cliente criado com senha padrão: 123456\",\n      });\n      clientForm.reset();\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/clients'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro no cadastro\",\n        description: error.message || \"Erro ao cadastrar cliente\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Well registration mutation\n  const registerWellMutation = useMutation({\n    mutationFn: async (data: WellRegisterForm) => {\n      const wellData = {\n        ...data,\n        depth: parseFloat(data.depth),\n        diameter: parseFloat(data.diameter),\n        status: \"active\",\n      };\n      const response = await fetch('/api/wells', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(wellData),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erro ao cadastrar poço');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Poço cadastrado com sucesso!\",\n        description: \"O poço foi adicionado ao sistema.\",\n      });\n      wellForm.reset();\n      setClientSearch(\"\");\n      setShowClientSearch(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/wells'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro no cadastro\",\n        description: error.message || \"Erro ao cadastrar poço\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      active: { label: \"Ativo\", className: \"bg-success/10 text-success\" },\n      maintenance: { label: \"Manutenção\", className: \"bg-warning/10 text-warning\" },\n      attention: { label: \"Atenção\", className: \"bg-error/10 text-error\" },\n      inactive: { label: \"Inativo\", className: \"bg-gray-100 text-gray-700\" },\n    };\n    \n    const variant = variants[status as keyof typeof variants] || variants.active;\n    return <Badge className={variant.className}>{variant.label}</Badge>;\n  };\n\n  // Filter visits based on admin filters\n  const filteredVisits = visits?.visits.filter(visit => {\n    const matchesSearch = !visitFilters.searchQuery || \n      visit.id.toLowerCase().includes(visitFilters.searchQuery.toLowerCase()) ||\n      visit.well.name.toLowerCase().includes(visitFilters.searchQuery.toLowerCase()) ||\n      visit.well.client.user.name.toLowerCase().includes(visitFilters.searchQuery.toLowerCase()) ||\n      visit.provider.user.name.toLowerCase().includes(visitFilters.searchQuery.toLowerCase()) ||\n      visit.observations.toLowerCase().includes(visitFilters.searchQuery.toLowerCase());\n    \n    const matchesStatus = !visitFilters.status || visitFilters.status === 'all' || visit.status === visitFilters.status;\n    const matchesWell = !visitFilters.wellId || visit.wellId === visitFilters.wellId;\n    \n    const matchesDate = (!visitFilters.startDate || new Date(visit.visitDate) >= new Date(visitFilters.startDate)) &&\n      (!visitFilters.endDate || new Date(visit.visitDate) <= new Date(visitFilters.endDate));\n    \n    return matchesSearch && matchesStatus && matchesWell && matchesDate;\n  }) || [];\n\n  const getWellStatusBadge = (status: string) => {\n    const variants = {\n      active: { label: \"Ativo\", className: \"bg-green-100 text-green-800\" },\n      inactive: { label: \"Inativo\", className: \"bg-gray-100 text-gray-800\" },\n      maintenance: { label: \"Em Manutenção\", className: \"bg-yellow-100 text-yellow-800\" },\n      problem: { label: \"Com Problema\", className: \"bg-red-100 text-red-800\" },\n    };\n    \n    const variant = variants[status as keyof typeof variants] || variants.active;\n    return <Badge className={variant.className}>{variant.label}</Badge>;\n  };\n\n  const getVisitStatusBadge = (status: string) => {\n    const variants = {\n      completed: { label: \"Concluído\", className: \"bg-green-100 text-green-800\" },\n      in_progress: { label: \"Em Andamento\", className: \"bg-blue-100 text-blue-800\" },\n      pending: { label: \"Pendente\", className: \"bg-yellow-100 text-yellow-800\" },\n      cancelled: { label: \"Cancelado\", className: \"bg-red-100 text-red-800\" },\n    };\n    \n    const variant = variants[status as keyof typeof variants] || variants.pending;\n    return <Badge className={variant.className}>{variant.label}</Badge>;\n  };\n\n  const getServiceTypeLabel = (serviceType: string) => {\n    const labels = {\n      'manutencao-preventiva': 'Manutenção Preventiva',\n      'manutencao-corretiva': 'Manutenção Corretiva',\n      'limpeza': 'Limpeza',\n      'instalacao': 'Instalação',\n      'reparo': 'Reparo',\n      'inspecao': 'Inspeção',\n    };\n    return labels[serviceType as keyof typeof labels] || serviceType;\n  };\n\n  // Calculate stats from actual data\n  const completedVisits = visits?.visits.filter(v => v.status === 'completed').length || 0;\n  const pendingVisits = visits?.visits.filter(v => v.status === 'pending').length || 0;\n  const inProgressVisits = visits?.visits.filter(v => v.status === 'in_progress').length || 0;\n  const activeWells = wells?.wells.filter(w => w.status === 'active').length || 0;\n\n  const totalScheduled = scheduledVisits?.scheduledVisits?.length || 0;\n\n  // Manual refresh function\n  const handleRefreshAll = () => {\n    refetchStats();\n    refetchVisits();\n    refetchWells();\n    refetchProviders();\n    refetchScheduledVisits();\n    refetchMaterialConsumption();\n    refetchClients();\n    toast({\n      title: \"Dados atualizados!\",\n      description: \"Todas as informações foram recarregadas.\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8 flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Painel Administrativo</h1>\n            <p className=\"text-gray-600 mt-2\">Bem-vindo, {user?.name}!</p>\n          </div>\n          <Button onClick={handleRefreshAll} variant=\"outline\" className=\"flex items-center gap-2\">\n            <Activity className=\"h-4 w-4\" />\n            Atualizar Dados\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8\">\n          <StatsCard\n            title=\"Total de Clientes\"\n            value={stats?.totalClients || 0}\n            icon={Users}\n            variant=\"primary\"\n          />\n          <StatsCard\n            title=\"Prestadores Ativos\"\n            value={stats?.totalProviders || 0}\n            icon={Bolt}\n            variant=\"success\"\n          />\n          <StatsCard\n            title=\"Total de Poços\"\n            value={stats?.totalWells || 0}\n            icon={Droplet}\n            variant=\"primary\"\n          />\n          <StatsCard\n            title=\"Total de Visitas\"\n            value={stats?.totalVisits || 0}\n            icon={CheckCircle}\n            variant=\"success\"\n          />\n          <StatsCard\n            title=\"Agendamentos\"\n            value={stats?.scheduledVisits || 0}\n            icon={Calendar}\n            variant=\"warning\"\n          />\n\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <div className=\"overflow-x-auto\">\n            <TabsList className=\"inline-flex w-max min-w-full h-auto p-1 space-x-1\">\n              <TabsTrigger value=\"overview\" className=\"whitespace-nowrap px-3 py-2 text-sm\">\n                Visão Geral\n              </TabsTrigger>\n              <TabsTrigger value=\"visits\" className=\"whitespace-nowrap px-3 py-2 text-sm\">\n                Visitas\n              </TabsTrigger>\n              <TabsTrigger value=\"scheduled\" className=\"whitespace-nowrap px-3 py-2 text-sm\">\n                Agendamentos\n              </TabsTrigger>\n              <TabsTrigger value=\"clients\" className=\"whitespace-nowrap px-3 py-2 text-sm\">\n                Clientes\n              </TabsTrigger>\n              <TabsTrigger value=\"wells\" className=\"whitespace-nowrap px-3 py-2 text-sm\">\n                Poços\n              </TabsTrigger>\n              <TabsTrigger value=\"materials\" className=\"whitespace-nowrap px-3 py-2 text-sm\">\n                Materiais\n              </TabsTrigger>\n              <TabsTrigger value=\"providers\" className=\"whitespace-nowrap px-3 py-2 text-sm\">\n                Prestadores\n              </TabsTrigger>\n              <TabsTrigger value=\"register\" className=\"whitespace-nowrap px-3 py-2 text-sm\">\n                Cadastrar Prestador\n              </TabsTrigger>\n              <TabsTrigger value=\"register-client\" className=\"whitespace-nowrap px-3 py-2 text-sm\">\n                Cadastrar Cliente\n              </TabsTrigger>\n              <TabsTrigger value=\"register-well\" className=\"whitespace-nowrap px-3 py-2 text-sm\">\n                Cadastrar Poço\n              </TabsTrigger>\n            </TabsList>\n          </div>\n\n          <TabsContent value=\"overview\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Visitas Recentes */}\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"p-6 border-b border-gray-200\">\n                  <h2 className=\"text-xl font-semibold text-gray-900\">Visitas Recentes</h2>\n                </div>\n                \n                <div className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    {visits?.visits.slice(0, 5).map((visit) => (\n                      <div key={visit.id} className=\"flex items-start space-x-3 p-3 border border-gray-200 rounded-lg\">\n                        <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium text-gray-900\">\n                            {visit.id} - {visit.well.name}\n                          </p>\n                          <p className=\"text-xs text-gray-600\">\n                            Cliente: {visit.well.client.user.name} • Técnico: {visit.provider.user.name}\n                          </p>\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            {format(new Date(visit.visitDate), 'dd/MM/yyyy HH:mm')} • {getServiceTypeLabel(visit.serviceType)}\n                          </p>\n                        </div>\n                        {getVisitStatusBadge(visit.status)}\n                      </div>\n                    ))}\n                    \n                    {(!visits?.visits || visits.visits.length === 0) && (\n                      <p className=\"text-center text-gray-500 py-8\">Nenhuma visita registrada.</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Status dos Poços - Resumo */}\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"p-6 border-b border-gray-200\">\n                  <h2 className=\"text-xl font-semibold text-gray-900\">Resumo dos Poços</h2>\n                </div>\n                \n                <div className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    {wells?.wells.slice(0, 6).map((well) => {\n                      const lastVisit = visits?.visits\n                        .filter(v => v.wellId === well.id)\n                        .sort((a, b) => new Date(b.visitDate).getTime() - new Date(a.visitDate).getTime())[0];\n\n                      return (\n                        <div key={well.id} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                              <Droplet className=\"text-blue-600 h-5 w-5\" />\n                            </div>\n                            <div>\n                              <h4 className=\"font-medium text-gray-900\">\n                                {well.name}\n                              </h4>\n                              <p className=\"text-sm text-gray-600\">\n                                {well.client.user.name} • Última visita: {lastVisit ? format(new Date(lastVisit.visitDate), 'dd/MM/yyyy HH:mm') : 'N/A'}\n                              </p>\n                            </div>\n                          </div>\n                          {getWellStatusBadge(well.status)}\n                        </div>\n                      );\n                    })}\n                    \n                    {(!wells?.wells || wells.wells.length === 0) && (\n                      <p className=\"text-center text-gray-500\">Nenhum poço cadastrado.</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Tab de Visitas Completas */}\n          <TabsContent value=\"visits\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <div className=\"p-6 border-b border-gray-200\">\n                <div className=\"flex justify-between items-center\">\n                  <h2 className=\"text-xl font-semibold text-gray-900\">Todas as Visitas ({visits?.visits?.length || 0})</h2>\n                  <div className=\"flex space-x-3\">\n                    <Input \n                      placeholder=\"Buscar por ID, poço, cliente ou técnico...\" \n                      className=\"w-80\"\n                      value={visitFilters.searchQuery}\n                      onChange={(e) => setVisitFilters(prev => ({ ...prev, searchQuery: e.target.value }))}\n                    />\n                    <Select value={visitFilters.status} onValueChange={(value) => setVisitFilters(prev => ({ ...prev, status: value }))}>\n                      <SelectTrigger className=\"w-40\">\n                        <SelectValue placeholder=\"Status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Todos</SelectItem>\n                        <SelectItem value=\"completed\">Concluído</SelectItem>\n                        <SelectItem value=\"pending\">Pendente</SelectItem>\n                        <SelectItem value=\"in_progress\">Em Andamento</SelectItem>\n                        <SelectItem value=\"cancelled\">Cancelado</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {filteredVisits.map((visit) => (\n                    <div key={visit.id} className=\"border border-gray-200 rounded-lg p-6\">\n                      <div className=\"flex justify-between items-start mb-4\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-3 mb-2\">\n                            <h4 className=\"font-semibold text-gray-900 text-lg\">\n                              Visita {visit.id}\n                            </h4>\n                            {getVisitStatusBadge(visit.status)}\n                          </div>\n                          <div className=\"grid grid-cols-2 gap-4 text-sm text-gray-600\">\n                            <div>\n                              <p><strong>Cliente:</strong> {visit.well.client.user.name}</p>\n                              <p><strong>Poço:</strong> {visit.well.name}</p>\n                              <p><strong>Localização:</strong> {visit.well.location}</p>\n                            </div>\n                            <div>\n                              <p><strong>Técnico:</strong> {visit.provider.user.name}</p>\n                              <p><strong>Data:</strong> {format(new Date(visit.visitDate), 'dd/MM/yyyy HH:mm')}</p>\n                              <p><strong>Tipo:</strong> {getServiceTypeLabel(visit.serviceType)}</p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {visit.observations && (\n                        <div className=\"mb-4\">\n                          <p className=\"text-sm text-gray-700\"><strong>Observações:</strong> {visit.observations}</p>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex space-x-4 mb-4\">\n                        {visit.photos && visit.photos.length > 0 && (\n                          <div className=\"flex-1\">\n                            <ImageViewer \n                              images={visit.photos} \n                              trigger={\n                                <Button variant=\"outline\" size=\"sm\">\n                                  <Camera className=\"h-4 w-4 mr-1\" />\n                                  Ver Fotos ({visit.photos.length})\n                                </Button>\n                              }\n                            />\n                          </div>\n                        )}\n                        {visit.documents && visit.documents.length > 0 && (\n                          <div className=\"flex-1\">\n                            <DocumentViewer \n                              documents={visit.documents} \n                              trigger={\n                                <Button variant=\"outline\" size=\"sm\">\n                                  <FileText className=\"h-4 w-4 mr-1\" />\n                                  Baixar Documentos ({visit.documents.length})\n                                </Button>\n                              }\n                            />\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {filteredVisits.length === 0 && (\n                    <div className=\"text-center py-12\">\n                      <Activity className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-500\">Nenhuma visita encontrada com os filtros aplicados.</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"wells\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <div className=\"p-6 border-b border-gray-200\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">Gerenciamento de Poços</h2>\n              </div>\n              \n              <div className=\"p-6\">\n                <div className=\"grid gap-4\">\n                  {wells?.wells.map((well) => {\n                    const lastVisit = visits?.visits\n                      .filter(v => v.wellId === well.id)\n                      .sort((a, b) => new Date(b.visitDate).getTime() - new Date(a.visitDate).getTime())[0];\n\n                    return (\n                      <div key={well.id} className=\"border border-gray-200 rounded-lg p-6\">\n                        <div className=\"flex justify-between items-start mb-4\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold text-gray-900 text-lg\">{well.name}</h4>\n                            <p className=\"text-sm text-gray-600 mt-1\">\n                              Cliente: {well.client.user.name} • Localização: {well.location}\n                            </p>\n                            <p className=\"text-sm text-gray-600\">\n                              Tipo: {well.type || 'N/A'}\n                            </p>\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            {getWellStatusBadge(well.status)}\n                          </div>\n                        </div>\n                        \n                        <div className=\"text-sm text-gray-600\">\n                          <p><strong>Última Manutenção:</strong> {lastVisit ? format(new Date(lastVisit.visitDate), 'dd/MM/yyyy HH:mm') : 'Nunca'}</p>\n                          <p><strong>Status:</strong> {well.status}</p>\n                        </div>\n                      </div>\n                    );\n                  })}\n                  \n                  {(!wells?.wells || wells.wells.length === 0) && (\n                    <div className=\"text-center py-12\">\n                      <Droplet className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-500\">Nenhum poço cadastrado.</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"scheduled\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <div className=\"p-6 border-b border-gray-200\">\n                <div className=\"flex items-center justify-between\">\n                  <h2 className=\"text-xl font-semibold text-gray-900\">Agendamentos Futuros</h2>\n                  <div className=\"text-sm text-gray-500\">\n                    Total: {scheduledVisits?.scheduledVisits?.length || 0} agendamentos\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {scheduledVisits?.scheduledVisits && scheduledVisits.scheduledVisits.length > 0 ? (\n                    scheduledVisits.scheduledVisits.map((scheduled) => (\n                      <div key={scheduled.id} className=\"bg-blue-50 rounded-lg p-4 border border-blue-200\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold text-gray-900 text-lg\">\n                              {scheduled.well?.name || 'Poço sem nome'}\n                            </h4>\n                            <p className=\"text-sm text-gray-600 mt-1\">\n                              Cliente: {scheduled.well?.client?.user?.name || 'N/A'} • \n                              Prestador: {scheduled.provider?.user?.name || 'N/A'}\n                            </p>\n                            <p className=\"text-sm text-gray-600\">\n                              <strong>Data:</strong> {format(new Date(scheduled.scheduledDate), 'dd/MM/yyyy HH:mm')} • \n                              <strong>Tipo:</strong> {scheduled.visitType}\n                            </p>\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                              Agendado\n                            </span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"mt-3 text-sm text-gray-600\">\n                          <p><strong>Localização:</strong> {scheduled.well?.location || 'N/A'}</p>\n                          <p><strong>Status do Poço:</strong> {scheduled.well?.status || 'N/A'}</p>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-12\">\n                      <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-500\">\n                        {scheduledVisits ? 'Nenhum agendamento futuro.' : 'Carregando agendamentos...'}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"clients\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <div className=\"p-6 border-b border-gray-200\">\n                <div className=\"flex items-center justify-between\">\n                  <h2 className=\"text-xl font-semibold text-gray-900\">Todos os Clientes do Sistema</h2>\n                  <div className=\"text-sm text-gray-500\">\n                    Total: {clients?.clients?.length || 0} clientes\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {clients?.clients && clients.clients.length > 0 ? (\n                    clients.clients.map((client) => {\n                      const clientWells = wells?.wells?.filter(w => w.clientId === client.id) || [];\n                      const clientVisits = visits?.visits?.filter(v => clientWells.some(w => w.id === v.wellId)) || [];\n                      const lastVisit = clientVisits\n                        .sort((a, b) => new Date(b.visitDate).getTime() - new Date(a.visitDate).getTime())[0];\n\n                      return (\n                        <div key={client.id} className=\"bg-gray-50 rounded-lg p-4 border border-gray-200\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-semibold text-gray-900 text-lg\">\n                                {client.user.name}\n                              </h4>\n                              <p className=\"text-sm text-gray-600 mt-1\">\n                                <strong>Email:</strong> {client.user.email} • \n                                <strong>Telefone:</strong> {client.phone || 'N/A'}\n                              </p>\n                              <p className=\"text-sm text-gray-600\">\n                                <strong>Endereço:</strong> {client.address || 'N/A'}\n                              </p>\n                              <div className=\"mt-2 flex items-center space-x-4 text-sm text-gray-600\">\n                                <span><strong>Poços:</strong> {clientWells.length}</span>\n                                <span><strong>Visitas:</strong> {clientVisits.length}</span>\n                                <span><strong>Última visita:</strong> {lastVisit ? format(new Date(lastVisit.visitDate), 'dd/MM/yyyy HH:mm') : 'Nunca'}</span>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-3\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => resetClientPassword(client.id, client.user.name)}\n                                className=\"text-xs px-3 py-1 h-7\"\n                              >\n                                <Key className=\"h-3 w-3 mr-1\" />\n                                Resetar Senha\n                              </Button>\n                              <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                                Ativo\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })\n                  ) : (\n                    <div className=\"text-center py-12\">\n                      <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-500\">\n                        {clients ? 'Nenhum cliente cadastrado.' : 'Carregando clientes...'}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"materials\">\n            <div className=\"space-y-6\">\n              \n              {/* Resumo do Consumo Total */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n                  <div className=\"flex items-center\">\n                    <BarChart3 className=\"h-8 w-8 text-blue-600\" />\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-gray-500\">Total Consumido</p>\n                      <p className=\"text-2xl font-bold text-gray-900\">\n                        {materialConsumption?.consumption?.reduce((acc, item) => acc + item.totalKilograms, 0).toFixed(1) || 0} kg\n                      </p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n                  <div className=\"flex items-center\">\n                    <Activity className=\"h-8 w-8 text-green-600\" />\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-gray-500\">Tipos de Materiais</p>\n                      <p className=\"text-2xl font-bold text-gray-900\">\n                        {materialConsumption?.consumption?.length || 0}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n                  <div className=\"flex items-center\">\n                    <TrendingUp className=\"h-8 w-8 text-purple-600\" />\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-gray-500\">Maior Consumo</p>\n                      <p className=\"text-2xl font-bold text-gray-900\">\n                        {materialConsumption?.consumption?.[0]?.materialType || 'N/A'}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Gráfico de Consumo Total de Materiais */}\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"p-6 border-b border-gray-200\">\n                  <div className=\"flex justify-between items-center\">\n                    <h2 className=\"text-xl font-semibold text-gray-900\">Consumo por Material (Quilogramas)</h2>\n                    <div className=\"text-sm text-gray-500\">\n                      Dados de {visits?.visits?.length || 0} visitas realizadas\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"p-6\">\n                  {materialConsumption?.consumption && materialConsumption.consumption.length > 0 ? (\n                    <div className=\"space-y-6\">\n                      {materialConsumption.consumption.map((item, index) => {\n                        const maxQuantity = Math.max(...materialConsumption.consumption.map(c => c.totalKilograms));\n                        const percentage = maxQuantity > 0 ? (item.totalKilograms / maxQuantity) * 100 : 0;\n                        \n                        return (\n                          <div key={index} className=\"space-y-3\">\n                            <div className=\"flex justify-between items-start\">\n                              <div className=\"flex-1\">\n                                <span className=\"font-semibold text-gray-900 text-lg\">{item.materialType}</span>\n                                <div className=\"flex items-center gap-4 mt-1 text-sm text-gray-600\">\n                                  <span>• {item.visitCount} visitas</span>\n                                  <span>• Média: {item.averagePerVisit}g por visita</span>\n                                  <span>• Total: {item.totalGrams?.toLocaleString() || 0}g</span>\n                                </div>\n                              </div>\n                              <div className=\"text-right\">\n                                <div className=\"font-bold text-2xl text-blue-600\">{item.totalKilograms} kg</div>\n                                <div className=\"text-sm text-gray-500\">\n                                  {percentage.toFixed(1)}% do total\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                              <div \n                                className=\"bg-gradient-to-r from-blue-500 to-blue-600 h-4 rounded-full transition-all duration-500 flex items-center justify-end pr-2\" \n                                style={{ width: `${Math.max(percentage, 5)}%` }}\n                              >\n                                {percentage > 15 && (\n                                  <span className=\"text-white text-xs font-medium\">\n                                    {item.totalKilograms} kg\n                                  </span>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-12\">\n                      <BarChart3 className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-500 text-lg\">\n                        {materialConsumption ? 'Nenhum consumo de materiais registrado ainda.' : 'Carregando dados de consumo...'}\n                      </p>\n                      <p className=\"text-gray-400 text-sm mt-2\">\n                        Os dados aparecerão quando os prestadores registrarem visitas com materiais utilizados.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"providers\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <div className=\"p-6 border-b border-gray-200\">\n                <div className=\"flex items-center justify-between\">\n                  <h2 className=\"text-xl font-semibold text-gray-900\">Prestadores Cadastrados</h2>\n                  <div className=\"text-sm text-gray-500\">\n                    Total: {providers?.providers?.length || 0} prestadores\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {providers?.providers && providers.providers.length > 0 ? (\n                    providers.providers.map((provider) => (\n                      <div key={provider.id} className=\"bg-gray-50 rounded-lg p-4 border border-gray-200\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold text-gray-900 text-lg\">{provider.user.name}</h4>\n                            <p className=\"text-sm text-gray-600 mt-1\">\n                              Email: {provider.user.email} • Telefone: {provider.phone || 'Não informado'}\n                            </p>\n                            <div className=\"mt-2\">\n                              <p className=\"text-sm text-gray-700\">\n                                <strong>Especialidades:</strong> {provider.specialties?.join(', ') || 'Não informado'}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleResetPassword(provider.id, provider.user.name)}\n                              disabled={resetPasswordMutation.isPending}\n                              className=\"text-blue-600 hover:text-blue-700\"\n                            >\n                              <Key className=\"h-4 w-4 mr-1\" />\n                              Resetar Senha\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleDeleteProvider(provider.id, provider.user.name)}\n                              disabled={deleteProviderMutation.isPending}\n                              className=\"text-red-600 hover:text-red-700\"\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-1\" />\n                              Excluir\n                            </Button>\n                            <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                              Ativo\n                            </span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"mt-3 text-sm text-gray-600\">\n                          <p><strong>ID do Prestador:</strong> {provider.id}</p>\n                          <p><strong>Cadastrado em:</strong> {provider.user.userType}</p>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-12\">\n                      <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-500\">\n                        {providers ? 'Nenhum prestador cadastrado ainda.' : 'Carregando prestadores...'}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"register\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <UserPlus className=\"h-5 w-5\" />\n                  <span>Cadastrar Prestador de Serviço</span>\n                </CardTitle>\n                <CardDescription>\n                  Apenas administradores podem cadastrar novos prestadores de serviço no sistema.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...providerForm}>\n                  <form onSubmit={providerForm.handleSubmit(onSubmitProvider)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={providerForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nome Completo</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Digite o nome completo\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={providerForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"email\" \n                                placeholder=\"Digite o email\" \n                                {...field}\n                                onChange={(e) => {\n                                  field.onChange(e.target.value.toLowerCase());\n                                }}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={providerForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Senha</FormLabel>\n                            <FormControl>\n                              <Input type=\"password\" placeholder=\"Digite a senha\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={providerForm.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Telefone</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"(00) 00000-0000\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={providerForm.control}\n                      name=\"specialties\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Especialidades</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Ex: Manutenção preventiva, Limpeza de poços, Troca de bombas (separadas por vírgula)\" \n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={registerProviderMutation.isPending}\n                    >\n                      {registerProviderMutation.isPending ? \"Cadastrando...\" : \"Cadastrar Prestador\"}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"register-client\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <UserPlus className=\"h-5 w-5\" />\n                  Cadastrar Novo Cliente\n                </CardTitle>\n                <CardDescription>\n                  Adicione um novo cliente ao sistema com senha padrão 123456\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...clientForm}>\n                  <form onSubmit={clientForm.handleSubmit((data) => registerClientMutation.mutate(data))} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={clientForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nome Completo *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"João da Silva\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={clientForm.control}\n                        name=\"cpf\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>CPF *</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"000.000.000-00\" \n                                {...field}\n                                onChange={(e) => {\n                                  // Auto format CPF\n                                  let value = e.target.value.replace(/\\D/g, '');\n                                  if (value.length <= 11) {\n                                    value = value.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, '$1.$2.$3-$4');\n                                    field.onChange(value);\n                                  }\n                                }}\n                                maxLength={14}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={clientForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email *</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"joao@email.com\" \n                                type=\"email\" \n                                {...field}\n                                onChange={(e) => {\n                                  field.onChange(e.target.value.toLowerCase());\n                                }}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={clientForm.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Telefone *</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"(11) 99999-9999\" \n                                {...field}\n                                onChange={(e) => {\n                                  // Auto format phone\n                                  let value = e.target.value.replace(/\\D/g, '');\n                                  if (value.length <= 11) {\n                                    if (value.length <= 10) {\n                                      value = value.replace(/(\\d{2})(\\d{4})(\\d{4})/, '($1) $2-$3');\n                                    } else {\n                                      value = value.replace(/(\\d{2})(\\d{5})(\\d{4})/, '($1) $2-$3');\n                                    }\n                                    field.onChange(value);\n                                  }\n                                }}\n                                maxLength={15}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <FormField\n                      control={clientForm.control}\n                      name=\"address\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Endereço Completo *</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Rua das Flores, 123, Centro, São Paulo - SP, CEP: 01234-567\" \n                              {...field} \n                              rows={3}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                      <div className=\"flex items-start\">\n                        <div className=\"flex-shrink-0\">\n                          <div className=\"w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center\">\n                            <span className=\"text-blue-600 text-sm font-semibold\">i</span>\n                          </div>\n                        </div>\n                        <div className=\"ml-3\">\n                          <h3 className=\"text-sm font-medium text-blue-800\">Senha Padrão</h3>\n                          <p className=\"text-sm text-blue-700 mt-1\">\n                            O cliente será criado com a senha padrão <strong>123456</strong>. \n                            Ele poderá alterar a senha após o primeiro login.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={registerClientMutation.isPending}\n                    >\n                      {registerClientMutation.isPending ? \"Cadastrando...\" : \"Cadastrar Cliente\"}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"register-well\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Droplet className=\"h-5 w-5\" />\n                  Cadastrar Novo Poço\n                </CardTitle>\n                <CardDescription>\n                  Adicione um novo poço para um cliente existente\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...wellForm}>\n                  <form onSubmit={wellForm.handleSubmit((data) => registerWellMutation.mutate(data))} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={wellForm.control}\n                        name=\"clientId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Cliente *</FormLabel>\n                            <FormControl>\n                              <div className=\"space-y-2\">\n                                <div className=\"flex gap-2\">\n                                  <Input\n                                    placeholder=\"Buscar por nome ou CPF...\"\n                                    value={clientSearch}\n                                    onChange={(e) => setClientSearch(e.target.value)}\n                                    className=\"flex-1\"\n                                  />\n                                  <Button \n                                    type=\"button\"\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => setShowClientSearch(!showClientSearch)}\n                                  >\n                                    <Search className=\"h-4 w-4\" />\n                                  </Button>\n                                </div>\n                                {(showClientSearch || clientSearch) && (\n                                  <div className=\"border rounded-md max-h-40 overflow-y-auto\">\n                                    {!clients?.clients ? (\n                                      <div className=\"p-3 text-sm text-gray-500\">Carregando clientes...</div>\n                                    ) : filteredClients.length > 0 ? (\n                                      filteredClients.map((client) => (\n                                        <div\n                                          key={client.id}\n                                          className={`p-3 hover:bg-gray-50 cursor-pointer border-b last:border-b-0 ${\n                                            field.value === client.id ? 'bg-blue-50 border-blue-200' : ''\n                                          }`}\n                                          onClick={() => {\n                                            field.onChange(client.id);\n                                            setShowClientSearch(false);\n                                            setClientSearch(client.user.name);\n                                          }}\n                                        >\n                                          <div className=\"font-medium text-sm\">{client.user.name}</div>\n                                          <div className=\"text-xs text-gray-500\">CPF: {client.cpf}</div>\n                                          <div className=\"text-xs text-gray-500\">{client.address}</div>\n                                        </div>\n                                      ))\n                                    ) : (\n                                      <div className=\"p-3 text-sm text-gray-500\">\n                                        {clientSearch ? 'Nenhum cliente encontrado para esta busca' : 'Nenhum cliente encontrado'}\n                                      </div>\n                                    )}\n                                  </div>\n                                )}\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={wellForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nome do Poço *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Ex: Poço Principal\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={wellForm.control}\n                        name=\"type\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Tipo do Poço *</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Selecione o tipo...\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"artesiano\">Artesiano</SelectItem>\n                                <SelectItem value=\"semi-artesiano\">Semi-artesiano</SelectItem>\n                                <SelectItem value=\"freático\">Freático</SelectItem>\n                                <SelectItem value=\"tubular\">Tubular</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={wellForm.control}\n                        name=\"location\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Localização *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Endereço completo do poço\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <FormField\n                        control={wellForm.control}\n                        name=\"depth\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Profundidade (m) *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"100\" type=\"number\" step=\"0.1\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={wellForm.control}\n                        name=\"diameter\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Diâmetro (cm) *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"15\" type=\"number\" step=\"0.1\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={wellForm.control}\n                        name=\"installationDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Data de Instalação *</FormLabel>\n                            <FormControl>\n                              <Input type=\"date\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <FormField\n                      control={wellForm.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Descrição (Opcional)</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Observações sobre o poço...\" \n                              {...field} \n                              rows={3}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={registerWellMutation.isPending}\n                    >\n                      {registerWellMutation.isPending ? \"Cadastrando...\" : \"Cadastrar Poço\"}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":70942},"client/src/pages/client-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Navbar } from \"@/components/navbar\";\nimport { StatsCard } from \"@/components/stats-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { ImageViewer } from \"@/components/image-viewer\";\nimport { DocumentViewer } from \"@/components/document-viewer\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Droplet, CheckCircle, Clock, Search, Calendar, Wrench, MapPin, Camera, AlertCircle, Plus } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type VisitWithDetails, type ScheduledVisitWithDetails, type Well } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\n// Schema for well creation\nconst wellSchema = z.object({\n  name: z.string().min(1, \"Nome do poço é obrigatório\"),\n  type: z.string().min(1, \"Tipo do poço é obrigatório\"),\n  location: z.string().min(1, \"Localização é obrigatória\"),\n  depth: z.string().min(1, \"Profundidade é obrigatória\"),\n  diameter: z.string().min(1, \"Diâmetro é obrigatório\"),\n  installationDate: z.string().min(1, \"Data de instalação é obrigatória\"),\n  description: z.string().optional(),\n});\n\ntype WellFormData = z.infer<typeof wellSchema>;\n\nexport default function ClientDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [visitFilters, setVisitFilters] = useState({\n    searchQuery: \"\",\n    startDate: \"\",\n    endDate: \"\",\n  });\n  const [isWellDialogOpen, setIsWellDialogOpen] = useState(false);\n\n  const { data: visits, isLoading } = useQuery<{ visits: VisitWithDetails[] }>({\n    queryKey: ['/api/clients', user?.client?.id, 'visits'],\n    enabled: !!user?.client?.id,\n  });\n\n  const { data: scheduledVisits, isLoading: isLoadingScheduled } = useQuery<{ scheduledVisits: ScheduledVisitWithDetails[] }>({\n    queryKey: ['/api/clients', user?.client?.id, 'scheduled-visits'],\n    enabled: !!user?.client?.id,\n  });\n\n  // Query for client's wells\n  const { data: wells, refetch: refetchWells } = useQuery<{ wells: Well[] }>({\n    queryKey: ['/api/clients', user?.client?.id, 'wells'],\n    enabled: !!user?.client?.id,\n  });\n\n  // Form for creating wells\n  const wellForm = useForm<WellFormData>({\n    resolver: zodResolver(wellSchema),\n    defaultValues: {\n      name: \"\",\n      type: \"\",\n      location: \"\",\n      depth: \"\",\n      diameter: \"\",\n      installationDate: \"\",\n      description: \"\",\n    },\n  });\n\n  // Mutation for creating wells\n  const createWellMutation = useMutation({\n    mutationFn: async (data: WellFormData) => {\n      const wellData = {\n        ...data,\n        clientId: user?.client?.id,\n        status: 'active' as const,\n        depth: parseFloat(data.depth),\n        diameter: parseFloat(data.diameter),\n        installationDate: new Date(data.installationDate),\n      };\n      return await apiRequest('POST', '/api/wells', wellData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Poço cadastrado com sucesso!\",\n        description: \"O seu poço foi adicionado ao sistema.\",\n      });\n      wellForm.reset();\n      setIsWellDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/clients', user?.client?.id, 'wells'] });\n      refetchWells();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro no cadastro\",\n        description: error.message || \"Ocorreu um erro ao cadastrar o poço.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter visits based on search and date filters\n  const filteredVisits = visits?.visits.filter(visit => {\n    const matchesSearch = !visitFilters.searchQuery || \n      visit.id.toLowerCase().includes(visitFilters.searchQuery.toLowerCase()) ||\n      visit.well.name.toLowerCase().includes(visitFilters.searchQuery.toLowerCase()) ||\n      visit.observations.toLowerCase().includes(visitFilters.searchQuery.toLowerCase());\n    \n    const matchesDate = (!visitFilters.startDate || new Date(visit.visitDate) >= new Date(visitFilters.startDate)) &&\n      (!visitFilters.endDate || new Date(visit.visitDate) <= new Date(visitFilters.endDate));\n    \n    return matchesSearch && matchesDate;\n  }) || [];\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      completed: { label: \"Concluído\", className: \"bg-green-100 text-green-800\" },\n      in_progress: { label: \"Em Andamento\", className: \"bg-blue-100 text-blue-800\" },\n      pending: { label: \"Pendente\", className: \"bg-yellow-100 text-yellow-800\" },\n      cancelled: { label: \"Cancelado\", className: \"bg-red-100 text-red-800\" },\n      scheduled: { label: \"Agendado\", className: \"bg-purple-100 text-purple-800\" },\n    };\n    \n    const variant = variants[status as keyof typeof variants] || variants.pending;\n    return <Badge className={variant.className}>{variant.label}</Badge>;\n  };\n\n  const getServiceTypeLabel = (serviceType: string) => {\n    const labels = {\n      'manutencao-preventiva': 'Manutenção Preventiva',\n      'manutencao-corretiva': 'Manutenção Corretiva',\n      'limpeza': 'Limpeza',\n      'instalacao': 'Instalação',\n      'reparo': 'Reparo',\n      'inspecao': 'Inspeção',\n    };\n    return labels[serviceType as keyof typeof labels] || serviceType;\n  };\n\n  const getWellStatusBadge = (status: string) => {\n    const variants = {\n      active: { label: \"Ativo\", className: \"bg-green-100 text-green-800\" },\n      inactive: { label: \"Inativo\", className: \"bg-gray-100 text-gray-800\" },\n      maintenance: { label: \"Em Manutenção\", className: \"bg-yellow-100 text-yellow-800\" },\n      problem: { label: \"Com Problema\", className: \"bg-red-100 text-red-800\" },\n    };\n    \n    const variant = variants[status as keyof typeof variants] || variants.active;\n    return <Badge className={variant.className}>{variant.label}</Badge>;\n  };\n\n  if (isLoading || isLoadingScheduled) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navbar />\n        <div className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n          <div className=\"text-center py-12\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n            <p className=\"mt-4 text-gray-600\">Carregando dados...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const handleWellSubmit = (data: WellFormData) => {\n    createWellMutation.mutate(data);\n  };\n\n  // Extract unique wells from visits\n  const activeWells = visits?.visits.reduce((acc, visit) => {\n    if (!acc.some(well => well.id === visit.well.id)) {\n      acc.push(visit.well);\n    }\n    return acc;\n  }, [] as any[]) || [];\n\n  const totalVisits = visits?.visits.length || 0;\n  const completedVisits = visits?.visits.filter(v => v.status === 'completed').length || 0;\n  const scheduledVisitsCount = scheduledVisits?.scheduledVisits.length || 0;\n  const lastVisit = visits?.visits\n    .filter(v => v.status === 'completed')\n    .sort((a, b) => new Date(b.visitDate).getTime() - new Date(a.visitDate).getTime())[0];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Painel do Cliente</h1>\n          <p className=\"text-gray-600 mt-2\">Bem-vindo, {user?.name}!</p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <StatsCard\n            title=\"Poços Ativos\"\n            value={activeWells.length}\n            icon={Droplet}\n            variant=\"primary\"\n          />\n          <StatsCard\n            title=\"Visitas Realizadas\"\n            value={completedVisits}\n            icon={CheckCircle}\n            variant=\"success\"\n          />\n          <StatsCard\n            title=\"Visitas Agendadas\"\n            value={scheduledVisitsCount}\n            icon={Calendar}\n            variant=\"warning\"\n          />\n          <StatsCard\n            title=\"Total de Visitas\"\n            value={totalVisits}\n            icon={Wrench}\n            variant=\"primary\"\n          />\n        </div>\n\n        <Tabs defaultValue=\"wells\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"wells\">Poços Ativos</TabsTrigger>\n            <TabsTrigger value=\"visits\">Visitas Prestadas</TabsTrigger>\n            <TabsTrigger value=\"scheduled\">Agendamentos</TabsTrigger>\n          </TabsList>\n\n          {/* Wells Tab */}\n          <TabsContent value=\"wells\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <div className=\"p-6 border-b border-gray-200\">\n                <div className=\"flex justify-between items-center\">\n                  <h2 className=\"text-xl font-semibold text-gray-900\">Meus Poços</h2>\n                  <Dialog open={isWellDialogOpen} onOpenChange={setIsWellDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button className=\"flex items-center gap-2\">\n                        <Plus className=\"h-4 w-4\" />\n                        Cadastrar Novo Poço\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"sm:max-w-[600px]\">\n                      <DialogHeader>\n                        <DialogTitle>Cadastrar Novo Poço</DialogTitle>\n                      </DialogHeader>\n                      <Form {...wellForm}>\n                        <form onSubmit={wellForm.handleSubmit(handleWellSubmit)} className=\"space-y-4\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            <FormField\n                              control={wellForm.control}\n                              name=\"name\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Nome do Poço</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"Ex: Poço Principal\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={wellForm.control}\n                              name=\"type\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Tipo do Poço</FormLabel>\n                                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                    <FormControl>\n                                      <SelectTrigger>\n                                        <SelectValue placeholder=\"Selecione o tipo\" />\n                                      </SelectTrigger>\n                                    </FormControl>\n                                    <SelectContent>\n                                      <SelectItem value=\"artesiano\">Artesiano</SelectItem>\n                                      <SelectItem value=\"semi-artesiano\">Semi-artesiano</SelectItem>\n                                      <SelectItem value=\"freático\">Freático</SelectItem>\n                                      <SelectItem value=\"tubular\">Tubular</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n                          \n                          <FormField\n                            control={wellForm.control}\n                            name=\"location\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Localização</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Endereço completo do poço\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                            <FormField\n                              control={wellForm.control}\n                              name=\"depth\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Profundidade (metros)</FormLabel>\n                                  <FormControl>\n                                    <Input type=\"number\" placeholder=\"Ex: 120\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={wellForm.control}\n                              name=\"diameter\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Diâmetro (polegadas)</FormLabel>\n                                  <FormControl>\n                                    <Input type=\"number\" placeholder=\"Ex: 6\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={wellForm.control}\n                              name=\"installationDate\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Data de Instalação</FormLabel>\n                                  <FormControl>\n                                    <Input type=\"date\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n                          \n                          <FormField\n                            control={wellForm.control}\n                            name=\"description\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Descrição (Opcional)</FormLabel>\n                                <FormControl>\n                                  <Textarea \n                                    placeholder=\"Informações adicionais sobre o poço...\"\n                                    className=\"min-h-[80px]\"\n                                    {...field} \n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                          <div className=\"flex justify-end gap-3 pt-4\">\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              onClick={() => setIsWellDialogOpen(false)}\n                            >\n                              Cancelar\n                            </Button>\n                            <Button \n                              type=\"submit\" \n                              disabled={createWellMutation.isPending}\n                            >\n                              {createWellMutation.isPending ? \"Cadastrando...\" : \"Cadastrar Poço\"}\n                            </Button>\n                          </div>\n                        </form>\n                      </Form>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </div>\n              \n              <div className=\"p-6\">\n                {wells?.wells && wells.wells.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {wells.wells.map((well) => (\n                      <div key={well.id} className=\"bg-gray-50 rounded-lg p-6 border border-gray-200\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex items-center\">\n                            <Droplet className=\"h-6 w-6 text-blue-600 mr-3\" />\n                            <div>\n                              <h3 className=\"font-semibold text-gray-900\">{well.name}</h3>\n                              <p className=\"text-sm text-gray-500 capitalize\">{well.type}</p>\n                            </div>\n                          </div>\n                          {getWellStatusBadge(well.status)}\n                        </div>\n                        <div className=\"space-y-2 text-sm text-gray-600\">\n                          <div className=\"flex items-center\">\n                            <MapPin className=\"h-4 w-4 mr-2\" />\n                            <span className=\"truncate\">{well.location}</span>\n                          </div>\n                          <div className=\"grid grid-cols-2 gap-4 mt-3\">\n                            <div>\n                              <span className=\"font-medium\">Profundidade:</span>\n                              <p>{well.depth}m</p>\n                            </div>\n                            <div>\n                              <span className=\"font-medium\">Diâmetro:</span>\n                              <p>{well.diameter}\"</p>\n                            </div>\n                          </div>\n                          <div className=\"mt-3\">\n                            <span className=\"font-medium\">Instalado em:</span>\n                            <p>{format(new Date(well.installationDate), 'dd/MM/yyyy')}</p>\n                          </div>\n                          {well.description && (\n                            <div className=\"mt-3\">\n                              <span className=\"font-medium\">Descrição:</span>\n                              <p className=\"text-xs text-gray-500 mt-1\">{well.description}</p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Droplet className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">Nenhum poço registrado.</p>\n                    <p className=\"text-gray-400 text-sm mt-2\">\n                      Clique em \"Cadastrar Novo Poço\" para adicionar seu primeiro poço.\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Visits Tab */}\n          <TabsContent value=\"visits\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <div className=\"p-6 border-b border-gray-200\">\n                <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n                  <h2 className=\"text-xl font-semibold text-gray-900\">Histórico de Visitas</h2>\n                  \n                  {/* Search and Filters */}\n                  <div className=\"flex flex-col sm:flex-row gap-2\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        placeholder=\"Buscar visitas...\"\n                        value={visitFilters.searchQuery}\n                        onChange={(e) => setVisitFilters({ ...visitFilters, searchQuery: e.target.value })}\n                        className=\"pl-10 w-full sm:w-auto\"\n                      />\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        type=\"date\"\n                        value={visitFilters.startDate}\n                        onChange={(e) => setVisitFilters({ ...visitFilters, startDate: e.target.value })}\n                        className=\"w-full sm:w-auto\"\n                      />\n                      <Input\n                        type=\"date\"\n                        value={visitFilters.endDate}\n                        onChange={(e) => setVisitFilters({ ...visitFilters, endDate: e.target.value })}\n                        className=\"w-full sm:w-auto\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"p-6\">\n                {filteredVisits.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {activeWells.map((well) => (\n                      <div key={well.id} className=\"border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div>\n                            <h3 className=\"font-semibold text-gray-900\">{well.name}</h3>\n                            <p className=\"text-sm text-gray-600 flex items-center mt-1\">\n                              <MapPin className=\"h-4 w-4 mr-1\" />\n                              {well.location}\n                            </p>\n                          </div>\n                          {getWellStatusBadge(well.status)}\n                        </div>\n                        \n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Tipo:</span>\n                            <span className=\"capitalize\">{well.type}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Última Manutenção:</span>\n                            <span>{well.lastMaintenanceDate ? format(new Date(well.lastMaintenanceDate), 'dd/MM/yyyy') : 'N/A'}</span>\n                          </div>\n                          {lastVisit && lastVisit.well.id === well.id && (\n                            <div className=\"pt-2 border-t border-gray-100\">\n                              <p className=\"text-xs text-gray-500\">Última visita: {format(new Date(lastVisit.visitDate), 'dd/MM/yyyy')}</p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Visits Tab */}\n          <TabsContent value=\"visits\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <div className=\"p-6 border-b border-gray-200\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">Visitas Prestadas</h2>\n              </div>\n              \n              <div className=\"p-6\">\n                {/* Search and Filter Controls */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                  <div className=\"flex flex-col\">\n                    <Label className=\"text-sm text-gray-600 mb-1\">Buscar</Label>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        placeholder=\"ID, poço ou observações...\"\n                        value={visitFilters.searchQuery}\n                        onChange={(e) => setVisitFilters(prev => ({ ...prev, searchQuery: e.target.value }))}\n                        className=\"pl-10\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex flex-col\">\n                    <Label className=\"text-sm text-gray-600 mb-1\">Data início</Label>\n                    <Input\n                      type=\"date\"\n                      value={visitFilters.startDate}\n                      onChange={(e) => setVisitFilters(prev => ({ ...prev, startDate: e.target.value }))}\n                    />\n                  </div>\n                  \n                  <div className=\"flex flex-col\">\n                    <Label className=\"text-sm text-gray-600 mb-1\">Data fim</Label>\n                    <Input\n                      type=\"date\"\n                      value={visitFilters.endDate}\n                      onChange={(e) => setVisitFilters(prev => ({ ...prev, endDate: e.target.value }))}\n                    />\n                  </div>\n                </div>\n                \n                {/* Results info */}\n                <div className=\"text-sm text-gray-500 mb-4\">\n                  Mostrando {filteredVisits.length} de {totalVisits} visitas\n                </div>\n\n                {isLoading ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3].map((i) => (\n                      <div key={i} className=\"border border-gray-200 rounded-lg p-4 animate-pulse\">\n                        <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded mb-2\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : filteredVisits.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Wrench className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">Nenhuma visita encontrada.</p>\n                    {totalVisits > 0 && (\n                      <Button \n                        variant=\"outline\" \n                        className=\"mt-4\"\n                        onClick={() => setVisitFilters({ searchQuery: \"\", startDate: \"\", endDate: \"\" })}\n                      >\n                        Limpar filtros\n                      </Button>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {filteredVisits.map((visit) => (\n                      <div key={visit.id} className=\"border border-gray-200 rounded-lg p-6\">\n                        <div className=\"flex justify-between items-start mb-4\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold text-gray-900 text-lg\">\n                              {visit.well.name} - {getServiceTypeLabel(visit.serviceType)}\n                            </h4>\n                            <p className=\"text-sm text-gray-600 mt-1\">\n                              <span className=\"font-mono bg-gray-100 px-2 py-1 rounded text-xs mr-2\">\n                                ID: {visit.id}\n                              </span>\n                              {format(new Date(visit.visitDate), 'dd/MM/yyyy')} • {visit.well.location}\n                            </p>\n                            <div className=\"flex items-center space-x-4 text-sm text-gray-500 mt-2\">\n                              <span className=\"flex items-center\">\n                                <Camera className=\"h-4 w-4 mr-1\" />\n                                {visit.photos?.length || 0} fotos\n                              </span>\n                              {visit.provider && (\n                                <span>Técnico: {visit.provider.user.name}</span>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            {getStatusBadge(visit.status)}\n                          </div>\n                        </div>\n                        \n                        <p className=\"text-sm text-gray-700 mb-3\">{visit.observations}</p>\n                        \n                        <div className=\"flex justify-end space-x-2\">\n                          {visit.photos && visit.photos.length > 0 && (\n                            <ImageViewer images={visit.photos} className=\"text-sm\" />\n                          )}\n                          {visit.documents && visit.documents.length > 0 && (\n                            <DocumentViewer documents={visit.documents} className=\"text-sm\" />\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Scheduled Visits Tab */}\n          <TabsContent value=\"scheduled\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <div className=\"p-6 border-b border-gray-200\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">Próximos Agendamentos</h2>\n              </div>\n              \n              <div className=\"p-6\">\n                {isLoadingScheduled ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3].map((i) => (\n                      <div key={i} className=\"border border-gray-200 rounded-lg p-4 animate-pulse\">\n                        <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded mb-2\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : !scheduledVisits?.scheduledVisits.length ? (\n                  <div className=\"text-center py-12\">\n                    <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">Nenhum agendamento futuro.</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {scheduledVisits.scheduledVisits.map((scheduled) => (\n                      <div key={scheduled.id} className=\"border border-gray-200 rounded-lg p-6\">\n                        <div className=\"flex justify-between items-start mb-4\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold text-gray-900 text-lg\">\n                              {scheduled.well.name} - {getServiceTypeLabel(scheduled.serviceType)}\n                            </h4>\n                            <p className=\"text-sm text-gray-600 mt-1\">\n                              <span className=\"flex items-center\">\n                                <Calendar className=\"h-4 w-4 mr-1\" />\n                                {format(new Date(scheduled.scheduledDate), 'dd/MM/yyyy HH:mm')}\n                              </span>\n                            </p>\n                            <p className=\"text-sm text-gray-500 mt-1 flex items-center\">\n                              <MapPin className=\"h-4 w-4 mr-1\" />\n                              {scheduled.well.location}\n                            </p>\n                            {scheduled.provider && (\n                              <p className=\"text-sm text-gray-500 mt-1\">\n                                Técnico: {scheduled.provider.user.name}\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            {getStatusBadge(scheduled.status)}\n                          </div>\n                        </div>\n                        \n                        {scheduled.notes && (\n                          <p className=\"text-sm text-gray-700\">{scheduled.notes}</p>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n\n\n","size_bytes":33340},"client/src/pages/index.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Droplets, \n  Wrench, \n  Shield, \n  Clock, \n  Phone, \n  Mail, \n  MapPin, \n  CheckCircle,\n  Users,\n  Award,\n  Zap,\n  ArrowRight,\n  Star\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Home() {\n  const services = [\n    {\n      icon: Wrench,\n      title: \"Manutenção Preventiva\",\n      description: \"Inspeções regulares para garantir o funcionamento ideal do seu poço\",\n      features: [\"Análise de qualidade da água\", \"Verificação de equipamentos\", \"Relatório técnico completo\"]\n    },\n    {\n      icon: Droplets,\n      title: \"Limpeza de Poços\",\n      description: \"Limpeza profissional para manter a pureza e qualidade da água\",\n      features: [\"Remoção de sedimentos\", \"Desinfecção completa\", \"Testes de qualidade\"]\n    },\n    {\n      icon: Shield,\n      title: \"Manutenção Corretiva\",\n      description: \"Reparo rápido e eficiente para problemas em seu sistema\",\n      features: [\"Diagnóstico preciso\", \"Peças originais\", \"Garantia de serviço\"]\n    }\n  ];\n\n  const testimonials = [\n    {\n      name: \"Maria Silva\",\n      location: \"São Paulo, SP\",\n      text: \"Excelente atendimento! Meu poço nunca funcionou tão bem. Equipe muito profissional.\",\n      rating: 5\n    },\n    {\n      name: \"João Santos\",\n      location: \"Campinas, SP\",\n      text: \"Serviço de qualidade com preço justo. Recomendo para todos que precisam de manutenção.\",\n      rating: 5\n    },\n    {\n      name: \"Ana Costa\",\n      location: \"Ribeirão Preto, SP\",\n      text: \"Muito satisfeita com o resultado. Água cristalina e sistema funcionando perfeitamente.\",\n      rating: 5\n    }\n  ];\n\n  const stats = [\n    { icon: Users, number: \"500+\", label: \"Clientes Satisfeitos\" },\n    { icon: Wrench, number: \"1200+\", label: \"Serviços Realizados\" },\n    { icon: Award, number: \"15+\", label: \"Anos de Experiência\" },\n    { icon: Zap, number: \"24h\", label: \"Atendimento de Emergência\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50\">\n      {/* Header/Navbar */}\n      <header className=\"bg-white/80 backdrop-blur-md shadow-sm sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <Droplets className=\"h-8 w-8 text-blue-600\" />\n              <h1 className=\"text-2xl font-bold text-gray-900\">EccoServ</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/login\">\n                <Button variant=\"outline\" className=\"border-blue-600 text-blue-600 hover:bg-blue-50\">\n                  Entrar\n                </Button>\n              </Link>\n              <Button className=\"bg-blue-600 hover:bg-blue-700 text-white\">\n                Solicitar Orçamento\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"relative py-20 lg:py-32\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-8\">\n              <div className=\"space-y-4\">\n                <Badge className=\"bg-blue-100 text-blue-800 hover:bg-blue-100\">\n                  Especialistas em Poços Artesianos\n                </Badge>\n                <h1 className=\"text-4xl lg:text-6xl font-bold text-gray-900 leading-tight\">\n                  Água Pura e \n                  <span className=\"text-blue-600\"> Segura</span> \n                  para sua Casa\n                </h1>\n                <p className=\"text-xl text-gray-600 leading-relaxed\">\n                  Manutenção profissional de poços artesianos com mais de 15 anos de experiência. \n                  Garantimos qualidade, segurança e água cristalina para sua família.\n                </p>\n              </div>\n              \n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button size=\"lg\" className=\"bg-blue-600 hover:bg-blue-700 text-lg px-8\">\n                  Solicitar Orçamento Gratuito\n                  <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Button>\n                <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8\">\n                  <Phone className=\"mr-2 h-5 w-5\" />\n                  (11) 9999-9999\n                </Button>\n              </div>\n\n              <div className=\"flex flex-wrap items-center gap-6 pt-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                  <span className=\"text-gray-600 text-sm\">Atendimento 24h</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                  <span className=\"text-gray-600 text-sm\">Garantia Total</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                  <span className=\"text-gray-600 text-sm\">Orçamento Grátis</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <div className=\"bg-gradient-to-r from-blue-500 to-green-500 rounded-2xl p-8 text-white\">\n                <h3 className=\"text-2xl font-bold mb-4\">Solicite seu Orçamento</h3>\n                <p className=\"mb-6\">Preencha seus dados e receba uma proposta personalizada em até 24 horas.</p>\n                \n                <div className=\"space-y-4\">\n                  <input \n                    type=\"text\" \n                    placeholder=\"Seu nome completo\"\n                    className=\"w-full p-3 rounded-lg text-gray-900 border-0 focus:ring-2 focus:ring-white/50\"\n                  />\n                  <input \n                    type=\"tel\" \n                    placeholder=\"Telefone com WhatsApp\"\n                    className=\"w-full p-3 rounded-lg text-gray-900 border-0 focus:ring-2 focus:ring-white/50\"\n                  />\n                  <input \n                    type=\"text\" \n                    placeholder=\"Cidade e bairro\"\n                    className=\"w-full p-3 rounded-lg text-gray-900 border-0 focus:ring-2 focus:ring-white/50\"\n                  />\n                  <select className=\"w-full p-3 rounded-lg text-gray-900 border-0 focus:ring-2 focus:ring-white/50\">\n                    <option>Tipo de serviço necessário</option>\n                    <option>Manutenção Preventiva</option>\n                    <option>Limpeza de Poço</option>\n                    <option>Manutenção Corretiva</option>\n                    <option>Instalação Nova</option>\n                    <option>Inspeção Técnica</option>\n                  </select>\n                  <Button className=\"w-full bg-white text-[#1c75c5] hover:bg-gray-50 hover:text-blue-700 font-semibold\">\n                    Solicitar Orçamento Gratuito\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-8\">\n            {stats.map((stat, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"inline-flex items-center justify-center w-16 h-16 bg-blue-100 rounded-full mb-4\">\n                  <stat.icon className=\"h-8 w-8 text-blue-600\" />\n                </div>\n                <div className=\"text-3xl font-bold text-gray-900 mb-2\">{stat.number}</div>\n                <div className=\"text-gray-600\">{stat.label}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Services Section */}\n      <section className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-4\">\n              Nossos Serviços Especializados\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Oferecemos soluções completas para manutenção e cuidado do seu poço artesiano\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {services.map((service, index) => (\n              <Card key={index} className=\"border-0 shadow-lg hover:shadow-xl transition-shadow duration-300\">\n                <CardHeader className=\"text-center pb-4\">\n                  <div className=\"inline-flex items-center justify-center w-16 h-16 bg-blue-100 rounded-full mb-4\">\n                    <service.icon className=\"h-8 w-8 text-blue-600\" />\n                  </div>\n                  <CardTitle className=\"text-xl\">{service.title}</CardTitle>\n                  <CardDescription className=\"text-gray-600\">\n                    {service.description}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2\">\n                    {service.features.map((feature, idx) => (\n                      <li key={idx} className=\"flex items-center space-x-2\">\n                        <CheckCircle className=\"h-4 w-4 text-green-600 flex-shrink-0\" />\n                        <span className=\"text-sm text-gray-600\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                  <Button className=\"w-full mt-6 bg-blue-600 hover:bg-blue-700 text-white\">\n                    Solicitar Orçamento\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-4\">\n              O que nossos clientes dizem\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              Experiências reais de quem confia na EccoServ\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"border-0 shadow-lg\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-1 mb-4\">\n                    {[...Array(testimonial.rating)].map((_, i) => (\n                      <Star key={i} className=\"h-5 w-5 text-yellow-400 fill-current\" />\n                    ))}\n                  </div>\n                  <p className=\"text-gray-600 mb-4 italic\">\"{testimonial.text}\"</p>\n                  <div className=\"border-t pt-4\">\n                    <p className=\"font-semibold text-gray-900\">{testimonial.name}</p>\n                    <p className=\"text-sm text-gray-500\">{testimonial.location}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-blue-600 to-green-600\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center text-white\">\n          <h2 className=\"text-3xl lg:text-4xl font-bold mb-4\">\n            Pronto para ter água pura e segura?\n          </h2>\n          <p className=\"text-xl mb-8 opacity-90\">\n            Entre em contato conosco hoje mesmo e solicite seu orçamento gratuito\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button size=\"lg\" className=\"bg-white text-blue-600 hover:bg-gray-50 hover:text-blue-700 text-lg px-8\">\n              <Phone className=\"mr-2 h-5 w-5\" />\n              Ligar Agora: (11) 9999-9999\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" className=\"border-white hover:bg-white hover:text-blue-600 text-lg px-8 text-[#1c75c5]\">\n              <Mail className=\"mr-2 h-5 w-5\" />\n              Solicitar Orçamento\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Droplets className=\"h-8 w-8 text-blue-400\" />\n                <h3 className=\"text-xl font-bold\">EccoServ</h3>\n              </div>\n              <p className=\"text-gray-400\">\n                Especialistas em manutenção de poços artesianos há mais de 15 anos.\n              </p>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Serviços</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li>Manutenção Preventiva</li>\n                <li>Limpeza de Poços</li>\n                <li>Manutenção Corretiva</li>\n                <li>Instalação</li>\n                <li>Inspeção Técnica</li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Contato</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li className=\"flex items-center space-x-2\">\n                  <Phone className=\"h-4 w-4\" />\n                  <span>(11) 9999-9999</span>\n                </li>\n                <li className=\"flex items-center space-x-2\">\n                  <Mail className=\"h-4 w-4\" />\n                  <span>contato@eccoserv.com</span>\n                </li>\n                <li className=\"flex items-center space-x-2\">\n                  <MapPin className=\"h-4 w-4\" />\n                  <span>São Paulo, SP</span>\n                </li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Horário</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li>Segunda - Sexta: 8h às 18h</li>\n                <li>Sábado: 8h às 12h</li>\n                <li>Emergências: 24h</li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-gray-400\">\n            <p>&copy; 2025 EccoServ. Todos os direitos reservados.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":15040},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Droplet } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type LoginRequest } from \"@shared/schema\";\n\nexport default function Login() {\n  const [credentials, setCredentials] = useState<LoginRequest>({\n    email: \"\",\n    password: \"\",\n    userType: \"client\" as const,\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const { login } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const user = await login(credentials);\n      toast({\n        title: \"Login realizado com sucesso!\",\n        description: \"Bem-vindo ao EccoServ\",\n      });\n      \n      // Redirect based on user type\n      if (user.userType === \"client\") {\n        setLocation(\"/client\");\n      } else if (user.userType === \"provider\") {\n        setLocation(\"/provider\");\n      } else if (user.userType === \"admin\") {\n        setLocation(\"/admin\");\n      } else {\n        setLocation(\"/\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Erro no login\",\n        description: error instanceof Error ? error.message : \"Credenciais inválidas\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary to-blue-700 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"mx-auto w-16 h-16 bg-primary rounded-xl flex items-center justify-center mb-4\">\n              <Droplet className=\"text-white text-2xl h-8 w-8\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">EccoServ</h1>\n            <p className=\"text-gray-600 mt-2\">Gestão de Poços Artesianos</p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"seu@email.com\"\n                value={credentials.email}\n                onChange={(e) => setCredentials({ ...credentials, email: e.target.value.toLowerCase() })}\n                required\n                className=\"mt-2\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"password\">Senha</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={credentials.password}\n                onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}\n                required\n                className=\"mt-2\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"userType\">Tipo de Usuário</Label>\n              <Select\n                value={credentials.userType}\n                onValueChange={(value: \"client\" | \"provider\" | \"admin\") =>\n                  setCredentials({ ...credentials, userType: value })\n                }\n              >\n                <SelectTrigger className=\"mt-2\">\n                  <SelectValue placeholder=\"Selecione...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"client\">Cliente</SelectItem>\n                  <SelectItem value=\"provider\">Prestador de Serviço</SelectItem>\n                  <SelectItem value=\"admin\">Administrador</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n            >\n              {isLoading ? \"Entrando...\" : \"Entrar\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <a href=\"#\" className=\"text-primary hover:text-primary/80 text-sm font-medium\">\n              Esqueceu sua senha?\n            </a>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4586},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/provider-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nimport { CloudUpload, Wrench, Camera, Fan, Cog, Plus, FlaskConical, Calendar, Clock, Search, Filter, X, FileText } from \"lucide-react\";\nimport { ImageViewer } from \"@/components/image-viewer\";\nimport { DocumentViewer } from \"@/components/document-viewer\";\nimport { CountdownTimer } from \"@/components/countdown-timer\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { type VisitWithDetails, type ScheduledVisitWithDetails, type VisitWithMaterials, AVAILABLE_MATERIALS, type AvailableMaterial, WATER_PARAMETERS, type WaterParameter } from \"@shared/schema\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\n\ninterface Client {\n  id: string;\n  user: { id: string; name: string; email: string };\n}\n\ninterface Well {\n  id: string;\n  name: string;\n  clientId: string;\n  client: { user: { name: string } };\n}\n\nexport default function ProviderDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get current date and time as default\n  const getCurrentDateTime = () => {\n    const now = new Date();\n    const hours = now.getHours().toString().padStart(2, '0');\n    const minutes = now.getMinutes().toString().padStart(2, '0');\n    return `${now.toISOString().split('T')[0]}T${hours}:${minutes}`;\n  };\n\n  const [visitForm, setVisitForm] = useState({\n    visitDate: getCurrentDateTime(),\n    clientId: \"\",\n    wellId: \"\",\n    serviceType: \"\",\n    visitType: \"\", // 'periodic' ou 'unique'\n    nextVisitDate: \"\",\n    observations: \"\",\n    materials: [] as Array<{ type: AvailableMaterial; quantity: number }>,\n    waterParameters: [] as Array<{ parameter: WaterParameter; value: number; unit: string; status: string; notes?: string }>,\n  });\n  \n  // Client search state\n  const [clientSearch, setClientSearch] = useState(\"\");\n  const [showClientSearch, setShowClientSearch] = useState(false);\n  const [photos, setPhotos] = useState<File[]>([]);\n  const [documents, setDocuments] = useState<File[]>([]);\n\n\n  \n  // Filters for visits\n  const [visitFilters, setVisitFilters] = useState({\n    searchQuery: \"\",\n    startDate: \"\",\n    endDate: \"\",\n  });\n\n\n  const { data: clients, isLoading: clientsLoading, error: clientsError } = useQuery<{ clients: Client[] }>({\n    queryKey: ['/api/clients'],\n  });\n\n\n\n  const { data: wells } = useQuery<{ wells: Well[] }>({\n    queryKey: ['/api/wells'],\n  });\n\n  const { data: visits, isLoading } = useQuery<{ visits: VisitWithMaterials[] }>({\n    queryKey: ['/api/providers', user?.provider?.id, 'visits-with-materials'],\n    enabled: !!user?.provider?.id,\n  });\n\n  // Filter clients based on search term (name or CPF)\n  const filteredClients = clients?.clients?.filter((client) => {\n    if (!clientSearch) return true;\n    const searchTerm = clientSearch.toLowerCase();\n    return (\n      client.user.name.toLowerCase().includes(searchTerm) ||\n      client.cpf.toLowerCase().includes(searchTerm)\n    );\n  }) || [];\n\n  // Filter visits based on search and date filters\n  const filteredVisits = visits?.visits?.filter((visit) => {\n    const searchTerm = visitFilters.searchQuery.toLowerCase();\n    const visitDate = new Date(visit.visitDate);\n    \n    // Default to current month if no dates provided\n    const now = new Date();\n    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n    \n    const startDate = visitFilters.startDate ? new Date(visitFilters.startDate) : startOfMonth;\n    const endDate = visitFilters.endDate ? new Date(visitFilters.endDate) : endOfMonth;\n    \n    // Date range filter\n    const dateInRange = visitDate >= startDate && visitDate <= endDate;\n    \n    // Search filter (ID, client name, well name, observations)\n    const matchesSearch = !searchTerm || \n      visit.id.toLowerCase().includes(searchTerm) ||\n      visit.well.client.user.name.toLowerCase().includes(searchTerm) ||\n      visit.well.name.toLowerCase().includes(searchTerm) ||\n      visit.observations.toLowerCase().includes(searchTerm);\n    \n    return dateInRange && matchesSearch;\n  }) || [];\n\n  const { data: scheduledVisits, isLoading: isLoadingScheduled } = useQuery<{ scheduledVisits: ScheduledVisitWithDetails[] }>({\n    queryKey: ['/api/providers', user?.provider?.id, 'scheduled-visits'],\n    enabled: !!user?.provider?.id,\n  });\n\n\n\n\n\n  const createVisitMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      // Use fetch directly for FormData to avoid JSON conversion\n      const response = await fetch('/api/visits', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Request failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Visita registrada!\",\n        description: \"A visita foi registrada com sucesso.\",\n      });\n      \n      // Invalidate all related queries to refresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/providers', user?.provider?.id, 'visits-with-materials'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/providers', user?.provider?.id, 'scheduled-visits'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/providers', user?.provider?.id, 'visits'] });\n      \n      // Invalidate admin queries to update admin dashboard in real-time\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/visits'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/scheduled-visits'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/materials/all-consumption'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/wells'] });\n      \n      setVisitForm({\n        visitDate: \"\",\n        clientId: \"\",\n        wellId: \"\",\n        serviceType: \"\",\n        visitType: \"\",\n        nextVisitDate: \"\",\n        observations: \"\",\n        materials: [],\n        waterParameters: [],\n      });\n      setPhotos([]);\n      setDocuments([]);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro ao registrar visita\",\n        description: error instanceof Error ? error.message : \"Tente novamente\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    console.log('Formulário submetido:', visitForm);\n    console.log('User completo:', user);\n    console.log('User provider:', user?.provider);\n    \n    if (!user?.provider?.id) {\n      console.error('Provider ID não encontrado');\n      toast({\n        title: \"Erro de autenticação\",\n        description: \"Perfil de prestador não encontrado. Faça login novamente.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validação dos campos obrigatórios\n    if (!visitForm.visitDate || !visitForm.clientId || !visitForm.wellId || !visitForm.serviceType || !visitForm.visitType || !visitForm.observations) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Por favor, preencha todos os campos obrigatórios.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('wellId', visitForm.wellId);\n    formData.append('providerId', user.provider.id);\n    formData.append('visitDate', visitForm.visitDate);\n    formData.append('serviceType', visitForm.serviceType);\n    formData.append('visitType', visitForm.visitType);\n    // Only append nextVisitDate if it has a value\n    if (visitForm.nextVisitDate && visitForm.nextVisitDate.trim() !== '') {\n      formData.append('nextVisitDate', visitForm.nextVisitDate);\n    }\n    formData.append('observations', visitForm.observations);\n    formData.append('status', 'completed');\n    formData.append('materials', JSON.stringify(visitForm.materials));\n    \n    // Anexar parâmetros de qualidade da água\n    if (visitForm.waterParameters.length > 0) {\n      formData.append('waterParameters', JSON.stringify(visitForm.waterParameters));\n    }\n\n    photos.forEach((photo) => {\n      formData.append('photos', photo);\n    });\n\n    documents.forEach((document) => {\n      formData.append('documents', document);\n    });\n\n    console.log('Enviando dados para o backend...');\n    console.log('FormData contents:');\n    formData.forEach((value, key) => {\n      console.log(key, value);\n    });\n    createVisitMutation.mutate(formData);\n  };\n\n  const handlePhotoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      setPhotos(Array.from(e.target.files));\n    }\n  }\n\n  const handleDocumentChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      setDocuments(Array.from(e.target.files));\n    }\n  };\n\n\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      completed: { label: \"Concluído\", className: \"bg-success/10 text-success\" },\n      in_progress: { label: \"Em Andamento\", className: \"bg-warning/10 text-warning\" },\n      pending: { label: \"Em Análise\", className: \"bg-warning/10 text-warning\" },\n    };\n    \n    const variant = variants[status as keyof typeof variants] || variants.pending;\n    return <Badge className={variant.className}>{variant.label}</Badge>;\n  };\n\n  const getServiceIcon = (serviceType: string) => {\n    const icons = {\n      'manutencao-preventiva': Wrench,\n      'manutencao-corretiva': Wrench,\n      'limpeza': Fan,\n      'instalacao': Cog,\n      'reparo': Wrench,\n      'inspecao': Wrench,\n    };\n    const IconComponent = icons[serviceType as keyof typeof icons] || Wrench;\n    return <IconComponent className=\"h-4 w-4\" />;\n  };\n\n  const getServiceTypeLabel = (serviceType: string) => {\n    const labels = {\n      'manutencao-preventiva': 'Manutenção Preventiva',\n      'manutencao-corretiva': 'Manutenção Corretiva',\n      'limpeza': 'Limpeza',\n      'instalacao': 'Instalação',\n      'reparo': 'Reparo',\n      'inspecao': 'Inspeção',\n    };\n    return labels[serviceType as keyof typeof labels] || serviceType;\n  };\n\n  const filteredWells = wells?.wells.filter(well => \n    !visitForm.clientId || well.clientId === visitForm.clientId\n  ) || [];\n\n\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n        <Tabs defaultValue=\"visits\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"visits\">Registrar Visita</TabsTrigger>\n            <TabsTrigger value=\"my-visits\">Minhas Visitas</TabsTrigger>\n            <TabsTrigger value=\"scheduled\">Agendamentos</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"visits\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* New Visit Form */}\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"p-6 border-b border-gray-200\">\n                  <h2 className=\"text-xl font-semibold text-gray-900\">Registrar Nova Visita</h2>\n                </div>\n                \n                <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"visitDate\">Data da Visita *</Label>\n                  <Input\n                    id=\"visitDate\"\n                    type=\"date\"\n                    value={visitForm.visitDate ? visitForm.visitDate.split('T')[0] : ''}\n                    max={new Date().toISOString().split('T')[0]}\n                    onChange={(e) => {\n                      const newDate = e.target.value;\n                      const currentTime = visitForm.visitDate && visitForm.visitDate.includes('T') \n                        ? visitForm.visitDate.split('T')[1] \n                        : new Date().toTimeString().slice(0,5);\n                      setVisitForm({ \n                        ...visitForm, \n                        visitDate: newDate ? `${newDate}T${currentTime}` : ''\n                      });\n                    }}\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"visitTime\">Horário da Visita *</Label>\n                  <Input\n                    id=\"visitTime\"\n                    type=\"time\"\n                    value={visitForm.visitDate && visitForm.visitDate.includes('T') \n                      ? visitForm.visitDate.split('T')[1] \n                      : new Date().toTimeString().slice(0,5)}\n                    max={visitForm.visitDate && visitForm.visitDate.split('T')[0] === new Date().toISOString().split('T')[0] \n                      ? new Date().toTimeString().slice(0,5) \n                      : undefined}\n                    onChange={(e) => {\n                      const newTime = e.target.value;\n                      const currentDate = visitForm.visitDate && visitForm.visitDate.includes('T') \n                        ? visitForm.visitDate.split('T')[0] \n                        : new Date().toISOString().split('T')[0];\n                      setVisitForm({ \n                        ...visitForm, \n                        visitDate: `${currentDate}T${newTime}`\n                      });\n                    }}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"clientId\">Cliente *</Label>\n                <div className=\"space-y-2\">\n                  <div className=\"flex gap-2\">\n                    <Input\n                      placeholder=\"Buscar por nome ou CPF...\"\n                      value={clientSearch}\n                      onChange={(e) => setClientSearch(e.target.value)}\n                      className=\"flex-1\"\n                    />\n                    <Button \n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setShowClientSearch(!showClientSearch)}\n                    >\n                      <Search className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  {(showClientSearch || clientSearch) && (\n                    <div className=\"border rounded-md max-h-40 overflow-y-auto\">\n                      {clientsLoading ? (\n                        <div className=\"p-3 text-sm text-gray-500\">Carregando clientes...</div>\n                      ) : clientsError ? (\n                        <div className=\"p-3 text-sm text-red-500\">Erro ao carregar clientes</div>\n                      ) : filteredClients.length > 0 ? (\n                        filteredClients.map((client) => (\n                          <div\n                            key={client.id}\n                            className={`p-3 hover:bg-gray-50 cursor-pointer border-b last:border-b-0 ${\n                              visitForm.clientId === client.id ? 'bg-blue-50 border-blue-200' : ''\n                            }`}\n                            onClick={() => {\n                              setVisitForm({ ...visitForm, clientId: client.id, wellId: \"\" });\n                              setShowClientSearch(false);\n                              setClientSearch(client.user.name);\n                            }}\n                          >\n                            <div className=\"font-medium text-sm\">{client.user.name}</div>\n                            <div className=\"text-xs text-gray-500\">CPF: {client.cpf}</div>\n                            <div className=\"text-xs text-gray-500\">{client.address}</div>\n                          </div>\n                        ))\n                      ) : (\n                        <div className=\"p-3 text-sm text-gray-500\">\n                          {clientSearch ? 'Nenhum cliente encontrado para esta busca' : 'Nenhum cliente encontrado'}\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"wellId\">Poço *</Label>\n                <Select\n                  value={visitForm.wellId}\n                  onValueChange={(value) => setVisitForm({ ...visitForm, wellId: value })}\n                  disabled={!visitForm.clientId}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione o poço...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {filteredWells.map((well) => (\n                      <SelectItem key={well.id} value={well.id}>\n                        {well.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"serviceType\">Tipo de Serviço *</Label>\n                <Select\n                  value={visitForm.serviceType}\n                  onValueChange={(value) => setVisitForm({ ...visitForm, serviceType: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione o serviço...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"manutencao-preventiva\">Manutenção Preventiva</SelectItem>\n                    <SelectItem value=\"manutencao-corretiva\">Manutenção Corretiva</SelectItem>\n                    <SelectItem value=\"limpeza\">Limpeza</SelectItem>\n                    <SelectItem value=\"instalacao\">Instalação</SelectItem>\n                    <SelectItem value=\"reparo\">Reparo</SelectItem>\n                    <SelectItem value=\"inspecao\">Inspeção</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"visitType\">Tipo de Visita *</Label>\n                  <Select\n                    value={visitForm.visitType}\n                    onValueChange={(value) => setVisitForm({ ...visitForm, visitType: value })}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecione o tipo...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"unique\">Visita Única</SelectItem>\n                      <SelectItem value=\"periodic\">Visita Periódica</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                {visitForm.visitType === 'periodic' && (\n                  <>\n                    <div>\n                      <Label htmlFor=\"nextVisitDate\">Data da Próxima Visita</Label>\n                      <Input\n                        id=\"nextVisitDate\"\n                        type=\"date\"\n                        value={visitForm.nextVisitDate ? visitForm.nextVisitDate.split('T')[0] : ''}\n                        min={new Date(new Date().getTime() + 24 * 60 * 60 * 1000).toISOString().split('T')[0]}\n                        onChange={(e) => {\n                          const newDate = e.target.value;\n                          const currentTime = visitForm.nextVisitDate && visitForm.nextVisitDate.includes('T') \n                            ? visitForm.nextVisitDate.split('T')[1] \n                            : '10:00';\n                          setVisitForm({ \n                            ...visitForm, \n                            nextVisitDate: newDate ? `${newDate}T${currentTime}` : ''\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"nextVisitTime\">Horário da Próxima Visita</Label>\n                      <Input\n                        id=\"nextVisitTime\"\n                        type=\"time\"\n                        value={visitForm.nextVisitDate && visitForm.nextVisitDate.includes('T') \n                          ? visitForm.nextVisitDate.split('T')[1] \n                          : '10:00'}\n                        onChange={(e) => {\n                          const newTime = e.target.value;\n                          const currentDate = visitForm.nextVisitDate && visitForm.nextVisitDate.includes('T') \n                            ? visitForm.nextVisitDate.split('T')[0] \n                            : new Date().toISOString().split('T')[0];\n                          setVisitForm({ \n                            ...visitForm, \n                            nextVisitDate: `${currentDate}T${newTime}`\n                          });\n                        }}\n                      />\n                    </div>\n                  </>\n                )}\n              </div>\n              \n              <div>\n                <Label>Materiais Utilizados</Label>\n                <div className=\"mt-2 space-y-3 border border-gray-200 rounded-lg p-4\">\n                  <p className=\"text-sm text-gray-600 mb-3\">Marque os materiais químicos utilizados nesta visita:</p>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                    {AVAILABLE_MATERIALS.map((material) => (\n                      <div key={material} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={material}\n                          checked={visitForm.materials.some((m) => m.type === material)}\n                          onCheckedChange={(checked) => {\n                            if (checked) {\n                              setVisitForm({\n                                ...visitForm,\n                                materials: [...visitForm.materials, { type: material, quantity: 0 }]\n                              });\n                            } else {\n                              setVisitForm({\n                                ...visitForm,\n                                materials: visitForm.materials.filter((m) => m.type !== material)\n                              });\n                            }\n                          }}\n                        />\n                        <Label htmlFor={material} className=\"text-sm font-normal\">\n                          {material}\n                        </Label>\n                        {visitForm.materials.some((m) => m.type === material) && (\n                          <div className=\"flex items-center space-x-1 ml-2\">\n                            <Input\n                              type=\"number\"\n                              placeholder=\"Quantidade (g)\"\n                              className=\"w-20 h-8 text-xs\"\n                              min=\"0\"\n                              step=\"0.1\"\n                              value={visitForm.materials.find((m) => m.type === material)?.quantity || ''}\n                              onChange={(e) => {\n                                const newMaterials = visitForm.materials.map((m) =>\n                                  m.type === material\n                                    ? { ...m, quantity: parseFloat(e.target.value) || 0 }\n                                    : m\n                                );\n                                setVisitForm({ ...visitForm, materials: newMaterials });\n                              }}\n                            />\n                            <span className=\"text-xs text-gray-500\">g</span>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              {/* Water Quality Parameters */}\n              <div className=\"space-y-4\">\n                <Label className=\"text-base font-medium\">Status da Água</Label>\n                <p className=\"text-sm text-gray-600\">Registre os parâmetros de qualidade da água baseado nos testes realizados:</p>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {WATER_PARAMETERS.map((parameter) => {\n                    const existingParam = visitForm.waterParameters.find(p => p.parameter === parameter);\n                    \n                    return (\n                      <div key={parameter} className=\"border border-gray-200 rounded-lg p-4 space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <label className=\"text-sm font-medium text-gray-700\">\n                            {parameter}\n                          </label>\n                          <Checkbox\n                            checked={!!existingParam}\n                            onCheckedChange={(checked) => {\n                              if (checked) {\n                                const newParams = [...visitForm.waterParameters, {\n                                  parameter,\n                                  value: 0,\n                                  unit: parameter === 'pH' ? 'pH' : 'mg/L',\n                                  status: 'good',\n                                  notes: ''\n                                }];\n                                setVisitForm({ ...visitForm, waterParameters: newParams });\n                              } else {\n                                const newParams = visitForm.waterParameters.filter(p => p.parameter !== parameter);\n                                setVisitForm({ ...visitForm, waterParameters: newParams });\n                              }\n                            }}\n                          />\n                        </div>\n                        \n                        {existingParam && (\n                          <div className=\"space-y-2\">\n                            <div className=\"grid grid-cols-2 gap-2\">\n                              <div>\n                                <Label className=\"text-xs text-gray-500\">Valor</Label>\n                                <Input\n                                  type=\"number\"\n                                  step=\"0.001\"\n                                  placeholder=\"0.000\"\n                                  value={existingParam.value}\n                                  onChange={(e) => {\n                                    const newParams = visitForm.waterParameters.map(p => \n                                      p.parameter === parameter \n                                        ? { ...p, value: parseFloat(e.target.value) || 0 }\n                                        : p\n                                    );\n                                    setVisitForm({ ...visitForm, waterParameters: newParams });\n                                  }}\n                                />\n                              </div>\n                              <div>\n                                <Label className=\"text-xs text-gray-500\">Unidade</Label>\n                                <Select\n                                  value={existingParam.unit}\n                                  onValueChange={(value) => {\n                                    const newParams = visitForm.waterParameters.map(p => \n                                      p.parameter === parameter \n                                        ? { ...p, unit: value }\n                                        : p\n                                    );\n                                    setVisitForm({ ...visitForm, waterParameters: newParams });\n                                  }}\n                                >\n                                  <SelectTrigger>\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"mg/L\">mg/L</SelectItem>\n                                    <SelectItem value=\"pH\">pH</SelectItem>\n                                    <SelectItem value=\"ppm\">ppm</SelectItem>\n                                    <SelectItem value=\"μg/L\">μg/L</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                              </div>\n                            </div>\n                            \n                            <div>\n                              <Label className=\"text-xs text-gray-500\">Status</Label>\n                              <Select\n                                value={existingParam.status}\n                                onValueChange={(value) => {\n                                  const newParams = visitForm.waterParameters.map(p => \n                                    p.parameter === parameter \n                                      ? { ...p, status: value }\n                                      : p\n                                  );\n                                  setVisitForm({ ...visitForm, waterParameters: newParams });\n                                }}\n                              >\n                                <SelectTrigger>\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"excellent\">Excelente</SelectItem>\n                                  <SelectItem value=\"good\">Bom</SelectItem>\n                                  <SelectItem value=\"fair\">Regular</SelectItem>\n                                  <SelectItem value=\"poor\">Ruim</SelectItem>\n                                  <SelectItem value=\"critical\">Crítico</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            \n                            <div>\n                              <Label className=\"text-xs text-gray-500\">Observações</Label>\n                              <Input\n                                placeholder=\"Observações sobre o parâmetro...\"\n                                value={existingParam.notes || ''}\n                                onChange={(e) => {\n                                  const newParams = visitForm.waterParameters.map(p => \n                                    p.parameter === parameter \n                                      ? { ...p, notes: e.target.value }\n                                      : p\n                                  );\n                                  setVisitForm({ ...visitForm, waterParameters: newParams });\n                                }}\n                              />\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"observations\">Observações *</Label>\n                <Textarea\n                  id=\"observations\"\n                  rows={4}\n                  placeholder=\"Descreva os serviços realizados, condições encontradas, materiais utilizados...\"\n                  value={visitForm.observations}\n                  onChange={(e) => setVisitForm({ ...visitForm, observations: e.target.value })}\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"photos\">Fotos do Serviço</Label>\n                <div \n                  className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-primary transition-colors cursor-pointer\"\n                  onClick={() => document.getElementById('photos')?.click()}\n                >\n                  <CloudUpload className=\"text-gray-400 text-3xl h-12 w-12 mx-auto mb-4\" />\n                  <p className=\"text-gray-600 mb-2\">Clique para fazer upload ou arraste as fotos</p>\n                  <p className=\"text-gray-400 text-sm\">PNG, JPG até 10MB cada</p>\n                  <Input\n                    id=\"photos\"\n                    type=\"file\"\n                    multiple\n                    accept=\"image/*\"\n                    onChange={handlePhotoChange}\n                    className=\"hidden\"\n                  />\n                </div>\n                {photos.length > 0 && (\n                  <p className=\"text-sm text-gray-600 mt-2\">\n                    {photos.length} foto(s) selecionada(s)\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"documents\">Documentos (PDF, Boletos)</Label>\n                <div \n                  className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-primary transition-colors cursor-pointer\"\n                  onClick={() => document.getElementById('documents')?.click()}\n                >\n                  <FileText className=\"text-gray-400 text-3xl h-12 w-12 mx-auto mb-4\" />\n                  <p className=\"text-gray-600 mb-2\">Clique para fazer upload ou arraste os documentos</p>\n                  <p className=\"text-gray-400 text-sm\">PDF, DOC, DOCX até 10MB cada</p>\n                  <Input\n                    id=\"documents\"\n                    type=\"file\"\n                    multiple\n                    accept=\".pdf,.doc,.docx\"\n                    onChange={handleDocumentChange}\n                    className=\"hidden\"\n                  />\n                </div>\n                {documents.length > 0 && (\n                  <p className=\"text-sm text-gray-600 mt-2\">\n                    {documents.length} documento(s) selecionado(s)\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"flex space-x-4\">\n                <Button \n                  type=\"submit\" \n                  className=\"flex-1\"\n                  disabled={createVisitMutation.isPending}\n                  onClick={(e) => {\n                    console.log('Botão clicado!', e);\n                  }}\n                >\n                  {createVisitMutation.isPending ? \"Registrando...\" : \"Registrar Visita\"}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\"\n                  className=\"px-6\"\n                  onClick={() => {\n                    setVisitForm({\n                      visitDate: getCurrentDateTime(),\n                      clientId: \"\",\n                      wellId: \"\",\n                      serviceType: \"\",\n                      visitType: \"\",\n                      nextVisitDate: \"\",\n                      observations: \"\",\n                      materials: [],\n                      waterParameters: [],\n                    });\n                    setPhotos([]);\n                    setDocuments([]);\n                    setClientSearch(\"\");\n                    setShowClientSearch(false);\n                  }}\n                >\n                  Limpar\n                </Button>\n              </div>\n            </form>\n          </div>\n\n          {/* Recent Visits */}\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n            <div className=\"p-6 border-b border-gray-200\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Minhas Visitas Recentes</h2>\n            </div>\n            \n            <div className=\"p-6\">\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[1, 2, 3].map((i) => (\n                    <div key={i} className=\"border border-gray-200 rounded-lg p-4 animate-pulse\">\n                      <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded mb-2\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {visits?.visits.slice(0, 5).map((visit) => (\n                    <div key={visit.id} className=\"border border-gray-200 rounded-lg p-4\">\n                      <div className=\"flex justify-between items-start mb-3\">\n                        <div>\n                          <h4 className=\"font-semibold text-gray-900\">\n                            {visit.well.client.user.name} - {visit.well.name}\n                          </h4>\n                          <p className=\"text-sm text-gray-600\">\n                            {format(new Date(visit.visitDate), 'dd/MM/yyyy HH:mm')}\n                          </p>\n                        </div>\n                        {getStatusBadge(visit.status)}\n                      </div>\n                      <p className=\"text-sm text-gray-700 mb-3\">{visit.observations}</p>\n                      \n                      {/* Materials used */}\n                      {visit.materials && visit.materials.length > 0 && (\n                        <div className=\"mb-3\">\n                          <h5 className=\"text-sm font-medium text-gray-700 mb-2\">Materiais utilizados:</h5>\n                          <div className=\"space-y-1\">\n                            {visit.materials.map((material, index) => (\n                              <div key={index} className=\"text-xs text-gray-600 bg-gray-50 rounded px-2 py-1\">\n                                <span className=\"font-medium\">{material.materialType}</span>: {material.quantityGrams}g\n                                {material.notes && <span className=\"text-gray-500\"> - {material.notes}</span>}\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                          <span className=\"flex items-center\">\n                            {getServiceIcon(visit.serviceType)}\n                            <span className=\"ml-1\">{getServiceTypeLabel(visit.serviceType)}</span>\n                          </span>\n                          <span className=\"flex items-center\">\n                            <Camera className=\"h-4 w-4 mr-1\" />\n                            {visit.photos?.length || 0} fotos\n                          </span>\n                          {visit.materials && visit.materials.length > 0 && (\n                            <span className=\"flex items-center\">\n                              <FlaskConical className=\"h-4 w-4 mr-1\" />\n                              {visit.materials.length} materiais\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          {visit.photos && visit.photos.length > 0 && (\n                            <ImageViewer \n                              images={visit.photos} \n                              className=\"text-xs\"\n                            />\n                          )}\n                          {visit.documents && visit.documents.length > 0 && (\n                            <DocumentViewer \n                              documents={visit.documents} \n                              className=\"text-xs\"\n                            />\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {(!visits?.visits || visits.visits.length === 0) && (\n                    <p className=\"text-center text-gray-500\">Nenhuma visita registrada ainda.</p>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"my-visits\">\n            <div className=\"space-y-6\">\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"p-6 border-b border-gray-200\">\n                  <h2 className=\"text-xl font-semibold text-gray-900\">Todas as Minhas Visitas</h2>\n                </div>\n                \n                <div className=\"p-6\">\n                  {/* Search and Filter Controls */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                    <div className=\"relative flex flex-col\">\n                      <Label className=\"text-sm text-gray-600 mb-1\">Buscar</Label>\n                      <div className=\"relative\">\n                        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                        <Input\n                          placeholder=\"ID, cliente, poço ou observações...\"\n                          value={visitFilters.searchQuery}\n                          onChange={(e) => setVisitFilters(prev => ({ ...prev, searchQuery: e.target.value }))}\n                          className=\"pl-10\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex flex-col\">\n                      <Label className=\"text-sm text-gray-600 mb-1\">Data início</Label>\n                      <Input\n                        type=\"date\"\n                        value={visitFilters.startDate}\n                        onChange={(e) => setVisitFilters(prev => ({ ...prev, startDate: e.target.value }))}\n                        max={new Date().toISOString().split('T')[0]}\n                      />\n                    </div>\n                    \n                    <div className=\"flex flex-col\">\n                      <Label className=\"text-sm text-gray-600 mb-1\">Data fim</Label>\n                      <Input\n                        type=\"date\"\n                        value={visitFilters.endDate}\n                        onChange={(e) => setVisitFilters(prev => ({ ...prev, endDate: e.target.value }))}\n                        min={visitFilters.startDate || undefined}\n                        max={new Date().toISOString().split('T')[0]}\n                      />\n                    </div>\n                  </div>\n                  \n                  {/* Results info */}\n                  <div className=\"text-sm text-gray-500 mb-4\">\n                    Mostrando {filteredVisits.length} de {visits?.visits?.length || 0} visitas\n                    {!visitFilters.startDate && !visitFilters.endDate && ' (mês atual)'}\n                  </div>\n                  {isLoading ? (\n                    <div className=\"space-y-4\">\n                      {[1, 2, 3, 4, 5].map((i) => (\n                        <div key={i} className=\"border border-gray-200 rounded-lg p-4 animate-pulse\">\n                          <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded mb-2\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {filteredVisits.map((visit) => (\n                        <div key={visit.id} className=\"border border-gray-200 rounded-lg p-6\">\n                          <div className=\"flex justify-between items-start mb-4\">\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-semibold text-gray-900 text-lg\">\n                                {visit.well.client.user.name} - {visit.well.name}\n                              </h4>\n                              <p className=\"text-sm text-gray-600 mt-1\">\n                                <span className=\"font-mono bg-gray-100 px-2 py-1 rounded text-xs mr-2\">\n                                  ID: {visit.id}\n                                </span>\n                                {format(new Date(visit.visitDate), 'dd/MM/yyyy HH:mm')} • {visit.well.location}\n                              </p>\n                              <div className=\"flex items-center space-x-4 text-sm text-gray-500 mt-2\">\n                                <span className=\"flex items-center\">\n                                  {getServiceIcon(visit.serviceType)}\n                                  <span className=\"ml-1\">{getServiceTypeLabel(visit.serviceType)}</span>\n                                </span>\n                                <span className=\"flex items-center\">\n                                  <Camera className=\"h-4 w-4 mr-1\" />\n                                  {visit.photos?.length || 0} fotos\n                                </span>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-3\">\n                              {getStatusBadge(visit.status)}\n\n                            </div>\n                          </div>\n                          \n                          <p className=\"text-sm text-gray-700 mb-3\">{visit.observations}</p>\n                          \n                          {/* Materials used */}\n                          {visit.materials && visit.materials.length > 0 && (\n                            <div className=\"mb-4\">\n                              <h5 className=\"text-sm font-medium text-gray-700 mb-2\">Materiais utilizados:</h5>\n                              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                                {visit.materials.map((material, index) => (\n                                  <div key={index} className=\"text-sm text-gray-600 bg-gray-50 rounded-lg p-3\">\n                                    <div className=\"font-medium\">{material.materialType}</div>\n                                    <div className=\"text-xs text-gray-500\">{material.quantityGrams}g</div>\n                                    {material.notes && (\n                                      <div className=\"text-xs text-gray-500 mt-1\">{material.notes}</div>\n                                    )}\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Water quality parameters */}\n                          {visit.waterParameters && visit.waterParameters.length > 0 && (\n                            <div className=\"mb-4\">\n                              <h5 className=\"text-sm font-medium text-gray-700 mb-2\">Status da água:</h5>\n                              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                                {visit.waterParameters.map((param, index) => (\n                                  <div key={index} className=\"text-sm text-gray-600 bg-blue-50 rounded-lg p-3\">\n                                    <div className=\"font-medium\">{param.parameter}</div>\n                                    <div className=\"text-xs text-gray-500\">{param.value} {param.unit}</div>\n                                    <div className={`text-xs font-medium mt-1 ${\n                                      param.status === 'excellent' ? 'text-green-600' :\n                                      param.status === 'good' ? 'text-blue-600' :\n                                      param.status === 'fair' ? 'text-yellow-600' :\n                                      param.status === 'poor' ? 'text-orange-600' :\n                                      'text-red-600'\n                                    }`}>\n                                      {param.status === 'excellent' ? 'Excelente' :\n                                       param.status === 'good' ? 'Bom' :\n                                       param.status === 'fair' ? 'Regular' :\n                                       param.status === 'poor' ? 'Ruim' :\n                                       'Crítico'}\n                                    </div>\n                                    {param.notes && (\n                                      <div className=\"text-xs text-gray-500 mt-1\">{param.notes}</div>\n                                    )}\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                              <span className=\"flex items-center\">\n                                {getServiceIcon(visit.serviceType)}\n                                <span className=\"ml-1\">{getServiceTypeLabel(visit.serviceType)}</span>\n                              </span>\n                              <span className=\"flex items-center\">\n                                <Camera className=\"h-4 w-4 mr-1\" />\n                                {visit.photos?.length || 0} fotos\n                              </span>\n                              {visit.materials && visit.materials.length > 0 && (\n                                <span className=\"flex items-center\">\n                                  <FlaskConical className=\"h-4 w-4 mr-1\" />\n                                  {visit.materials.length} materiais\n                                </span>\n                              )}\n                            </div>\n                            {visit.photos && visit.photos.length > 0 && (\n                              <ImageViewer \n                                images={visit.photos} \n                                className=\"text-sm\"\n                              />\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                      \n                      {filteredVisits.length === 0 && visits?.visits && visits.visits.length > 0 && (\n                        <div className=\"text-center py-12\">\n                          <Search className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                          <p className=\"text-gray-500\">Nenhuma visita encontrada com os filtros aplicados.</p>\n                          <Button \n                            variant=\"outline\" \n                            className=\"mt-4\"\n                            onClick={() => setVisitFilters({ searchQuery: \"\", startDate: \"\", endDate: \"\" })}\n                          >\n                            Limpar filtros\n                          </Button>\n                        </div>\n                      )}\n                      \n                      {(!visits?.visits || visits.visits.length === 0) && (\n                        <div className=\"text-center py-12\">\n                          <Wrench className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                          <p className=\"text-gray-500\">Nenhuma visita registrada ainda.</p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"scheduled\">\n            <div className=\"space-y-6\">\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n                <div className=\"p-6 border-b border-gray-200\">\n                  <h2 className=\"text-xl font-semibold text-gray-900\">Próximos Agendamentos</h2>\n                </div>\n                \n                <div className=\"p-6\">\n                  {isLoadingScheduled ? (\n                    <div className=\"space-y-4\">\n                      {[1, 2, 3].map((i) => (\n                        <div key={i} className=\"border border-gray-200 rounded-lg p-4 animate-pulse\">\n                          <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded mb-2\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {scheduledVisits?.scheduledVisits.map((scheduledVisit) => (\n                        <div key={scheduledVisit.id} className=\"border border-gray-200 rounded-lg p-6\">\n                          <div className=\"flex justify-between items-start mb-4\">\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-semibold text-gray-900 text-lg\">\n                                {scheduledVisit.well?.client?.user?.name || 'Cliente'} - {scheduledVisit.well?.name || 'Poço'}\n                              </h4>\n                              <p className=\"text-sm text-gray-600 mt-1\">\n                                <span className=\"font-mono bg-blue-100 px-2 py-1 rounded text-xs mr-2\">\n                                  Agendamento: {scheduledVisit.id}\n                                </span>\n                                {scheduledVisit.well?.location || 'Localização não informada'}\n                              </p>\n                              <div className=\"flex items-center space-x-4 text-sm text-gray-500 mt-2\">\n                                <span className=\"flex items-center\">\n                                  <Calendar className=\"h-4 w-4 mr-1\" />\n                                  {format(new Date(scheduledVisit.scheduledDate), 'dd/MM/yyyy HH:mm')}\n                                </span>\n                                <span className=\"flex items-center\">\n                                  {getServiceIcon(scheduledVisit.serviceType)}\n                                  <span className=\"ml-1\">{getServiceTypeLabel(scheduledVisit.serviceType)}</span>\n                                </span>\n                                <CountdownTimer \n                                  targetDate={new Date(scheduledVisit.scheduledDate).toISOString()}\n                                  className=\"mt-1\"\n                                />\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-3\">\n                              <Badge className={\n                                scheduledVisit.status === 'scheduled' ? 'bg-blue-100 text-blue-800' :\n                                scheduledVisit.status === 'confirmed' ? 'bg-green-100 text-green-800' :\n                                scheduledVisit.status === 'cancelled' ? 'bg-red-100 text-red-800' :\n                                'bg-gray-100 text-gray-800'\n                              }>\n                                {scheduledVisit.status === 'scheduled' ? 'Agendado' :\n                                 scheduledVisit.status === 'confirmed' ? 'Confirmado' :\n                                 scheduledVisit.status === 'cancelled' ? 'Cancelado' :\n                                 scheduledVisit.status}\n                              </Badge>\n                            </div>\n                          </div>\n                          \n                          {scheduledVisit.notes && (\n                            <p className=\"text-sm text-gray-700 mb-3\">{scheduledVisit.notes}</p>\n                          )}\n                          \n                          <div className=\"flex justify-end space-x-2\">\n                            {scheduledVisit.status === 'scheduled' && (\n                              <Button size=\"sm\" variant=\"outline\">\n                                <Clock className=\"h-4 w-4 mr-1\" />\n                                Confirmar Visita\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                      \n                      {(!scheduledVisits?.scheduledVisits || scheduledVisits.scheduledVisits.length === 0) && (\n                        <div className=\"text-center py-12\">\n                          <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                          <p className=\"text-gray-500\">Nenhum agendamento encontrado.</p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":57122},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Droplet, User, UserCheck } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst registerSchema = z.object({\n  name: z.string().min(2, \"Nome deve ter pelo menos 2 caracteres\"),\n  email: z.string().email(\"Email inválido\"),\n  password: z.string().min(6, \"Senha deve ter pelo menos 6 caracteres\"),\n  confirmPassword: z.string(),\n  // Client specific fields (required)\n  address: z.string().min(1, \"Endereço é obrigatório\"),\n  phone: z.string().min(1, \"Telefone é obrigatório\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Senhas não coincidem\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function RegisterPage() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  \n  const form = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      address: \"\",\n      phone: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterForm) => {\n      const userData = {\n        name: data.name,\n        email: data.email,\n        password: data.password,\n        userType: \"client\", // Always client for public registration\n      };\n\n      // Register user\n      const userResponse = await apiRequest('/api/register', {\n        method: 'POST',\n        body: JSON.stringify(userData),\n      });\n\n      // Create client profile\n      await apiRequest('/api/clients', {\n        method: 'POST',\n        body: JSON.stringify({\n          userId: userResponse.id,\n          address: data.address,\n          phone: data.phone,\n        }),\n      });\n\n      return userResponse;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Cadastro realizado com sucesso!\",\n        description: \"Você pode agora fazer login com suas credenciais.\",\n      });\n      navigate(\"/login\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro no cadastro\",\n        description: error.message || \"Ocorreu um erro ao criar sua conta.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RegisterForm) => {\n    registerMutation.mutate(data);\n  };\n\n\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <Link href=\"/\">\n            <div className=\"flex items-center justify-center space-x-2 mb-4\">\n              <Droplet className=\"h-8 w-8 text-primary\" />\n              <span className=\"text-2xl font-bold text-gray-900\">EccoServ</span>\n            </div>\n          </Link>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Cadastro de Cliente</h1>\n          <p className=\"text-gray-600 mt-2\">Cadastre-se para gerenciar seus poços artesianos</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <User className=\"h-5 w-5\" />\n              <span>Informações da Conta</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                {/* Basic Information */}\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome Completo</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Digite seu nome completo\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\" \n                          placeholder=\"Digite seu email\" \n                          {...field}\n                          onChange={(e) => {\n                            field.onChange(e.target.value.toLowerCase());\n                          }}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Senha</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"Digite sua senha\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirmar Senha</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"Confirme sua senha\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Client Information */}\n                <div className=\"pt-4 border-t\">\n                  <h3 className=\"text-sm font-medium text-gray-900 mb-3 flex items-center space-x-2\">\n                    <User className=\"h-4 w-4\" />\n                    <span>Informações do Cliente</span>\n                  </h3>\n                  \n                  <div className=\"space-y-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"address\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Endereço</FormLabel>\n                              <FormControl>\n                                <Textarea placeholder=\"Digite seu endereço completo\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"phone\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Telefone</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"(00) 00000-0000\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={registerMutation.isPending}\n                >\n                  {registerMutation.isPending ? \"Criando conta...\" : \"Criar Conta\"}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"text-center mt-6\">\n              <p className=\"text-sm text-gray-600\">\n                Já tem uma conta?{\" \"}\n                <Link href=\"/login\" className=\"text-primary hover:underline\">\n                  Fazer login\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8780},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/client-dashboard-simple.tsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { format } from \"date-fns\";\n\nimport {\n  Calendar,\n  CheckCircle,\n  Droplet,\n  MapPin,\n  Wrench,\n  Search,\n  FileText,\n  Camera,\n  Clock,\n} from \"lucide-react\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ImageViewer } from \"@/components/image-viewer\";\nimport { DocumentViewer } from \"@/components/document-viewer\";\n\nexport default function ClientDashboard() {\n  const [visitFilters, setVisitFilters] = useState({\n    searchQuery: \"\",\n    startDate: \"\",\n    endDate: \"\",\n  });\n\n  // Get current user from auth hook\n  const { user, logout } = useAuth();\n  \n  // Debug log to see user data\n  console.log(\"Current user from useAuth:\", user);\n\n  // Get visits for this client\n  const { data: visits, isLoading } = useQuery<any>({\n    queryKey: [\"/api/clients\", user?.client?.id, \"visits\"],\n    enabled: !!user?.client?.id,\n  });\n\n  // Get scheduled visits for this client\n  const { data: scheduledVisits, isLoading: isLoadingScheduled } = useQuery<any>({\n    queryKey: [\"/api/clients\", user?.client?.id, \"scheduled-visits\"],\n    enabled: !!user?.client?.id,\n  });\n\n  // Get wells for this client\n  const { data: wells } = useQuery<any>({\n    queryKey: [\"/api/clients\", user?.client?.id, \"wells\"],\n    enabled: !!user?.client?.id,\n  });\n\n  // Calculate next visit countdown (moved before any conditional returns)\n  const nextScheduledVisit = useMemo(() => {\n    console.log('Dados de visitas agendadas:', scheduledVisits);\n    if (!scheduledVisits?.scheduledVisits || scheduledVisits.scheduledVisits.length === 0) {\n      console.log('Nenhuma visita agendada encontrada');\n      return null;\n    }\n    \n    // Find the earliest upcoming visit\n    const upcomingVisits = scheduledVisits.scheduledVisits\n      .filter((visit: any) => visit.status === 'pending' && new Date(visit.scheduledDate) > new Date())\n      .sort((a: any, b: any) => new Date(a.scheduledDate).getTime() - new Date(b.scheduledDate).getTime());\n    \n    console.log('Visitas futuras pendentes:', upcomingVisits);\n    return upcomingVisits.length > 0 ? upcomingVisits[0] : null;\n  }, [scheduledVisits]);\n\n  const daysUntilNextVisit = useMemo(() => {\n    console.log('Próxima visita encontrada:', nextScheduledVisit);\n    if (!nextScheduledVisit) return null;\n    \n    const now = new Date();\n    const visitDate = new Date(nextScheduledVisit.scheduledDate);\n    const diffTime = visitDate.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    console.log('Dias até próxima visita:', diffDays);\n    return diffDays;\n  }, [nextScheduledVisit]);\n\n  // Filter visits based on search criteria\n  const filteredVisits = useMemo(() => {\n    if (!visits?.visits) return [];\n\n    return visits.visits.filter((visit: any) => {\n      const matchesSearch = !visitFilters.searchQuery || \n        visit.id.toLowerCase().includes(visitFilters.searchQuery.toLowerCase()) ||\n        visit.well?.name?.toLowerCase().includes(visitFilters.searchQuery.toLowerCase()) ||\n        visit.observations?.toLowerCase().includes(visitFilters.searchQuery.toLowerCase());\n\n      const visitDate = new Date(visit.visitDate);\n      const matchesStartDate = !visitFilters.startDate || visitDate >= new Date(visitFilters.startDate);\n      const matchesEndDate = !visitFilters.endDate || visitDate <= new Date(visitFilters.endDate);\n\n      return matchesSearch && matchesStartDate && matchesEndDate;\n    });\n  }, [visits?.visits, visitFilters]);\n\n  // Status badge functions\n  const getVisitStatusBadge = (status: string) => {\n    const variants = {\n      pending: { className: \"bg-yellow-100 text-yellow-800\", label: \"Pendente\" },\n      completed: { className: \"bg-green-100 text-green-800\", label: \"Concluída\" },\n      in_progress: { className: \"bg-blue-100 text-blue-800\", label: \"Em Andamento\" },\n      cancelled: { className: \"bg-red-100 text-red-800\", label: \"Cancelada\" }\n    };\n    \n    const variant = variants[status as keyof typeof variants] || variants.pending;\n    return <Badge className={variant.className}>{variant.label}</Badge>;\n  };\n\n  const getScheduledVisitStatusBadge = (status: string) => {\n    const variants = {\n      scheduled: { className: \"bg-blue-100 text-blue-800\", label: \"Agendada\" },\n      confirmed: { className: \"bg-green-100 text-green-800\", label: \"Confirmada\" },\n      completed: { className: \"bg-gray-100 text-gray-800\", label: \"Concluída\" },\n      cancelled: { className: \"bg-red-100 text-red-800\", label: \"Cancelada\" }\n    };\n    \n    const variant = variants[status as keyof typeof variants] || variants.scheduled;\n    return <Badge className={variant.className}>{variant.label}</Badge>;\n  };\n\n  const getWellStatusBadge = (status: string) => {\n    const variants = {\n      active: { className: \"bg-green-100 text-green-800\", label: \"Ativo\" },\n      inactive: { className: \"bg-gray-100 text-gray-800\", label: \"Inativo\" },\n      maintenance: { className: \"bg-yellow-100 text-yellow-800\", label: \"Manutenção\" }\n    };\n    \n    const variant = variants[status as keyof typeof variants] || variants.active;\n    return <Badge className={variant.className}>{variant.label}</Badge>;\n  };\n\n  const getServiceTypeLabel = (serviceType: string) => {\n    const labels = {\n      'manutencao-preventiva': 'Manutenção Preventiva',\n      'manutencao-corretiva': 'Manutenção Corretiva',\n      'limpeza': 'Limpeza',\n      'instalacao': 'Instalação',\n      'reparo': 'Reparo',\n      'inspecao': 'Inspeção',\n    };\n    return labels[serviceType as keyof typeof labels] || serviceType;\n  };\n\n  const getVisitTypeLabel = (visitType: string) => {\n    const labels = {\n      'unique': 'Visita Única',\n      'periodic': 'Visita Periódica',\n    };\n    return labels[visitType as keyof typeof labels] || visitType;\n  };\n\n  if (isLoading || isLoadingScheduled) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <nav className=\"bg-white shadow-sm border-b border-gray-200\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex justify-between h-16\">\n              <div className=\"flex items-center\">\n                <h1 className=\"text-xl font-bold text-gray-900\">EccoServ</h1>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-sm text-gray-700\">{user?.name}</span>\n                <Button variant=\"outline\" size=\"sm\">Sair</Button>\n              </div>\n            </div>\n          </div>\n        </nav>\n        <div className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n          <div className=\"text-center py-12\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n            <p className=\"mt-4 text-gray-600\">Carregando dados...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Extract unique wells from visits or use wells from API\n  const activeWells = wells?.wells || visits?.visits?.reduce((acc: any[], visit: any) => {\n    if (!acc.some((well: any) => well.id === visit.well.id)) {\n      acc.push(visit.well);\n    }\n    return acc;\n  }, [] as any[]) || [];\n\n  const totalVisits = visits?.visits?.length || 0;\n  const completedVisits = visits?.visits?.filter((v: any) => v.status === 'completed').length || 0;\n  const scheduledVisitsCount = scheduledVisits?.scheduledVisits?.length || 0;\n\n\n\n  // Stats Card Component\n  const StatsCard = ({ title, value, icon: Icon, variant }: any) => {\n    const variantClasses: Record<string, string> = {\n      primary: \"bg-blue-500 text-white\",\n      success: \"bg-green-500 text-white\",\n      warning: \"bg-yellow-500 text-white\",\n      danger: \"bg-red-500 text-white\",\n    };\n\n    return (\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm font-medium text-gray-600\">{title}</p>\n            <p className=\"font-bold text-gray-900 text-[24px]\">{value}</p>\n          </div>\n          <div className={`p-3 rounded-full ${variantClasses[variant] || variantClasses.primary}`}>\n            <Icon className=\"h-6 w-6\" />\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Navbar */}\n      <nav className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between h-16\">\n            <div className=\"flex items-center\">\n              <h1 className=\"text-xl font-bold text-gray-900\">EccoServ</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-700\">{user?.name}</span>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => {\n                  logout();\n                  window.location.href = \"/\";\n                }}\n              >\n                Sair\n              </Button>\n            </div>\n          </div>\n        </div>\n      </nav>\n      \n      <div className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Painel do Cliente</h1>\n          <p className=\"text-gray-600 mt-2\">Bem-vindo, {user?.name}!</p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <StatsCard\n            title=\"Poços Ativos\"\n            value={activeWells.length}\n            icon={Droplet}\n            variant=\"primary\"\n          />\n          <StatsCard\n            title=\"Visitas Realizadas\"\n            value={completedVisits}\n            icon={CheckCircle}\n            variant=\"success\"\n          />\n          <StatsCard\n            title=\"Próxima Visita\"\n            value={daysUntilNextVisit !== null ? `${daysUntilNextVisit} ${daysUntilNextVisit === 1 ? 'dia' : 'dias'}` : 'Nenhuma'}\n            icon={Clock}\n            variant={daysUntilNextVisit !== null && daysUntilNextVisit <= 7 ? \"danger\" : daysUntilNextVisit !== null ? \"warning\" : \"primary\"}\n          />\n          <StatsCard\n            title=\"Total de Visitas\"\n            value={totalVisits}\n            icon={Wrench}\n            variant=\"primary\"\n          />\n        </div>\n\n        <Tabs defaultValue=\"wells\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"wells\">Poços Ativos</TabsTrigger>\n            <TabsTrigger value=\"visits\">Visitas Prestadas</TabsTrigger>\n            <TabsTrigger value=\"scheduled\">Agendamentos</TabsTrigger>\n          </TabsList>\n\n          {/* Wells Tab */}\n          <TabsContent value=\"wells\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <div className=\"p-6 border-b border-gray-200\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">Meus Poços</h2>\n                <p className=\"text-sm text-gray-600 mt-1\">Poços cadastrados pelo seu prestador de serviço</p>\n              </div>\n              \n              <div className=\"p-6\">\n                {activeWells.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {activeWells.map((well: any) => (\n                      <div key={well.id} className=\"bg-gray-50 rounded-lg p-6 border border-gray-200\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex items-center\">\n                            <Droplet className=\"h-8 w-8 text-blue-600 mr-3\" />\n                            <div>\n                              <h3 className=\"font-semibold text-gray-900\">{well.name}</h3>\n                              <p className=\"text-sm text-gray-600\">{well.type}</p>\n                            </div>\n                          </div>\n                          {getWellStatusBadge(well.status)}\n                        </div>\n                        \n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex items-center text-gray-600\">\n                            <MapPin className=\"h-4 w-4 mr-2\" />\n                            <span className=\"truncate\">{well.location}</span>\n                          </div>\n                          <div className=\"grid grid-cols-2 gap-4 mt-3\">\n                            <div>\n                              <span className=\"text-gray-500\">Profundidade:</span>\n                              <p className=\"font-medium\">{well.depth}m</p>\n                            </div>\n                            <div>\n                              <span className=\"text-gray-500\">Diâmetro:</span>\n                              <p className=\"font-medium\">{well.diameter}cm</p>\n                            </div>\n                          </div>\n                          {well.installationDate && (\n                            <div className=\"mt-3\">\n                              <span className=\"text-gray-500\">Instalado em:</span>\n                              <p className=\"font-medium\">{well.installationDate ? format(new Date(well.installationDate), 'dd/MM/yyyy') : 'Data não disponível'}</p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Droplet className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">Nenhum poço registrado.</p>\n                    <p className=\"text-gray-400 text-sm mt-2\">\n                      Entre em contato com um prestador de serviço para cadastrar seus poços.\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Visits Tab */}\n          <TabsContent value=\"visits\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <div className=\"p-6 border-b border-gray-200\">\n                <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n                  <h2 className=\"text-xl font-semibold text-gray-900\">Histórico de Visitas</h2>\n                  \n                  {/* Search and Filters */}\n                  <div className=\"flex flex-col sm:flex-row gap-2\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        placeholder=\"Buscar visitas...\"\n                        value={visitFilters.searchQuery}\n                        onChange={(e) => setVisitFilters({ ...visitFilters, searchQuery: e.target.value })}\n                        className=\"pl-10 w-full sm:w-auto\"\n                      />\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        type=\"date\"\n                        value={visitFilters.startDate}\n                        onChange={(e) => setVisitFilters({ ...visitFilters, startDate: e.target.value })}\n                        className=\"w-full sm:w-auto\"\n                      />\n                      <Input\n                        type=\"date\"\n                        value={visitFilters.endDate}\n                        onChange={(e) => setVisitFilters({ ...visitFilters, endDate: e.target.value })}\n                        className=\"w-full sm:w-auto\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"p-6\">\n                {filteredVisits.length > 0 ? (\n                  <div className=\"space-y-6\">\n                    {filteredVisits.map((visit: any) => (\n                      <div key={visit.id} className=\"border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow\">\n                        <div className=\"flex justify-between items-start mb-4\">\n                          <div>\n                            <h3 className=\"font-semibold text-lg text-gray-900\">Visita #{visit.id}</h3>\n                            <p className=\"text-sm text-gray-600\">{visit.well?.name || 'Poço não especificado'}</p>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            {getVisitStatusBadge(visit.status)}\n                            <span className=\"text-sm text-gray-500\">{visit.visitDate ? format(new Date(visit.visitDate), 'dd/MM/yyyy HH:mm') : 'Data inválida'}</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-4\">\n                          <div>\n                            <h4 className=\"font-medium text-gray-900 mb-2\">Informações da Visita</h4>\n                            <div className=\"space-y-2 text-sm\">\n                              <div className=\"grid grid-cols-3 gap-2\">\n                                <span className=\"text-gray-600 font-medium\">Tipo de Serviço:</span>\n                                <span className=\"col-span-2\">{getServiceTypeLabel(visit.serviceType)}</span>\n                              </div>\n                              <div className=\"grid grid-cols-3 gap-2\">\n                                <span className=\"text-gray-600 font-medium\">Tipo de Visita:</span>\n                                <span className=\"col-span-2\">{getVisitTypeLabel(visit.visitType)}</span>\n                              </div>\n                              <div className=\"grid grid-cols-3 gap-2\">\n                                <span className=\"text-gray-600 font-medium\">Prestador:</span>\n                                <span className=\"col-span-2\">{visit.provider?.user?.name || 'N/A'}</span>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div>\n                            <h4 className=\"font-medium text-gray-900 mb-2\">Observações</h4>\n                            <p className=\"text-sm text-gray-600 bg-gray-50 p-3 rounded-lg\">\n                              {visit.observations || 'Nenhuma observação registrada.'}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-between items-center pt-4 border-t border-gray-100\">\n                          <div className=\"text-sm text-gray-500\">\n                            Criada em {visit.createdAt ? format(new Date(visit.createdAt), 'dd/MM/yyyy HH:mm') : 'Data não disponível'}\n                          </div>\n                          <div className=\"flex gap-2\">\n                            {visit.invoiceUrl && (\n                              <Button variant=\"outline\" size=\"sm\" asChild>\n                                <a href={visit.invoiceUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                                  <FileText className=\"h-4 w-4 mr-1\" />\n                                  Ver Fatura\n                                </a>\n                              </Button>\n                            )}\n                            {visit.photos && visit.photos.length > 0 && (\n                              <ImageViewer \n                                images={visit.photos} \n                                trigger={\n                                  <Button variant=\"outline\" size=\"sm\">\n                                    <Camera className=\"h-4 w-4 mr-1\" />\n                                    Ver Fotos ({visit.photos.length})\n                                  </Button>\n                                }\n                              />\n                            )}\n                            {visit.documents && visit.documents.length > 0 && (\n                              <DocumentViewer \n                                documents={visit.documents} \n                                trigger={\n                                  <Button variant=\"outline\" size=\"sm\">\n                                    <FileText className=\"h-4 w-4 mr-1\" />\n                                    Baixar Documentos ({visit.documents.length})\n                                  </Button>\n                                }\n                              />\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">Nenhuma visita encontrada.</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Scheduled Visits Tab */}\n          <TabsContent value=\"scheduled\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <div className=\"p-6 border-b border-gray-200\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">Visitas Agendadas</h2>\n              </div>\n              \n              <div className=\"p-6\">\n                {scheduledVisits?.scheduledVisits && scheduledVisits.scheduledVisits.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {scheduledVisits.scheduledVisits.map((scheduled: any) => (\n                      <div key={scheduled.id} className=\"border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow\">\n                        <div className=\"flex justify-between items-start mb-4\">\n                          <div>\n                            <h3 className=\"font-semibold text-gray-900\">Agendamento #{scheduled.id}</h3>\n                            <p className=\"text-sm text-gray-600\">{scheduled.well?.name || 'Poço não especificado'}</p>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            {getScheduledVisitStatusBadge(scheduled.status)}\n                            <span className=\"text-sm text-gray-500\">{scheduled.scheduledDate ? format(new Date(scheduled.scheduledDate), 'dd/MM/yyyy HH:mm') : 'Data inválida'}</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                          <div>\n                            <h4 className=\"font-medium text-gray-900 mb-2\">Detalhes do Agendamento</h4>\n                            <div className=\"space-y-2 text-sm\">\n                              <div className=\"grid grid-cols-3 gap-2\">\n                                <span className=\"text-gray-600 font-medium\">Tipo de Serviço:</span>\n                                <span className=\"col-span-2\">{getServiceTypeLabel(scheduled.serviceType)}</span>\n                              </div>\n                              <div className=\"grid grid-cols-3 gap-2\">\n                                <span className=\"text-gray-600 font-medium\">Prestador:</span>\n                                <span className=\"col-span-2\">{scheduled.provider?.user?.name || 'N/A'}</span>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div>\n                            <h4 className=\"font-medium text-gray-900 mb-2\">Observações</h4>\n                            <p className=\"text-sm text-gray-600 bg-gray-50 p-3 rounded-lg\">\n                              {scheduled.notes || 'Nenhuma observação para este agendamento.'}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"pt-4 border-t border-gray-100\">\n                          <p className=\"text-sm text-gray-500\">\n                            Agendado em {scheduled.createdAt ? format(new Date(scheduled.createdAt), 'dd/MM/yyyy HH:mm') : 'Data não disponível'}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">Nenhuma visita agendada.</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":25262},"client/src/components/document-viewer.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { FileText, Download } from \"lucide-react\";\n\ninterface DocumentViewerProps {\n  documents: string[];\n  trigger?: React.ReactNode;\n  className?: string;\n}\n\nexport function DocumentViewer({ documents, trigger, className = \"\" }: DocumentViewerProps) {\n  if (!documents || documents.length === 0) {\n    return null;\n  }\n\n  const defaultTrigger = (\n    <Button variant=\"outline\" size=\"sm\" className={className}>\n      <FileText className=\"h-4 w-4 mr-1\" />\n      Baixar Documentos ({documents.length})\n    </Button>\n  );\n\n  const handleDownload = (documentName: string) => {\n    // Extrair nome original removendo timestamp\n    const originalName = documentName.includes('_') ? \n      documentName.substring(documentName.indexOf('_') + 1) : \n      documentName;\n    \n    // Download do documento mantendo formato original\n    const link = window.document.createElement('a');\n    link.href = `/uploads/${documentName}`;\n    link.download = originalName;\n    link.style.display = 'none';\n    window.document.body.appendChild(link);\n    link.click();\n    window.document.body.removeChild(link);\n  };\n\n  const getOriginalName = (filename: string) => {\n    // Extrair nome original removendo timestamp\n    return filename.includes('_') ? \n      filename.substring(filename.indexOf('_') + 1) : \n      filename;\n  };\n\n  const getFileExtension = (filename: string) => {\n    const originalName = getOriginalName(filename);\n    return originalName.split('.').pop()?.toUpperCase() || 'DOC';\n  };\n\n  const getFileIcon = (filename: string) => {\n    const originalName = getOriginalName(filename);\n    const ext = originalName.split('.').pop()?.toLowerCase();\n    switch (ext) {\n      case 'pdf':\n        return '📄';\n      case 'doc':\n      case 'docx':\n        return '📝';\n      case 'xls':\n      case 'xlsx':\n        return '📊';\n      case 'txt':\n        return '📃';\n      default:\n        return '📋';\n    }\n  };\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        {trigger || defaultTrigger}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Documentos da Visita</DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-3\">\n          {documents.map((document, index) => (\n            <div\n              key={index}\n              className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"text-2xl\">{getFileIcon(document)}</div>\n                <div>\n                  <p className=\"font-medium text-sm\">{getOriginalName(document)}</p>\n                  <p className=\"text-xs text-gray-500\">\n                    Arquivo {getFileExtension(document)} • Clique para baixar\n                  </p>\n                </div>\n              </div>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleDownload(document)}\n                className=\"h-8\"\n              >\n                <Download className=\"h-3 w-3 mr-1\" />\n                Baixar\n              </Button>\n            </div>\n          ))}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":3395},"client/src/pages/client-dashboard-fixed.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\n\nimport {\n  Calendar,\n  CheckCircle,\n  Droplet,\n  MapPin,\n  Wrench,\n  Search,\n  FileText,\n  Camera,\n} from \"lucide-react\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nimport Navbar from \"@/components/Navbar\";\nimport StatsCard from \"@/components/StatsCard\";\nimport { DocumentViewer } from \"@/components/document-viewer\";\n\nexport default function ClientDashboard() {\n  const [visitFilters, setVisitFilters] = useState({\n    searchQuery: \"\",\n    startDate: \"\",\n    endDate: \"\",\n  });\n\n  // Get current user from auth\n  const { data: user } = useQuery<any>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  // Get visits for this client\n  const { data: visits, isLoading } = useQuery<any>({\n    queryKey: [\"/api/clients\", user?.client?.id, \"visits\"],\n    enabled: !!user?.client?.id,\n  });\n\n  // Get scheduled visits for this client\n  const { data: scheduledVisits, isLoading: isLoadingScheduled } = useQuery<any>({\n    queryKey: [\"/api/clients\", user?.client?.id, \"scheduled-visits\"],\n    enabled: !!user?.client?.id,\n  });\n\n  // Get wells for this client\n  const { data: wells } = useQuery<any>({\n    queryKey: [\"/api/clients\", user?.client?.id, \"wells\"],\n    enabled: !!user?.client?.id,\n  });\n\n\n\n  // Filter visits based on search criteria\n  const filteredVisits = useMemo(() => {\n    if (!visits?.visits) return [];\n\n    return visits.visits.filter((visit: any) => {\n      const matchesSearch = !visitFilters.searchQuery || \n        visit.id.toLowerCase().includes(visitFilters.searchQuery.toLowerCase()) ||\n        visit.well?.name?.toLowerCase().includes(visitFilters.searchQuery.toLowerCase()) ||\n        visit.observations?.toLowerCase().includes(visitFilters.searchQuery.toLowerCase());\n\n      const visitDate = new Date(visit.visitDate);\n      const matchesStartDate = !visitFilters.startDate || visitDate >= new Date(visitFilters.startDate);\n      const matchesEndDate = !visitFilters.endDate || visitDate <= new Date(visitFilters.endDate);\n\n      return matchesSearch && matchesStartDate && matchesEndDate;\n    });\n  }, [visits?.visits, visitFilters]);\n\n  // Status badge functions\n  const getVisitStatusBadge = (status: string) => {\n    const variants = {\n      pending: { className: \"bg-yellow-100 text-yellow-800\", label: \"Pendente\" },\n      completed: { className: \"bg-green-100 text-green-800\", label: \"Concluída\" },\n      in_progress: { className: \"bg-blue-100 text-blue-800\", label: \"Em Andamento\" },\n      cancelled: { className: \"bg-red-100 text-red-800\", label: \"Cancelada\" }\n    };\n    \n    const variant = variants[status as keyof typeof variants] || variants.pending;\n    return <Badge className={variant.className}>{variant.label}</Badge>;\n  };\n\n  const getScheduledVisitStatusBadge = (status: string) => {\n    const variants = {\n      scheduled: { className: \"bg-blue-100 text-blue-800\", label: \"Agendada\" },\n      confirmed: { className: \"bg-green-100 text-green-800\", label: \"Confirmada\" },\n      completed: { className: \"bg-gray-100 text-gray-800\", label: \"Concluída\" },\n      cancelled: { className: \"bg-red-100 text-red-800\", label: \"Cancelada\" }\n    };\n    \n    const variant = variants[status as keyof typeof variants] || variants.scheduled;\n    return <Badge className={variant.className}>{variant.label}</Badge>;\n  };\n\n  const getWellStatusBadge = (status: string) => {\n    const variants = {\n      active: { className: \"bg-green-100 text-green-800\", label: \"Ativo\" },\n      inactive: { className: \"bg-gray-100 text-gray-800\", label: \"Inativo\" },\n      maintenance: { className: \"bg-yellow-100 text-yellow-800\", label: \"Manutenção\" }\n    };\n    \n    const variant = variants[status as keyof typeof variants] || variants.active;\n    return <Badge className={variant.className}>{variant.label}</Badge>;\n  };\n\n  if (isLoading || isLoadingScheduled) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navbar />\n        <div className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n          <div className=\"text-center py-12\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n            <p className=\"mt-4 text-gray-600\">Carregando dados...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n\n\n  // Extract unique wells from visits or use wells from API\n  const activeWells = wells?.wells || visits?.visits?.reduce((acc: any[], visit: any) => {\n    if (!acc.some((well: any) => well.id === visit.well.id)) {\n      acc.push(visit.well);\n    }\n    return acc;\n  }, [] as any[]) || [];\n\n  const totalVisits = visits?.visits?.length || 0;\n  const completedVisits = visits?.visits?.filter((v: any) => v.status === 'completed').length || 0;\n  const scheduledVisitsCount = scheduledVisits?.scheduledVisits?.length || 0;\n  const lastVisit = visits?.visits\n    ?.filter((v: any) => v.status === 'completed')\n    .sort((a: any, b: any) => new Date(b.visitDate).getTime() - new Date(a.visitDate).getTime())[0];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Painel do Cliente</h1>\n          <p className=\"text-gray-600 mt-2\">Bem-vindo, {user?.name}!</p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <StatsCard\n            title=\"Poços Ativos\"\n            value={activeWells.length}\n            icon={Droplet}\n            variant=\"primary\"\n          />\n          <StatsCard\n            title=\"Visitas Realizadas\"\n            value={completedVisits}\n            icon={CheckCircle}\n            variant=\"success\"\n          />\n          <StatsCard\n            title=\"Visitas Agendadas\"\n            value={scheduledVisitsCount}\n            icon={Calendar}\n            variant=\"warning\"\n          />\n          <StatsCard\n            title=\"Total de Visitas\"\n            value={totalVisits}\n            icon={Wrench}\n            variant=\"primary\"\n          />\n        </div>\n\n        <Tabs defaultValue=\"wells\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"wells\">Poços Ativos</TabsTrigger>\n            <TabsTrigger value=\"visits\">Visitas Prestadas</TabsTrigger>\n            <TabsTrigger value=\"scheduled\">Agendamentos</TabsTrigger>\n          </TabsList>\n\n          {/* Wells Tab */}\n          <TabsContent value=\"wells\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <div className=\"p-6 border-b border-gray-200\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">Meus Poços</h2>\n                <p className=\"text-sm text-gray-600 mt-1\">Poços cadastrados pelo seu prestador de serviço</p>\n              </div>\n              \n              <div className=\"p-6\">\n                {activeWells.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {activeWells.map((well: any) => (\n                      <div key={well.id} className=\"bg-gray-50 rounded-lg p-6 border border-gray-200\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex items-center\">\n                            <Droplet className=\"h-8 w-8 text-blue-600 mr-3\" />\n                            <div>\n                              <h3 className=\"font-semibold text-gray-900\">{well.name}</h3>\n                              <p className=\"text-sm text-gray-600\">{well.type}</p>\n                            </div>\n                          </div>\n                          {getWellStatusBadge(well.status)}\n                        </div>\n                        \n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex items-center text-gray-600\">\n                            <MapPin className=\"h-4 w-4 mr-2\" />\n                            <span className=\"truncate\">{well.location}</span>\n                          </div>\n                          <div className=\"grid grid-cols-2 gap-4 mt-3\">\n                            <div>\n                              <span className=\"text-gray-500\">Profundidade:</span>\n                              <p className=\"font-medium\">{well.depth}m</p>\n                            </div>\n                            <div>\n                              <span className=\"text-gray-500\">Diâmetro:</span>\n                              <p className=\"font-medium\">{well.diameter}cm</p>\n                            </div>\n                          </div>\n                          {well.installationDate && (\n                            <div className=\"mt-3\">\n                              <span className=\"text-gray-500\">Instalado em:</span>\n                              <p className=\"font-medium\">{format(new Date(well.installationDate), 'dd/MM/yyyy')}</p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Droplet className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">Nenhum poço registrado.</p>\n                    <p className=\"text-gray-400 text-sm mt-2\">\n                      Entre em contato com um prestador de serviço para cadastrar seus poços.\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Visits Tab */}\n          <TabsContent value=\"visits\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <div className=\"p-6 border-b border-gray-200\">\n                <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n                  <h2 className=\"text-xl font-semibold text-gray-900\">Histórico de Visitas</h2>\n                  \n                  {/* Search and Filters */}\n                  <div className=\"flex flex-col sm:flex-row gap-2\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        placeholder=\"Buscar visitas...\"\n                        value={visitFilters.searchQuery}\n                        onChange={(e) => setVisitFilters({ ...visitFilters, searchQuery: e.target.value })}\n                        className=\"pl-10 w-full sm:w-auto\"\n                      />\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        type=\"date\"\n                        value={visitFilters.startDate}\n                        onChange={(e) => setVisitFilters({ ...visitFilters, startDate: e.target.value })}\n                        className=\"w-full sm:w-auto\"\n                      />\n                      <Input\n                        type=\"date\"\n                        value={visitFilters.endDate}\n                        onChange={(e) => setVisitFilters({ ...visitFilters, endDate: e.target.value })}\n                        className=\"w-full sm:w-auto\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"p-6\">\n                {filteredVisits.length > 0 ? (\n                  <div className=\"space-y-6\">\n                    {filteredVisits.map((visit: any) => (\n                      <div key={visit.id} className=\"border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow\">\n                        <div className=\"flex justify-between items-start mb-4\">\n                          <div>\n                            <h3 className=\"font-semibold text-lg text-gray-900\">Visita #{visit.id}</h3>\n                            <p className=\"text-sm text-gray-600\">{visit.well?.name || 'Poço não especificado'}</p>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            {getVisitStatusBadge(visit.status)}\n                            <span className=\"text-sm text-gray-500\">{format(new Date(visit.visitDate), 'dd/MM/yyyy')}</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-4\">\n                          <div>\n                            <h4 className=\"font-medium text-gray-900 mb-2\">Informações da Visita</h4>\n                            <div className=\"space-y-1 text-sm\">\n                              <div className=\"flex justify-between\">\n                                <span className=\"text-gray-600\">Tipo de Serviço:</span>\n                                <span className=\"capitalize\">{visit.serviceType}</span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span className=\"text-gray-600\">Tipo de Visita:</span>\n                                <span className=\"capitalize\">{visit.visitType}</span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span className=\"text-gray-600\">Prestador:</span>\n                                <span>{visit.provider?.user?.name || 'N/A'}</span>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div>\n                            <h4 className=\"font-medium text-gray-900 mb-2\">Observações</h4>\n                            <p className=\"text-sm text-gray-600 bg-gray-50 p-3 rounded-lg\">\n                              {visit.observations || 'Nenhuma observação registrada.'}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-between items-center pt-4 border-t border-gray-100\">\n                          <div className=\"text-sm text-gray-500\">\n                            Criada em {format(new Date(visit.createdAt), 'dd/MM/yyyy HH:mm')}\n                          </div>\n                          <div className=\"flex gap-2\">\n                            {visit.invoiceUrl && (\n                              <Button variant=\"outline\" size=\"sm\" asChild>\n                                <a href={visit.invoiceUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                                  <FileText className=\"h-4 w-4 mr-1\" />\n                                  Ver Fatura\n                                </a>\n                              </Button>\n                            )}\n                            {visit.photos && visit.photos.length > 0 && (\n                              <Button variant=\"outline\" size=\"sm\">\n                                <Camera className=\"h-4 w-4 mr-1\" />\n                                Ver Fotos ({visit.photos.length})\n                              </Button>\n                            )}\n                            {visit.documents && visit.documents.length > 0 && (\n                              <DocumentViewer \n                                documents={visit.documents} \n                                trigger={\n                                  <Button variant=\"outline\" size=\"sm\">\n                                    <FileText className=\"h-4 w-4 mr-1\" />\n                                    Baixar Documentos ({visit.documents.length})\n                                  </Button>\n                                }\n                              />\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">Nenhuma visita encontrada.</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Scheduled Visits Tab */}\n          <TabsContent value=\"scheduled\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <div className=\"p-6 border-b border-gray-200\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">Visitas Agendadas</h2>\n              </div>\n              \n              <div className=\"p-6\">\n                {scheduledVisits?.scheduledVisits && scheduledVisits.scheduledVisits.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {scheduledVisits.scheduledVisits.map((scheduled: any) => (\n                      <div key={scheduled.id} className=\"border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow\">\n                        <div className=\"flex justify-between items-start mb-4\">\n                          <div>\n                            <h3 className=\"font-semibold text-gray-900\">Agendamento #{scheduled.id}</h3>\n                            <p className=\"text-sm text-gray-600\">{scheduled.well?.name || 'Poço não especificado'}</p>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            {getScheduledVisitStatusBadge(scheduled.status)}\n                            <span className=\"text-sm text-gray-500\">{format(new Date(scheduled.scheduledDate), 'dd/MM/yyyy HH:mm')}</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                          <div>\n                            <h4 className=\"font-medium text-gray-900 mb-2\">Detalhes do Agendamento</h4>\n                            <div className=\"space-y-1 text-sm\">\n                              <div className=\"flex justify-between\">\n                                <span className=\"text-gray-600\">Tipo de Serviço:</span>\n                                <span className=\"capitalize\">{scheduled.serviceType}</span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span className=\"text-gray-600\">Prestador:</span>\n                                <span>{scheduled.provider?.user?.name || 'N/A'}</span>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div>\n                            <h4 className=\"font-medium text-gray-900 mb-2\">Observações</h4>\n                            <p className=\"text-sm text-gray-600 bg-gray-50 p-3 rounded-lg\">\n                              {scheduled.notes || 'Nenhuma observação para este agendamento.'}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"pt-4 border-t border-gray-100\">\n                          <p className=\"text-sm text-gray-500\">\n                            Agendado em {format(new Date(scheduled.createdAt), 'dd/MM/yyyy HH:mm')}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">Nenhuma visita agendada.</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":20362}}}